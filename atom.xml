<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dimsum</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dimsum.fun/"/>
  <updated>2020-05-20T11:09:09.094Z</updated>
  <id>http://www.dimsum.fun/</id>
  
  <author>
    <name>Jiamiao.x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>T-SQL复习05--基础查询</title>
    <link href="http://www.dimsum.fun/2020/05/20/29.TSqlReview05/"/>
    <id>http://www.dimsum.fun/2020/05/20/29.TSqlReview05/</id>
    <published>2020-05-20T06:49:00.000Z</published>
    <updated>2020-05-20T11:09:09.094Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#select%e8%af%ad%e5%8f%a5%e8%af%ad%e6%b3%95">SELECT语句语法</a></li><li><a href="#%e6%9f%a5%e8%af%a2%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f">查询执行顺序</a></li><li><a href="#%e4%bd%bf%e7%94%a8selectwhere%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%ae">使用SELECT…WHERE查询数据</a><ul><li><a href="#%e4%bd%bf%e7%94%a8%e9%80%9a%e9%85%8d%e7%ac%a6%e6%9f%a5%e8%af%a2%e6%89%80%e6%9c%89%e5%88%97">使用通配符<code>*</code>查询所有列</a></li><li><a href="#%e6%9f%a5%e8%af%a2%e6%8c%87%e5%ae%9a%e7%9a%84%e5%88%97">查询指定的列</a></li><li><a href="#%e4%bd%bf%e7%94%a8as%e7%bb%99%e5%88%97%e6%88%96%e8%a1%a8%e6%8c%87%e5%ae%9a%e5%88%ab%e5%90%8d">使用<code>as</code>给列或表指定别名</a></li><li><a href="#where%e4%bd%bf%e7%94%a8"><code>where</code>使用</a></li></ul></li><li><a href="#%e6%a8%a1%e7%b3%8a%e6%9f%a5%e8%af%a2">模糊查询</a></li><li><a href="#orand%e9%80%bb%e8%be%91%e8%bf%90%e7%ae%97">OR/AND逻辑运算</a></li><li><a href="#betweenand">BETWEEN…AND</a></li><li><a href="#in">IN</a></li><li><a href="#is-null">IS NULL</a></li><li><a href="#order-by">ORDER BY</a></li><li><a href="#%e6%8e%92%e5%90%8d%e5%87%bd%e6%95%b0rank">排名函数RANK</a></li><li><a href="#%e6%8e%92%e5%90%8d%e5%87%bd%e6%95%b0rownumber">排名函数ROW_NUMBER</a></li><li><a href="#%e8%bf%87%e6%bb%a4%e9%87%8d%e5%a4%8d%e6%95%b0%e6%8d%ae">过滤重复数据</a></li><li><a href="#%e5%88%a4%e6%96%ad%e5%af%b9%e8%b1%a1%e8%a1%a8%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e8%a7%86%e5%9b%be%e7%ad%89%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8">判断对象(表/存储过程/视图等)是否存在</a><ul><li><a href="#%e5%88%a4%e6%96%ad%e8%a1%a8%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8%e6%96%b9%e5%bc%8f1">判断表是否存在方式1</a></li><li><a href="#%e5%88%a4%e6%96%ad%e8%a1%a8%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8%e6%96%b9%e5%bc%8f2">判断表是否存在方式2</a></li></ul></li><li><a href="#selectinto">SELECT…INTO</a></li><li><a href="#insertselect">INSERT…SELECT</a></li><li><a href="#mergeinto">MERGE..INTO</a></li></ul><h1 id="SELECT语句语法"><a href="#SELECT语句语法" class="headerlink" title="SELECT语句语法"></a>SELECT语句语法</h1><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 选择列表(查询所显示的内容)</span><br><span class="line"><span class="keyword">from</span> 表名(查询内容所在的表)</span><br><span class="line"><span class="keyword">where</span> 查询条件(查询内容的条件)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 条件(分组汇总的条件)</span><br><span class="line"><span class="keyword">having</span> 条件(筛选条件)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 列名(排序基准)</span><br></pre></td></tr></table></figure><p>解析：</p><ol><li>选择列表：可以包括几个列名或者表达式，用逗号隔开，用于指示应该返回哪些数据</li><li>from子句包含提供数据的表或视图名称</li><li>where子句用于给出查询条件</li><li>聚合函数对数据进行汇总计算，使用having进行筛选</li><li>order by子句决定结果集的排列顺序</li></ol><h1 id="查询执行顺序"><a href="#查询执行顺序" class="headerlink" title="查询执行顺序"></a>查询执行顺序</h1><ol><li>FROM：查询首先回根据<code>select</code>语句的<code>from</code>子句组装初始数据集</li><li>WHERE：筛选阶段实际上是根据<code>where</code>子句进行筛选</li><li>聚合：SQL语句对数据集执行聚合运算</li><li>ORDER BY：根据<code>from</code>子句和<code>where</code>子句筛选出满足条件的行后，按照<code>order by</code>子句指定方式排序</li><li>谓词：可以只显示前几行或只返回指定行</li></ol><h1 id="使用SELECT…WHERE查询数据"><a href="#使用SELECT…WHERE查询数据" class="headerlink" title="使用SELECT…WHERE查询数据"></a>使用SELECT…WHERE查询数据</h1><h2 id="使用通配符-查询所有列"><a href="#使用通配符-查询所有列" class="headerlink" title="使用通配符*查询所有列"></a>使用通配符<code>*</code>查询所有列</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="查询指定的列"><a href="#查询指定的列" class="headerlink" title="查询指定的列"></a>查询指定的列</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="使用as给列或表指定别名"><a href="#使用as给列或表指定别名" class="headerlink" title="使用as给列或表指定别名"></a>使用<code>as</code>给列或表指定别名</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">AS</span> 姓名,AGE <span class="keyword">AS</span> 性别 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">AS</span> 学生表</span><br></pre></td></tr></table></figure><p>其中AS可以直接省略，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> 姓名,AGE 性别 <span class="keyword">FROM</span> dbo.STUDENT 学生表</span><br></pre></td></tr></table></figure><h2 id="where使用"><a href="#where使用" class="headerlink" title="where使用"></a><code>where</code>使用</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'李筱思'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&gt;<span class="number">16</span></span><br></pre></td></tr></table></figure><p><em>注：字符类型和时间类型的数据需要加引号标识</em></p><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找学生姓名以'李'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名以'李'或以'赵'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'[李赵]%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名不以'李'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名不以'李'或以'赵'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'[^李赵]%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名以'李'开头，名字只有一个字符的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'[李]_'</span></span><br></pre></td></tr></table></figure><h1 id="OR-AND逻辑运算"><a href="#OR-AND逻辑运算" class="headerlink" title="OR/AND逻辑运算"></a>OR/AND逻辑运算</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名以'李'开头或年龄是13岁的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span> <span class="keyword">OR</span> AGE=<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名以'李'开头，或年龄是13岁性别为女的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span> <span class="keyword">OR</span> (AGE=<span class="number">13</span> <span class="keyword">AND</span> SEX=<span class="string">'女'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名以'李'开头且性别为女,或年龄13岁且性别为女的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> (<span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span> <span class="keyword">AND</span> SEX=<span class="string">'女'</span>) <span class="keyword">OR</span> (AGE=<span class="number">13</span> <span class="keyword">AND</span> SEX=<span class="string">'女'</span>)</span><br></pre></td></tr></table></figure><h1 id="BETWEEN…AND"><a href="#BETWEEN…AND" class="headerlink" title="BETWEEN…AND"></a>BETWEEN…AND</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄在11到13范围内的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不在11到13范围内的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p><em>注：BETWEEN…AND是包括边界的</em></p><h1 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄为10岁或15岁的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line"><span class="comment">-- 其实这里跟使用OR是一个效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不为10岁或15岁的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">15</span>)</span><br></pre></td></tr></table></figure><h1 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询地址为空的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> ADDRESS <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址不为空的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> ADDRESS <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p><code>ORDER BY ... DESC/ASC</code>：降序排序/升序排序，默认是<code>ASC</code><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有学生，按年龄降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学生，按年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>同时对多个字段排序：若以多个字段排序时，以第一个排序的字段为主，当第一个字段出现相等值时对第二个字段排序</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 同时对学生性别、年龄排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> SEX <span class="keyword">DESC</span>,AGE <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h1 id="排名函数RANK"><a href="#排名函数RANK" class="headerlink" title="排名函数RANK"></a>排名函数RANK</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RANK() OVER(PARTITION BY 表达式 ORDER BY 表达式)</span><br></pre></td></tr></table></figure><p><em>注：针对分区内的每行数据排名，若排序字符按值相等，则排名相同，PARTITION BY子句可选</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照学生年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,<span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) <span class="keyword">AS</span> 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,<span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名，对结果集按照年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> *,<span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h1 id="排名函数ROW-NUMBER"><a href="#排名函数ROW-NUMBER" class="headerlink" title="排名函数ROW_NUMBER"></a>排名函数ROW_NUMBER</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROW_NUMBER() OVER(PARTITION BY 表达式 ORDER BY 表达式)</span><br></pre></td></tr></table></figure><p><em>注：对分区内的每行数据排名，若排序字段值相等，则排名累计，PARTITION BY子句可选</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照学生年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) <span class="keyword">AS</span> 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名，对结果集按照年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> *,ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h1 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h1><p><code>DISTINCT</code>消除重复项</p><p><code>DISTINCT</code>关键字可以从<code>SELECT</code>语句的结果中消除重复的行，如果没有指定<code>DISTINCT</code>，将返回所有行，包括重复的行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ADDRESS <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="判断对象-表-存储过程-视图等-是否存在"><a href="#判断对象-表-存储过程-视图等-是否存在" class="headerlink" title="判断对象(表/存储过程/视图等)是否存在"></a>判断对象(表/存储过程/视图等)是否存在</h1><h2 id="判断表是否存在方式1"><a href="#判断表是否存在方式1" class="headerlink" title="判断表是否存在方式1"></a>判断表是否存在方式1</h2><p>使用<code>SYS.OBJECTS</code>测试，在数据库中创建的每个用户定义的架构作用域内的对象在该表中对应一行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IF EXISTS(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys.objects <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'STUDENT'</span>)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>/PROC dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="判断表是否存在方式2"><a href="#判断表是否存在方式2" class="headerlink" title="判断表是否存在方式2"></a>判断表是否存在方式2</h2><p>使用<code>OBJECT_ID</code>测试，<code>OBJECT_ID(OBJECT_NAME.[OBJECT_TYPE])</code>返回架构范围内数据库对象的唯一标识。</p><p><code>OBJECT_TYPE</code>：U表示用户自定义表，P表示SQL存储过程，V表示视图</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IF(OBJECT_ID('STUDENT','U/P/V') IS NOT NULL)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>/PROC dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="SELECT…INTO"><a href="#SELECT…INTO" class="headerlink" title="SELECT…INTO"></a>SELECT…INTO</h1><p>使用<code>SELECT...INTO</code>创建表并复制表中数据，源表中定义的索引、约束和触发器不会转移到新表中，也不能在<code>SELECT...INTO</code>语句中指定它们</p><p>如果定义表的<code>SELECT</code>语句包含一个联接，而该联接将导致<code>IDENTITY</code>属性不能转移到新表</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并复制表数据</span></span><br><span class="line"><span class="comment">-- 先判断表是否存在，存在则删除，然后再用SELECT...INTO</span></span><br><span class="line">IF(OBJECT_ID('STUDENT_CP','U') IS NOT NULL)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> dbo.STUDENT_CP</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> STUDENT_CP <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="INSERT…SELECT"><a href="#INSERT…SELECT" class="headerlink" title="INSERT…SELECT"></a>INSERT…SELECT</h1><p>使用<code>INSERT...SELECT</code>将数据从一个表插入另一个表</p><p>基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 目标表...INSERT INTO 源表</span><br></pre></td></tr></table></figure><p><em>注：目标表必须存在</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先判断表是否存在，存在则删除，然后再创建一张表，再往表里写源表查询出来的数据</span></span><br><span class="line">IF OBJECT_ID('STUDENT_INSERT','U') IS NOT NULL</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> STUDENT_INSERT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT_INSERT</span><br><span class="line">(</span><br><span class="line">姓名 <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">性别 <span class="built_in">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">年龄 <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT_INSERT <span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="MERGE-INTO"><a href="#MERGE-INTO" class="headerlink" title="MERGE..INTO"></a>MERGE..INTO</h1><p>根据与源表的联接的结果，对目标表执行插入、更新或删除操作。例如：根据在另一个表中找到的差异在一个表中插入、更新或删除行，可以对两个表进行同步</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 合并两张学生表的学生信息，当学生姓名相同时更新目标表的学生信息，当目标表没有该学生时插入学生信息</span></span><br><span class="line"><span class="comment">-- 目标表=STUDENT  源表=STUDENT_INSERT</span></span><br><span class="line"><span class="comment">-- 以下操作描述：</span></span><br><span class="line">    <span class="comment">-- 以STUDENT_INSERT为准，如果STUDENT里的哪条数据跟STUDENT_INSERT里哪条数据的NAME相同，则将STUDENT里这条数据的年龄更新成STUDENT_INSERT里这条数据的年龄</span></span><br><span class="line">    <span class="comment">-- 如果STUDENT_INSERT里有数据的姓名是STUDENT里没有的，则向STUDENT里插入这条数据</span></span><br><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">USING</span> dbo.STUDENT_INSERT</span><br><span class="line"><span class="keyword">ON</span> dbo.STUDENT.NAME=dbo.STUDENT_INSERT.姓名</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> AGE=dbo.STUDENT_INSERT.年龄 <span class="comment">--匹配上则更新年龄</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> <span class="keyword">INSERT</span> (<span class="keyword">NAME</span>,SEX,AGE) <span class="keyword">VALUES</span>(dbo.STUDENT_INSERT.姓名,dbo.STUDENT_INSERT.性别,dbo.STUDENT_INSERT.年龄); <span class="comment">--没匹配上则插入</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#select%e8%af%ad%e5%8f%a5%e8%af%ad%e6%b3%95&quot;&gt;SELECT语句语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9f%a5%e8%af%a2%e6%89%a7%e8%a1%8c%e9%a1%
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习04--临时表的使用</title>
    <link href="http://www.dimsum.fun/2020/05/20/28.TSqlReview04/"/>
    <id>http://www.dimsum.fun/2020/05/20/28.TSqlReview04/</id>
    <published>2020-05-20T04:07:00.000Z</published>
    <updated>2020-05-20T11:09:09.094Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e7%b1%bb%e5%9e%8b">临时表的类型</a><ul><li><a href="#%e6%9c%ac%e5%9c%b0%e4%b8%b4%e6%97%b6%e8%a1%a8">本地临时表</a></li><li><a href="#%e5%85%a8%e5%b1%80%e4%b8%b4%e6%97%b6%e8%a1%a8">全局临时表</a></li></ul></li><li><a href="#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e5%88%9b%e5%bb%ba">临时表的创建</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e6%96%b9%e5%bc%8f1%e4%b8%8d%e5%9f%ba%e4%ba%8e%e5%8e%9f%e5%a7%8b%e8%a1%a8">创建方式1(不基于原始表)</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%96%b9%e5%bc%8f2%e5%9f%ba%e4%ba%8e%e5%8e%9f%e5%a7%8b%e8%a1%a8">创建方式2(基于原始表)</a></li></ul></li><li><a href="#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e5%a2%9e%e5%88%a0%e6%94%b9%e6%9f%a5">临时表的增删改查</a></li></ul><h1 id="临时表的类型"><a href="#临时表的类型" class="headerlink" title="临时表的类型"></a>临时表的类型</h1><h2 id="本地临时表"><a href="#本地临时表" class="headerlink" title="本地临时表"></a>本地临时表</h2><p>本地临时表仅在当前会话中可见，本地临时表的名称前面有一个数字符号(#table_name)，本地临时表在当前会话结束时都会被自动删除</p><h2 id="全局临时表"><a href="#全局临时表" class="headerlink" title="全局临时表"></a>全局临时表</h2><p>全局临时表在所有会话中都可见，全局临时表的名称前面有两个数字符号(##table_name)，全局临时表在创建此表的会话结束且其他所有任务停止对其引用时会被动删除</p><h1 id="临时表的创建"><a href="#临时表的创建" class="headerlink" title="临时表的创建"></a>临时表的创建</h1><h2 id="创建方式1-不基于原始表"><a href="#创建方式1-不基于原始表" class="headerlink" title="创建方式1(不基于原始表)"></a>创建方式1(不基于原始表)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#临时表名/##临时表名</span></span><br><span class="line">(字段 数据类型)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE SCHOOL</span><br><span class="line">GO</span><br><span class="line">CREATE TABLE #t1</span><br><span class="line">(</span><br><span class="line">id INT,</span><br><span class="line">name VARCHAR(20)</span><br><span class="line">)</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="创建方式2-基于原始表"><a href="#创建方式2-基于原始表" class="headerlink" title="创建方式2(基于原始表)"></a>创建方式2(基于原始表)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> <span class="comment">#临时表名/##临时表名 from 原始表</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> <span class="comment">#student FROM dbo.STUDENT</span></span><br></pre></td></tr></table></figure><h1 id="临时表的增删改查"><a href="#临时表的增删改查" class="headerlink" title="临时表的增删改查"></a>临时表的增删改查</h1><p>与普通表的增删改查一致</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e7%b1%bb%e5%9e%8b&quot;&gt;临时表的类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9c%ac%e5%9c%b0%e4%b8%b4%e6%97%b6
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习03--数据操作语言DML</title>
    <link href="http://www.dimsum.fun/2020/05/20/27.TsqlReview03/"/>
    <id>http://www.dimsum.fun/2020/05/20/27.TsqlReview03/</id>
    <published>2020-05-20T03:48:00.000Z</published>
    <updated>2020-05-20T11:09:09.094Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%bb%8e%e8%a1%a8%e6%a3%80%e7%b4%a2%e6%95%b0%e6%8d%ae">从表检索数据</a><ul><li><a href="#%e6%9f%a5%e8%af%a2%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e5%88%97%e6%80%a7%e8%83%bd%e4%bd%8e">查询表中的所有列(性能低)</a></li><li><a href="#%e6%9f%a5%e8%af%a2%e8%a1%a8%e4%b8%ad%e7%9a%84%e5%87%a0%e4%b8%aa%e5%ad%97%e6%ae%b5%e6%80%a7%e8%83%bd%e9%ab%98">查询表中的几个字段(性能高)</a></li></ul></li><li><a href="#%e5%90%91%e8%a1%a8%e4%b8%ad%e6%8f%92%e5%85%a5%e6%95%b0%e6%8d%ae">向表中插入数据</a></li><li><a href="#%e4%bf%ae%e6%94%b9%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae">修改表中的数据</a></li><li><a href="#%e5%88%a0%e9%99%a4%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae">删除表中的数据</a><ul><li><a href="#%e5%88%a0%e9%99%a4%e8%a1%a8%e4%b8%ad%e9%83%a8%e5%88%86%e6%95%b0%e6%8d%ae">删除表中部分数据</a></li><li><a href="#%e5%88%a0%e9%99%a4%e8%a1%a8%e4%b8%ad%e5%85%a8%e9%83%a8%e6%95%b0%e6%8d%ae">删除表中全部数据</a><ul><li><a href="#%e4%bd%bf%e7%94%a8delete">使用<code>delete</code></a></li><li><a href="#%e4%bd%bf%e7%94%a8truncate">使用<code>truncate</code></a></li></ul></li></ul></li></ul><h1 id="从表检索数据"><a href="#从表检索数据" class="headerlink" title="从表检索数据"></a>从表检索数据</h1><h2 id="查询表中的所有列-性能低"><a href="#查询表中的所有列-性能低" class="headerlink" title="查询表中的所有列(性能低)"></a>查询表中的所有列(性能低)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="查询表中的几个字段-性能高"><a href="#查询表中的几个字段-性能高" class="headerlink" title="查询表中的几个字段(性能高)"></a>查询表中的几个字段(性能高)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span> ... 字段<span class="number">3</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="向表中插入数据"><a href="#向表中插入数据" class="headerlink" title="向表中插入数据"></a>向表中插入数据</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名</span><br><span class="line">(字段<span class="number">1</span>,字段<span class="number">2</span>,...,字段N)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(值<span class="number">1</span>,值<span class="number">2</span>,...,值N),</span><br><span class="line">(值<span class="number">1</span>,值<span class="number">2</span>,...,值N)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><em>注：N最大为1024</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> dbo.STUDENT</span><br><span class="line">(<span class="keyword">NAME</span>,SEX,AGE)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'张小三'</span>,<span class="string">'男'</span>,<span class="string">'14'</span>),</span><br><span class="line">(<span class="string">'李小四'</span>,<span class="string">'女'</span>,<span class="string">'12'</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="修改表中的数据"><a href="#修改表中的数据" class="headerlink" title="修改表中的数据"></a>修改表中的数据</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">字段<span class="number">1</span>=<span class="string">'修改后的值'</span>,</span><br><span class="line">字段<span class="number">2</span>=<span class="string">'修改后的值'</span>,</span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line"><span class="keyword">NAME</span>=<span class="string">'李筱思'</span>,</span><br><span class="line">AGE=<span class="string">'16'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="删除表中的数据"><a href="#删除表中的数据" class="headerlink" title="删除表中的数据"></a>删除表中的数据</h1><h2 id="删除表中部分数据"><a href="#删除表中部分数据" class="headerlink" title="删除表中部分数据"></a>删除表中部分数据</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="删除表中全部数据"><a href="#删除表中全部数据" class="headerlink" title="删除表中全部数据"></a>删除表中全部数据</h2><h3 id="使用delete"><a href="#使用delete" class="headerlink" title="使用delete"></a>使用<code>delete</code></h3><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="使用truncate"><a href="#使用truncate" class="headerlink" title="使用truncate"></a>使用<code>truncate</code></h3><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p><em>注：<code>truncate table 表名</code>与<code>delete from 表名</code>效果相同，删除表中的所有记录，但是<code>truncate</code>速度快使用的系统资源和事务日志资源更少</em></p><p><em>删除表中全部数据，但是表的框架还在，即各个字段都还存在，只是表中没有记录而已，要删除整张表，得使用<code>drop table 表名</code></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%8e%e8%a1%a8%e6%a3%80%e7%b4%a2%e6%95%b0%e6%8d%ae&quot;&gt;从表检索数据&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9f%a5%e8%af%a2%e8%a1%a8%e4%b8%ad
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习02--数据表操作</title>
    <link href="http://www.dimsum.fun/2020/05/20/26.TSqlReview02/"/>
    <id>http://www.dimsum.fun/2020/05/20/26.TSqlReview02/</id>
    <published>2020-05-20T02:21:00.000Z</published>
    <updated>2020-05-20T11:09:09.093Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5">数据库相关概念</a></li><li><a href="#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e7%b1%bb%e5%88%ab">数据类型类别</a></li><li><a href="#%e6%a0%87%e8%af%86%e7%ac%a6">标识符</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e7%9a%84%e8%a7%84%e5%88%99">创建表的规则</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e5%88%9b%e5%bb%ba%e8%a1%a8">使用T-SQL创建表</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e4%bf%ae%e6%94%b9%e8%a1%a8%e5%88%97%e5%b1%9e%e6%80%a7">使用T-SQL修改表列属性</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%b7%bb%e5%8a%a0%e5%88%a0%e9%99%a4%e8%a1%a8%e5%88%97">使用T-SQL添加删除表列</a><ul><li><a href="#%e6%b7%bb%e5%8a%a0%e5%88%97">添加列</a></li><li><a href="#%e5%88%a0%e9%99%a4%e5%88%97">删除列</a></li></ul></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e4%bf%ae%e6%94%b9%e8%a1%a8%e5%90%8d">使用T-SQL修改表名</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e5%88%a0%e9%99%a4%e8%a1%a8">使用T-SQL删除表</a></li></ul><h1 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h1><ul><li>数据库就是存放数据的仓库</li><li>数据库由表、关系及操作对象组成</li><li>数据存放在表中</li><li>数据库表由记录组成</li><li>记录由字段组成</li><li>字段由字符或数字等组成</li><li>在创建表时，要考虑数据表的结构问题，也就是涉及确定数据表中各列的数据格式是数值、字符、日期、货币、图像等其他数据格式，这个数据格式就是数据类型</li><li>在SQL Server数据库中，每个列、变量、表达式和参数都有其各自的数据类型。指定对象的数据类型相当于定义了对象的以下特性<ul><li>对象所含的数据类型，如字符、整数或二进制数</li><li>所存储值的长度或它的大小</li><li>小数位数(仅用于数字数据类型)</li></ul></li></ul><h1 id="数据类型类别"><a href="#数据类型类别" class="headerlink" title="数据类型类别"></a>数据类型类别</h1><table><thead><tr><th>描述</th><th>具体类型</th></tr></thead><tbody><tr><td>字符串</td><td>char、varchar、text</td></tr><tr><td>Unicode字符串</td><td>nchar、nvarchar、ntext</td></tr><tr><td>精确数字</td><td>bigint、int、smallint、tinyint、numeric、decimal、money、smallmoney</td></tr><tr><td>日期和时间</td><td>datetime2、datetime、smalldatetime、date、time、datetimeoffset</td></tr><tr><td>近似数字</td><td>float、real</td></tr><tr><td>二进制字符串</td><td>binary、varbinary、image</td></tr><tr><td>其他数据类型</td><td>cursor、timestamp、hierarchyid、uniqueidentifier、xml、sql_variant、table</td></tr></tbody></table><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul><li>标识符可以包含字符、符号及数字，不允许有空格</li><li>标识符应尽量短</li><li>标识符要使用有意义的名字</li><li>使用能够区分对象类型的标识符</li><li>保持对象名和用户名唯一性</li></ul><h1 id="创建表的规则"><a href="#创建表的规则" class="headerlink" title="创建表的规则"></a>创建表的规则</h1><ul><li>表和列的名称必须遵守标识符的规定</li><li>列名在表中必须是唯一的</li><li>必须为每列指定数据类型</li><li>每一行代表一条唯一的记录</li></ul><h1 id="使用T-SQL创建表"><a href="#使用T-SQL创建表" class="headerlink" title="使用T-SQL创建表"></a>使用T-SQL创建表</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line">(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">identity</span>(标识种子,递增量) 是否为空,</span><br><span class="line">    字符<span class="number">2</span> 数据类型 是否为空,</span><br><span class="line">    ...</span><br><span class="line">    字段N 数据类型 是否为空</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><em>注：N最大可等于1024</em><br>在数据库中，常用的一个流水编号通常会使用<code>identity</code>字段来进行设置，这种编号的个好处是一定不会重复，而且一定是唯一的，这对<code>table</code>中的唯一值特性很重要，通常用来做客户编号、订单编号等功能。<code>identity</code>用在数据类型后边，并定义初始值和递增量，因为使用<code>identity</code>的字段由数据库维护，所以在<code>insert into</code>该表时，不需要对该字段插入值<br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">BIGINT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SEX <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">AGE <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL修改表列属性"><a href="#使用T-SQL修改表列属性" class="headerlink" title="使用T-SQL修改表列属性"></a>使用T-SQL修改表列属性</h1><p>当数据库中的表创建完成后，可以根据需要改变表中原先定义的许多选项，以更改表的结构。用户可以增加、删除和修改列，增加、删除和修改约束，更改表名以及改变表的所有者等</p><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">column</span> 字段名 新数据类型 (新长度)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="keyword">NAME</span> <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL添加删除表列"><a href="#使用T-SQL添加删除表列" class="headerlink" title="使用T-SQL添加删除表列"></a>使用T-SQL添加删除表列</h1><h2 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span> 字段名<span class="number">1</span> 数据类型 <span class="literal">null</span><span class="comment">--是否可空，默认是空，若要不为空，可以指定为not null</span></span><br><span class="line"><span class="keyword">add</span> 字段名<span class="number">2</span> ... <span class="comment">--可以同时添加多列</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ADD</span> PHONE <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> 字段名<span class="number">1</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> 字段名<span class="number">2</span></span><br><span class="line">... <span class="comment">--可以同时删除多列</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> PHONE</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL修改表名"><a href="#使用T-SQL修改表名" class="headerlink" title="使用T-SQL修改表名"></a>使用T-SQL修改表名</h1><p>需要使用到系统自带的<code>sp_name</code>存储过程<br>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line">exec sp_rename <span class="string">'旧表名'</span>,<span class="string">'新表名'</span></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line">EXEC sys.sp_rename <span class="string">'STUDENT'</span>,<span class="string">'STUDENT01'</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL删除表"><a href="#使用T-SQL删除表" class="headerlink" title="使用T-SQL删除表"></a>使用T-SQL删除表</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> dbo.STUDENT01</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5&quot;&gt;数据库相关概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e7%b1%
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习01--数据库操作</title>
    <link href="http://www.dimsum.fun/2020/05/20/25.TSqlReview01/"/>
    <id>http://www.dimsum.fun/2020/05/20/25.TSqlReview01/</id>
    <published>2020-05-20T01:32:00.000Z</published>
    <updated>2020-05-20T11:09:09.093Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#t-sql">T-SQL</a><ul><li><a href="#ddl%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80">DDL(数据定义语言)</a></li><li><a href="#dml%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c%e8%af%ad%e8%a8%80">DML(数据操作语言)</a></li><li><a href="#dcl%e6%95%b0%e6%8d%ae%e6%8e%a7%e5%88%b6%e8%af%ad%e8%a8%80">DCL(数据控制语言)</a></li><li><a href="#dql%e6%95%b0%e6%8d%ae%e6%9f%a5%e8%af%a2%e8%af%ad%e8%a8%80">DQL(数据查询语言)</a></li></ul></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93">使用T-SQL创建数据库</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%96%b0%e5%a2%9e%e8%be%85%e5%8a%a9%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6">使用T-SQL新增辅助数据文件</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%96%b0%e5%a2%9e%e6%97%a5%e5%bf%97%e6%96%87%e4%bb%b6">使用T-SQL新增日志文件</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e4%bf%ae%e6%94%b9%e6%95%b0%e6%8d%ae%e5%ba%93%e6%96%87%e4%bb%b6%e5%b1%9e%e6%80%a7">使用T-SQL修改数据库文件属性</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%93%8d%e4%bd%9c%e6%96%87%e4%bb%b6%e7%bb%84">使用T-SQL操作文件组</a><ul><li><a href="#%e6%b7%bb%e5%8a%a0%e6%96%87%e4%bb%b6%e7%bb%84">添加文件组</a></li><li><a href="#%e6%b7%bb%e5%8a%a0%e6%96%87%e4%bb%b6%e6%8a%8a%e5%ae%83%e6%94%be%e8%bf%9b%e6%96%87%e4%bb%b6%e7%bb%84">添加文件把它放进文件组</a></li><li><a href="#%e8%ae%be%e7%bd%ae%e9%bb%98%e8%ae%a4%e6%96%87%e4%bb%b6%e7%bb%84">设置默认文件组</a></li></ul></li><li><a href="#%e4%bf%ae%e6%94%b9%e6%95%b0%e6%8d%ae%e5%ba%93%e5%90%8d%e7%a7%b0%e5%88%a0%e9%99%a4%e6%95%b0%e6%8d%ae%e5%ba%93">修改数据库名称/删除数据库</a><ul><li><a href="#%e4%bf%ae%e6%94%b9%e6%95%b0%e6%8d%ae%e5%ba%93%e5%90%8d%e7%a7%b0">修改数据库名称</a></li><li><a href="#%e5%88%a0%e9%99%a4%e6%95%b0%e6%8d%ae%e5%ba%93">删除数据库</a></li></ul></li></ul><h1 id="T-SQL"><a href="#T-SQL" class="headerlink" title="T-SQL"></a>T-SQL</h1><h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h2><p>主要针对数据库对象，数据库对象包括表、视图、存储过程、索引等</p><ul><li><code>create</code>(创建)</li><li><code>alter</code>(修改)</li><li><code>drop</code>(删除)<h2 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML(数据操作语言)"></a>DML(数据操作语言)</h2>主要针对对象的内容，对象的内容包括表或视图的记录(数据)</li><li><code>insert</code>(插入)</li><li><code>update</code>(更新)</li><li><code>delete</code>(删除)<h2 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL(数据控制语言)"></a>DCL(数据控制语言)</h2>主要针对用户权限的控制，如数据库的权限和服务器的权限等</li><li><code>revoke</code>(撤销)</li><li><code>deny</code>(拒绝)</li><li><code>grant</code>(同意、授权)<h2 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h2>就是针对数据查询的</li><li><code>select</code>(查询)</li></ul><h1 id="使用T-SQL创建数据库"><a href="#使用T-SQL创建数据库" class="headerlink" title="使用T-SQL创建数据库"></a>使用T-SQL创建数据库</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">on</span> primary</span><br><span class="line">(</span><br><span class="line">    <span class="comment">--数据文件</span></span><br><span class="line">    <span class="keyword">name</span>=<span class="string">'逻辑名'</span>,</span><br><span class="line">    filename=<span class="string">'文件的存放路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=数据文件的初始大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=数据文件的最大大小,</span><br><span class="line">    filegrowth=文件的增长方式</span><br><span class="line">)</span><br><span class="line"><span class="keyword">log</span> <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">    <span class="comment">--日志文件</span></span><br><span class="line">    <span class="keyword">name</span>=逻辑名</span><br><span class="line">    filename=<span class="string">'文件的存放路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=日志文件的初始大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=日志文件的最大大小,</span><br><span class="line">    filegrowth=日志文件的增长方式</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ON</span> PRIMARY</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL.MDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">10</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">100</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">2</span>MB</span><br><span class="line">)</span><br><span class="line"><span class="keyword">LOG</span> <span class="keyword">ON</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL_LOG'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL_LOG.LDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="keyword">UNLIMITED</span>, <span class="comment">--大小不受限制</span></span><br><span class="line">    FILEGROWTH=<span class="number">10</span>%</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL新增辅助数据文件"><a href="#使用T-SQL新增辅助数据文件" class="headerlink" title="使用T-SQL新增辅助数据文件"></a>使用T-SQL新增辅助数据文件</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span>=<span class="string">'逻辑名'</span>,</span><br><span class="line">    filename=<span class="string">'文件存放的路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=初始大小</span><br><span class="line">    <span class="keyword">maxsize</span>=最大大小,</span><br><span class="line">    filegrowth=增长方式</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL01'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL01.NDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">100</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">3</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL新增日志文件"><a href="#使用T-SQL新增日志文件" class="headerlink" title="使用T-SQL新增日志文件"></a>使用T-SQL新增日志文件</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">log</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span>=逻辑名</span><br><span class="line">    filename=<span class="string">'文件的存放路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=日志文件的初始大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=日志文件的最大大小,</span><br><span class="line">    filegrowth=日志文件的增长方式</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">LOG</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL_LOG01'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL_LOG01.LDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">80</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">1</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL修改数据库文件属性"><a href="#使用T-SQL修改数据库文件属性" class="headerlink" title="使用T-SQL修改数据库文件属性"></a>使用T-SQL修改数据库文件属性</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span>=<span class="string">'逻辑名'</span>,</span><br><span class="line">    <span class="keyword">size</span>=修改后的大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=修改后的大小，</span><br><span class="line">    filegrowth=修改后的大小</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">NAME</span>=<span class="string">'SCHOOL_LOG01'</span>,</span><br><span class="line"><span class="keyword">SIZE</span>=<span class="number">18</span>MB,</span><br><span class="line"><span class="keyword">MAXSIZE</span>=<span class="number">88</span>MB,</span><br><span class="line">FILEGROWTH=<span class="number">8</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL操作文件组"><a href="#使用T-SQL操作文件组" class="headerlink" title="使用T-SQL操作文件组"></a>使用T-SQL操作文件组</h1><h2 id="添加文件组"><a href="#添加文件组" class="headerlink" title="添加文件组"></a>添加文件组</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> filegroup 文件组名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> FILEGROUP FILEGROUP01</span><br></pre></td></tr></table></figure><h2 id="添加文件把它放进文件组"><a href="#添加文件把它放进文件组" class="headerlink" title="添加文件把它放进文件组"></a>添加文件把它放进文件组</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">file</span></span><br><span class="line">(...)</span><br><span class="line"><span class="keyword">to</span> filegroup 文件组名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL02'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL02.NDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">50</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">1</span>MB</span><br><span class="line">)</span><br><span class="line"><span class="keyword">TO</span> FILEGROUP FILEGROUP01</span><br></pre></td></tr></table></figure><h2 id="设置默认文件组"><a href="#设置默认文件组" class="headerlink" title="设置默认文件组"></a>设置默认文件组</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">modify</span> filegroup 文件组名 <span class="keyword">default</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">MODIFY</span> FILEGROUP FILEGROUP01 <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure><h1 id="修改数据库名称-删除数据库"><a href="#修改数据库名称-删除数据库" class="headerlink" title="修改数据库名称/删除数据库"></a>修改数据库名称/删除数据库</h1><h2 id="修改数据库名称"><a href="#修改数据库名称" class="headerlink" title="修改数据库名称"></a>修改数据库名称</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 原数据库名称</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">name</span>=新数据库名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">NAME</span>=SCHOOL_NEW</span><br></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p><strong>不能删除系统数据库</strong><br>具体语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> SCHOOL_NEW</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#t-sql&quot;&gt;T-SQL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ddl%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80&quot;&gt;DDL(数据定义语言)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>面试备忘</title>
    <link href="http://www.dimsum.fun/2020/05/14/24.InterviewBackup/"/>
    <id>http://www.dimsum.fun/2020/05/14/24.InterviewBackup/</id>
    <published>2020-05-14T09:51:00.000Z</published>
    <updated>2020-05-18T15:04:48.124Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#aspnet-core">ASP.NET Core</a></li><li><a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3">数据库相关</a></li><li><a href="#%e5%85%b6%e4%bb%96">其他</a></li></ul><p>一些面试题的备忘</p><h1 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h1><ol><li><p>服务的注册方式和获取方式</p><p><strong>解答</strong></p><ol><li>使用框架自带的<code>IoC</code>框架是通过<code>Startup</code>的<code>ConfigureService</code>方法里的<code>IServiceCollerction</code>进行注册</li><li>一般通过接口与实现类的方式实现，也可以通过工厂的方式进行注册服务，不推荐直接<code>new</code>服务进行注册，这样<code>IoC</code>框架是不会进行该服务的生命周期管理</li><li>获取方式一般可以通过构造函数、参数的<code>[FromService]</code>、通过<code>BuilderServiceProvider</code>获取<code>serviceProvider</code>对象，在<code>serviceProvider</code>里获取服务</li></ol></li><li><p><code>autofac</code>和自带的<code>IoC</code>框架的区别</p><p><strong>解答</strong></p><ol><li>Autofac新增基于名称的注入、属性注入、AOP</li><li>注册服务的地方是在<code>Startup</code>里新增的<code>ConfigureContainer</code>方法里</li></ol></li><li><p><code>WebAPI</code>的<code>CQRS</code>策略</p></li><li><p><code>JWT</code>的组成和加密方式</p><p><strong>解答</strong></p><ol><li>加密方式.经过base64转码的消息主体.签名</li><li>使用HS256的签名加密方式</li></ol></li><li><p><code>ViewData</code>、<code>ViewBag</code>、<code>TempData</code>的区别</p><p><strong>解答：</strong></p><ol><li><code>ViewBag</code>是在<code>ViewData</code>上面加一层<code>dynamic</code>，如果用同个<code>key</code>，比如<code>ViewBag.Info=&quot;ABC&quot;</code>，在页面其实也可以通过<code>ViewData[&quot;Info&quot;]</code>来获取，同时也以为着<code>ViewBag=&quot;ABC&quot;;ViewData[&quot;info&quot;]=&quot;123&quot;</code>，后面会覆盖前面的；</li><li><code>TempData</code>是存放在<code>session</code>里面，意味着可以跨<code>action</code>来取值，比如<code>ActionA</code>中赋值了<code>TempData[&quot;Info&quot;]=&quot;ABC&quot;</code>，在<code>ActionA</code>对应的<code>ViewA</code>中点击跳转到<code>ActionB</code>，则可以直接在<code>ActionB</code>中通过<code>TempData[&quot;Info&quot;]</code>来取得<code>&quot;ABC&quot;</code></li><li>但是要注意，<code>TempData</code>在被取值之后就会被删除，所以上面的场景如果在<code>ActionA</code>对应的<code>ViewA</code>中把<code>TempData[&quot;Info&quot;]</code>取出来，则在<code>ActionB</code>中就获取不到<code>TempData[&quot;Info&quot;]</code>的值，获取到的是个<code>null</code></li></ol></li><li><p><code>API</code>的版本管理</p><p><strong>解答</strong></p><ol><li>使用URL带版本的方式，在<code>Controller</code>里使用<code>[Route(&#39;&#39;)]</code>来指定版本</li></ol></li><li><p>使用中间件Use/Run/Map的区别</p><p><strong>解答</strong></p><ol><li>通常使用的<code>Use</code></li><li><code>Run</code>起到的是断路器的作用，即不再执行后面的中间件</li><li><code>Map</code>一般是针对特殊的路径使用特殊的中间件管道</li></ol></li><li><p>中间件里面怎么获取服务</p><p><strong>解答</strong></p><ol><li>使用中间件的<code>Invoke</code>方法中的<code>HttpContext</code>对象<code>context.RequestServices.GetService&lt;T&gt;()</code>来获取</li></ol></li><li><p><code>EFCore</code>的<code>TPH</code></p></li><li><p><code>EFCore</code>的<code>lazyload</code></p></li></ol><h1 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h1><ol><li><p><code>delete</code>、<code>truncate</code>的区别</p><p><strong>解答：</strong></p><ol><li><code>delete</code>可以带<code>where</code>，<code>truncate</code>不能带<code>where</code></li><li><code>delete</code>慢，<code>truncate</code>快</li><li><code>delete</code>每删一条数据都会在数据库日志里记录这条记录，<code>truncate</code>只会记录整表做了清除记录，这意味这<code>delete</code>可以被回滚，<code>truncate</code>是不能回滚的</li><li><code>delete</code>会触发<code>delete</code>触发器，<code>truncate</code>是不会触发任何触发器的</li></ol></li></ol><ol start="2"><li><code>view</code>、<code>table</code>的区别</li><li><code>go</code>做了什么，<code>go</code>上面定义的变量<code>go</code>下面能获得到吗？</li><li>定义事务的标准</li><li>连续自增的主键删除掉一个断开了，怎么补回这个断掉的逐渐</li><li><code>select * into A from B</code>、<code>insert into A select * from B</code>的区别</li><li><pre><code class="sql"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#tmp_A(id int)</span><span class="keyword">go</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="comment">#tmp_A values(1)</span><span class="comment">--select * from #tmp_A</span><span class="keyword">if</span> @@<span class="keyword">error</span>&lt;&gt;<span class="number">0</span> print @@<span class="keyword">error</span><span class="keyword">else</span> print @@rowcount</code></pre>上面的执行结果是什么</li><li>存储过程中<code>@</code>、<code>#</code>、<code>##</code>、<code>CTE</code>的区别</li><li>聚集索引与非聚集所以区别</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li><p><code>.xsd</code>、<code>XML</code>的<code>schemas</code></p></li><li><p><code>json</code>是什么</p></li><li><p><code>rabbitmq</code>中的<code>topic</code>、<code>queue</code>是什么，消息持久化是在哪个位置</p></li><li><p>说一下<code>pub/sub</code>，订阅的时候能获得订阅之前的消息吗？</p></li><li><p><code>Queue</code>、<code>ConQueue</code>的区别</p></li><li><p>从数据结构说一下<code>stack</code>、<code>queue</code>的区别</p></li><li><p>编译的时候<code>Debug模式</code>和<code>Release模式</code>的区别</p><p><strong>解答：</strong></p><ol><li>在<code>Debug</code>模式可以使用<code>#IF DEBUG</code>来跑一些调试模式下的特殊代码，在打包成<code>Release</code>的<code>DLL</code>的时候，<code>#IF DEBUG</code>的代码会被忽略</li></ol></li><li><p>编译时选择<code>Any CPU</code>、<code>x86</code>、<code>x64</code>的区别</p></li><li><p><code>DDD</code>是怎么分层的</p></li><li><p>说一下 聚合根、实体、值对象</p></li><li><p><code>DDD</code>的仓储曾是怎么实现的</p></li><li><p><code>async/await</code>会不会堵塞主线程，如果会，那为什么还要用？</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#aspnet-core&quot;&gt;ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3&quot;&gt;数据库相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="面试" scheme="http://www.dimsum.fun/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://www.dimsum.fun/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>C#一些基础语法理解</title>
    <link href="http://www.dimsum.fun/2020/04/23/23.CSharpBase/"/>
    <id>http://www.dimsum.fun/2020/04/23/23.CSharpBase/</id>
    <published>2020-04-23T09:51:00.000Z</published>
    <updated>2020-04-23T11:10:29.799Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#abstract"><code>abstract</code></a></li><li><a href="#virtual"><code>virtual</code></a></li></ul><p><strong>只是一些日常开发理解备忘，肯定有漏洞！别当真！！！</strong></p><h1 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a><code>abstract</code></h1><p>抽象类，定义方式为</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">MyAbstractClass</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要由以下几个特点：</p><ol><li>不能直接被实例化</li><li>可以<strong>包含或不包含</strong>普通方法</li><li>可以<strong>包含或不包含</strong>抽象方法，抽象方法不能有方法体，即只能定义不能实现，使用<code>abstract</code>关键字，类似：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">MyMethod</span>(<span class="params"></span>)</span>;</span><br></pre></td></tr></table></figure></li><li>要使用抽象类，需要有另一个普通类来继承这个抽象类，这个普通类要<code>override</code>抽象类里的抽象方法，然后使用方实例化这个普通类即可</li></ol><p><strong>说点人话：我是大爷(<code>抽象类</code>)，大爷会开车(<code>抽象方法</code>)、会打人(<code>普通方法</code>)，但是驾照被吊销了；你跟了我(<code>继承</code>)，你就得会开车，开车的事你来做(<code>override</code>)，但是打人我能干，别人叫你打人的时候我来干</strong></p><p>正经点，说个使用场景：</p><p>有个类，有一些方法是需要继承它的类自己单独实现，但是又有一些方法是通用的，这个类就可以定义为抽象类，需要子类去实现的方法定义为抽象方法，通用的方法则定义为普通方法</p><h1 id="virtual"><a href="#virtual" class="headerlink" title="virtual"></a><code>virtual</code></h1><p>这个关键字是给方法用的，使用方式为</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">string</span> <span class="title">Hello</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Hello From Temp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义<code>virtual</code>方法是标识这个方法可以被子类<code>override</code>，在调用的时候，如果子类<code>override</code>了这个方法，则会调用子类的方法，如果子类没有<code>override</code>这个方法，则会调用父类的<code>virtual</code>方法</p><p><strong>说点人话：你继承你爹我(<code>继承</code>)，你会的你干(<code>override</code>)，你不会的你爹来干(<code>没有override</code>)！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#abstract&quot;&gt;&lt;code&gt;abstract&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#virtual&quot;&gt;&lt;code&gt;virtual&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;只是一些日常开发理解
      
    
    </summary>
    
    
      <category term="C#基础备忘" scheme="http://www.dimsum.fun/categories/C-%E5%9F%BA%E7%A1%80%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="C#" scheme="http://www.dimsum.fun/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>gRPC in ASP.NET Core</title>
    <link href="http://www.dimsum.fun/2020/04/20/22.gRPC_document/"/>
    <id>http://www.dimsum.fun/2020/04/20/22.gRPC_document/</id>
    <published>2020-04-20T10:30:00.000Z</published>
    <updated>2020-04-23T11:06:11.997Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83">开发环境</a><ul><li><a href="#vscode">VSCode</a></li></ul></li><li><a href="#%e6%b6%88%e6%81%af%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%bc%94%e8%bf%9b">消息类型的演进</a><ul><li><a href="#%e6%9b%b4%e6%96%b0%e6%b6%88%e6%81%af%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%a7%84%e5%88%99">更新消息类型的规则</a></li><li><a href="#%e9%bb%98%e8%ae%a4%e5%80%bc">默认值</a></li><li><a href="#%e6%9e%9a%e4%b8%be">枚举</a></li></ul></li><li><a href="#%e5%9c%a8net-core%e4%b8%ad%e4%bd%bf%e7%94%a8grpc">在<code>.NET Core</code>中使用<code>gRPC</code></a><ul><li><a href="#aspnet-core"><code>ASP.NET Core</code></a></li><li><a href="#net-core"><code>.NET Core</code></a></li><li><a href="#%e5%bc%95%e5%8c%85%e4%b9%8b%e5%90%8e%e7%9a%84%e6%93%8d%e4%bd%9c">引包之后的操作</a></li><li><a href="#%e4%bd%9c%e4%b8%ba%e6%9c%8d%e5%8a%a1%e7%ab%af">作为服务端</a></li><li><a href="#%e4%bd%9c%e4%b8%ba%e5%ae%a2%e6%88%b7%e7%ab%af">作为客户端</a></li></ul></li><li><a href="#%e4%b8%8a%e4%bb%a3%e7%a0%81">上代码</a><ul><li><a href="#%e6%9c%8d%e5%8a%a1%e7%ab%af">服务端</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e7%9b%ae%e5%bd%95">创建目录</a></li><li><a href="#%e7%bc%96%e5%86%99proto">编写<code>proto</code></a></li><li><a href="#%e7%bc%96%e5%86%99%e6%b5%8b%e8%af%95%e6%95%b0%e6%8d%ae">编写测试数据</a></li><li><a href="#%e7%bc%96%e5%86%99service">编写<code>Service</code></a></li><li><a href="#%e4%bf%ae%e6%94%b9startup">修改<code>Startup</code></a></li><li><a href="#%e8%bf%90%e8%a1%8c%e9%a1%b9%e7%9b%ae">运行项目</a></li></ul></li><li><a href="#%e5%ae%a2%e6%88%b7%e7%ab%af">客户端</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%a4%8d%e5%88%b6proto%e6%96%87%e4%bb%b6">复制<code>proto</code>文件</a></li><li><a href="#%e4%bf%ae%e6%94%b9programcs">修改<code>Program.cs</code></a></li><li><a href="#%e8%bf%90%e8%a1%8c%e9%a1%b9%e7%9b%ae-1">运行项目</a></li></ul></li></ul></li><li><a href="#%e6%97%a5%e5%bf%97%e5%92%8c%e5%bc%82%e5%b8%b8">日志和异常</a><ul><li><a href="#%e6%97%a5%e5%bf%97">日志</a><ul><li><a href="#aspnet-core-1">ASP.NET Core</a></li><li><a href="#net-core%e6%8e%a7%e5%88%b6%e5%8f%b0">.NET Core控制台</a></li></ul></li><li><a href="#%e5%bc%82%e5%b8%b8">异常</a></li></ul></li><li><a href="#%e5%85%b3%e4%ba%8ejwt%e6%8e%88%e6%9d%83">关于JWT授权</a></li><li><a href="#%e5%a4%9a%e9%a1%b9%e7%9b%ae%e4%b9%8b%e9%97%b4%e5%85%b1%e4%ba%abproto%e6%96%87%e4%bb%b6">多项目之间共享<code>proto</code>文件</a></li></ul><h1 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h1><h2 id="VSCode"><a href="#VSCode" class="headerlink" title="VSCode"></a>VSCode</h2><p>window下需要安装<code>Clang</code>，百度找<code>Clang</code>，去官网自行下载，如果下载速度慢，可以添加以下内容到<code>C:\Windows\System32\drivers\etc\host</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">54.231.82.146 vagrantcloud-files-production.s3.amazonaws.com</span><br><span class="line">219.76.4.4 s3.amazonaws.com</span><br><span class="line">219.76.4.4 github-cloud.s3.amazonaws.com</span><br></pre></td></tr></table></figure><p>然后再<code>VSCode</code>中安装两个插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vscode-proto3</span><br><span class="line">Clang-Format</span><br></pre></td></tr></table></figure><h1 id="消息类型的演进"><a href="#消息类型的演进" class="headerlink" title="消息类型的演进"></a>消息类型的演进</h1><ul><li>向前兼容变更：使用新的<code>.proto</code>文件来写数据 – 从旧的<code>.proto</code>文件读取数据</li><li>向后兼容变更：使用旧的<code>.proto</code>文件来写数据 – 从新的<code>.proto</code>文件读取数据<h2 id="更新消息类型的规则"><a href="#更新消息类型的规则" class="headerlink" title="更新消息类型的规则"></a>更新消息类型的规则</h2></li><li>不要修改任何现有字段的数字(tag)</li><li>可以添加新的字段，旧的代码会忽略掉新字段的解析，所以要注意新字段的默认值</li><li>字段可以被删除，只要它们的数字<code>(tag)</code>在更新后的消息类型中不再使用即可，也可以把字段名使用<code>OBSOLETE_</code>前缀而不是删除字段，或者把这些字段的数字<code>(tag)</code>进行保留<code>(reserved)</code>，以免未来其他开发者不小心使用这些字段</li><li>尽量不要修改原有的字符数据类型<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2>默认值在更新<code>Protocol Buffer</code>消息定义的时候有很重要的作用，它可以防止对现有代码/新代码造成破坏性影响。它们也可以保证字段永远不会有<code>null</code>值</li></ul><p>但是，默认值还是非常危险的：<strong>你无法区分这个默认值到底是来自一个丢失的字段还是字段的实际值正好等于默认值</strong></p><p>所以，需要保证这个默认值对于业务来说是一个毫无意义的值，例如<code>int32 pop</code>人口这个字段的默认值可以设置为<code>-1</code>，再就是可能需要再代码里对默认值进行判断处理</p><h2 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h2><p><code>enum</code>同样可以进化，就和消息的字段一样，可以添加、删除值，也可以保留值</p><p>但是如果代码不知道它接收到的值对应哪个<code>enum</code>值，那么<code>enum</code>的默认值将会被采用</p><h1 id="在-NET-Core中使用gRPC"><a href="#在-NET-Core中使用gRPC" class="headerlink" title="在.NET Core中使用gRPC"></a>在<code>.NET Core</code>中使用<code>gRPC</code></h1><h2 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a><code>ASP.NET Core</code></h2><p>依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grpc.AspNetCore</span><br></pre></td></tr></table></figure><h2 id="NET-Core"><a href="#NET-Core" class="headerlink" title=".NET Core"></a><code>.NET Core</code></h2><p>依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Google.Protobuf</span><br><span class="line">Grpc.Net.Client</span><br><span class="line">Grpc.Tools</span><br></pre></td></tr></table></figure><h2 id="引包之后的操作"><a href="#引包之后的操作" class="headerlink" title="引包之后的操作"></a>引包之后的操作</h2><p>按照项目类型引入上面的包之后，直接编译是不会得到<code>gRPC</code>框架生成的代码，需要做以下操作：<br>右键.proto文件 -&gt; 属性 -&gt; 将<code>Build Action</code>选择为<code>Protobuf compiler</code> -&gt; <code>gRPC Stub Classes</code>按照需求选择<code>Client and Server/Client only/Server only/Do not generate</code></p><p>进行完上面的操作之后，编译项目会在<code>obj\Debug\netcoreapp3.1</code>目录里自动生成<code>RPC</code>代码</p><h2 id="作为服务端"><a href="#作为服务端" class="headerlink" title="作为服务端"></a>作为服务端</h2><p>怎么实现<code>rpc</code>定义的方法：假设在<code>.proto</code>文件里有<code>EmployeeService</code>这样一个<code>service</code>，在编译项目之后，会有一个<code>EmployeeService.EmployeeServiceBase</code>的类，自己编写一个类继承自<code>EmployeeService.EmployeeServiceBase</code>这个类，然后<code>override</code>去重载<code>.proto</code>服务里定义的那些<code>rpc</code>方法即可</p><h2 id="作为客户端"><a href="#作为客户端" class="headerlink" title="作为客户端"></a>作为客户端</h2><p>怎么调用<code>rpc</code>定义的方法：需要先创建<code>Channel</code>，例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">"https://localhost:5001"</span>);</span><br></pre></td></tr></table></figure><p>然后假设在<code>.proto</code>文件里有<code>EmployeeService</code>这样一个<code>service</code>，在编译项目之后(需要选择client或client and server)，会有一个<code>EmployeeService.EmployeeServiceClient</code>的类，实例化这个类就相当实例化一个<code>client</code>，例如：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> client = <span class="keyword">new</span> EmployeeService.EmployeeServiceClient(channel);</span><br></pre></td></tr></table></figure><p>在<code>client</code>里就可以调用<code>.proto</code>服务里定义的那些方法</p><h1 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h1><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>创建名字为<code>RoutingDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>空</code>，通过<code>nuget</code>引入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grpc.AspNetCore</span><br></pre></td></tr></table></figure><h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><p>在项目根目录创建以下三个文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Data</span><br><span class="line">Protos</span><br><span class="line">Services</span><br></pre></td></tr></table></figure><h3 id="编写proto"><a href="#编写proto" class="headerlink" title="编写proto"></a>编写<code>proto</code></h3><p>在<code>Protos</code>文件夹中添加文件<code>Order.proto</code>，具体内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">syntax &#x3D; &quot;proto3&quot;;</span><br><span class="line"></span><br><span class="line">option csharp_namespace &#x3D; &quot;GrpcDemo.Protos&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message Order&#123;</span><br><span class="line">int32 Id &#x3D; 1;</span><br><span class="line">string OrderNo &#x3D; 2;</span><br><span class="line">int32 Status &#x3D; 3;</span><br><span class="line">float Payment &#x3D; 4;</span><br><span class="line">repeated OrderProduct Products &#x3D; 5;</span><br><span class="line">OrderAddress Address &#x3D; 6;</span><br><span class="line">int32 OrderOwner &#x3D; 7;</span><br><span class="line"></span><br><span class="line">message OrderProduct&#123;</span><br><span class="line">string ProductTitle &#x3D; 1;</span><br><span class="line">string SkuTitle &#x3D; 2;</span><br><span class="line">int32 Num &#x3D; 3;</span><br><span class="line">float UnitPrice &#x3D; 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message OrderAddress&#123;</span><br><span class="line">string Province &#x3D; 1;</span><br><span class="line">string City &#x3D; 2;</span><br><span class="line">string Districe &#x3D; 3;</span><br><span class="line">string Detail &#x3D; 4;</span><br><span class="line">string Name &#x3D; 5;</span><br><span class="line">string Mobile &#x3D; 6;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetByOrderNoRequest&#123;</span><br><span class="line">string OrderNo &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message GetByOwnerRequest&#123;</span><br><span class="line">int32 OrderOwner &#x3D; 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message BatchAddOrderNoReturnResponse&#123;</span><br><span class="line">bool IsAllSuccess &#x3D; 1;</span><br><span class="line">repeated string FailOrderNo &#x3D; 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">service OrderService&#123;</span><br><span class="line">rpc GetByOrderNo(GetByOrderNoRequest) returns(Order);</span><br><span class="line">rpc GetByOwner(GetByOwnerRequest) returns(stream Order);</span><br><span class="line">rpc AddOrder(Order) returns(Order);</span><br><span class="line">rpc BatchAddOrder(stream Order) returns(stream Order);</span><br><span class="line">rpc BatchAddOrderNoReturn(stream Order) returns(BatchAddOrderNoReturnResponse);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>解决方案资源管理器</code>找到<code>Order.proto</code>文件，右键 -&gt; 属性 -&gt; <code>Build Action</code>选择<code>Protobuf compiler</code> -&gt; <code>gRPC Stub Classes</code>选择<code>Server only</code></p><p>编译一次项目</p><h3 id="编写测试数据"><a href="#编写测试数据" class="headerlink" title="编写测试数据"></a>编写测试数据</h3><p>在<code>Data</code>文件夹创建<code>InMemoryData.cs</code>文件，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> GrpcDemo.Protos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcServerDemo.Data</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InMemoryData</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Order&gt; Orders = <span class="keyword">new</span> List&lt;Order&gt;()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Order()</span><br><span class="line">            &#123;</span><br><span class="line">                Id = <span class="number">1</span>,</span><br><span class="line">                OrderNo = <span class="string">"2020042201"</span>,</span><br><span class="line">                Status = <span class="number">1</span>,</span><br><span class="line">                Payment = <span class="number">43141.98f</span>,</span><br><span class="line">                Products =</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                    &#123;</span><br><span class="line">                        ProductTitle = <span class="string">"Apple iPhone11"</span>,</span><br><span class="line">                        SkuTitle = <span class="string">"256GB 黑色"</span>,</span><br><span class="line">                        Num = <span class="number">2</span>,</span><br><span class="line">                        UnitPrice = <span class="number">9999.99f</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                    &#123;</span><br><span class="line">                        ProductTitle = <span class="string">"Apple MacBook Pro"</span>,</span><br><span class="line">                        SkuTitle = <span class="string">"i7 512GB 灰色"</span>,</span><br><span class="line">                        Num = <span class="number">1</span>,</span><br><span class="line">                        UnitPrice = <span class="number">23142</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                Address = <span class="keyword">new</span> Order.Types.OrderAddress()</span><br><span class="line">                &#123;</span><br><span class="line">                    Province = <span class="string">"广东省"</span>,</span><br><span class="line">                    City = <span class="string">"深圳市"</span>,</span><br><span class="line">                    Districe = <span class="string">"南山区"</span>,</span><br><span class="line">                    Detail = <span class="string">"Nanshan Road 1234"</span>,</span><br><span class="line">                    Name = <span class="string">"Jiamiao.x"</span>,</span><br><span class="line">                    Mobile = <span class="string">"13500000000"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                OrderOwner = <span class="number">100</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">new</span> Order()</span><br><span class="line">            &#123;</span><br><span class="line">                Id = <span class="number">2</span>,</span><br><span class="line">                OrderNo = <span class="string">"2020042202"</span>,</span><br><span class="line">                Status = <span class="number">2</span>,</span><br><span class="line">                Payment = <span class="number">56.00f</span>,</span><br><span class="line">                Products =</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                    &#123;</span><br><span class="line">                        ProductTitle = <span class="string">"ASP.NET Core微服务实战"</span>,</span><br><span class="line">                        SkuTitle = <span class="string">"1本"</span>,</span><br><span class="line">                        Num = <span class="number">1</span>,</span><br><span class="line">                        UnitPrice = <span class="number">56.00f</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                Address = <span class="keyword">new</span> Order.Types.OrderAddress()</span><br><span class="line">                &#123;</span><br><span class="line">                    Province = <span class="string">"广东省"</span>,</span><br><span class="line">                    City = <span class="string">"深圳市"</span>,</span><br><span class="line">                    Districe = <span class="string">"南山区"</span>,</span><br><span class="line">                    Detail = <span class="string">"Nanshan Road 1234"</span>,</span><br><span class="line">                    Name = <span class="string">"Jiamiao.x"</span>,</span><br><span class="line">                    Mobile = <span class="string">"13500000000"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                OrderOwner = <span class="number">100</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：这里的<code>Order</code>是<code>gRPC</code>生成的，命名空间为<code>GrpcDemo.Protos</code></strong></p><h3 id="编写Service"><a href="#编写Service" class="headerlink" title="编写Service"></a>编写<code>Service</code></h3><p>在<code>Services</code>文件夹创建<code>DemoOrderService.cs</code>文件，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"><span class="keyword">using</span> GrpcDemo.Protos;</span><br><span class="line"><span class="keyword">using</span> GrpcServerDemo.Data;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcServerDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    public class DemoOrderService : OrderService.OrderServiceBase</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;DemoOrderService&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DemoOrderService</span>(<span class="params">ILogger&lt;DemoOrderService&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;Order&gt; <span class="title">GetByOrderNo</span>(<span class="params">GetByOrderNoRequest request, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">"有人请求接口 -&gt; GetByOrderNo"</span>);</span><br><span class="line">            <span class="keyword">var</span> metaData = context.RequestHeaders;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> metaData)</span><br><span class="line">            &#123;</span><br><span class="line">                _logger.LogInformation(<span class="string">$"<span class="subst">&#123;item.Key&#125;</span>: <span class="subst">&#123;item.Value&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;</span><br><span class="line">            <span class="keyword">var</span> dbValue = InMemoryData.Orders.FirstOrDefault(x =&gt; x.OrderNo == request.OrderNo);</span><br><span class="line">            <span class="keyword">if</span> (dbValue != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> dbValue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> Exception(<span class="string">"订单号错误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">GetByOwner</span>(<span class="params">GetByOwnerRequest request, IServerStreamWriter&lt;Order&gt; responseStream, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">"有人请求接口 -&gt; GetByOwner"</span>);</span><br><span class="line">            <span class="keyword">var</span> dbValue = InMemoryData.Orders.Where(x =&gt; x.OrderOwner == request.OrderOwner);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> dbValue)</span><br><span class="line">            &#123;</span><br><span class="line">                Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">                _logger.LogInformation(<span class="string">$"发送数据：<span class="subst">&#123;item&#125;</span>"</span>);</span><br><span class="line">                <span class="keyword">await</span> responseStream.WriteAsync(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task&lt;Order&gt; <span class="title">AddOrder</span>(<span class="params">Order request, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">"有人请求接口 -&gt; AddOrder"</span>);</span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;</span><br><span class="line">            request.Id = InMemoryData.Orders.Max(x =&gt; x.Id) + <span class="number">1</span>;</span><br><span class="line">            InMemoryData.Orders.Add(request);</span><br><span class="line">            <span class="keyword">return</span> request;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">async</span> Task <span class="title">BatchAddOrder</span>(<span class="params">IAsyncStreamReader&lt;Order&gt; requestStream, IServerStreamWriter&lt;Order&gt; responseStream, ServerCallContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">"有人请求接口 -&gt; BatchAddOrder"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">await</span> requestStream.MoveNext())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> inputOrder = requestStream.Current;</span><br><span class="line">                <span class="keyword">lock</span> (<span class="keyword">this</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    _logger.LogInformation(<span class="string">$"接受数据：<span class="subst">&#123;inputOrder&#125;</span>"</span>);</span><br><span class="line">                    inputOrder.Id = InMemoryData.Orders.Max(x =&gt; x.Id) + <span class="number">1</span>;</span><br><span class="line">                    InMemoryData.Orders.Add(inputOrder);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">await</span> responseStream.WriteAsync(inputOrder);</span><br><span class="line">                Thread.Sleep(<span class="number">5000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：这里的<code>OrderService.OrderServiceBase</code>一样是<code>gRPC</code>生成的，命名空间为<code>GrpcDemo.Protos</code></strong></p><h3 id="修改Startup"><a href="#修改Startup" class="headerlink" title="修改Startup"></a>修改<code>Startup</code></h3><p>修改<code>Startup.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> GrpcServerDemo.Services;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcServerDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.AddGrpc();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.UseHttpsRedirection();</span><br><span class="line">            app.UseRouting();</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapGrpcService&lt;DemoOrderService&gt;();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>在<code>Powershell</code>中进入到项目根目录，直接<code>dotnet run</code>运行目录即可</p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>创建名字为<code>GrpcClientDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下三个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Google.Protobuf</span><br><span class="line">Grpc.Net.Client</span><br><span class="line">Grpc.Tools</span><br></pre></td></tr></table></figure><h3 id="复制proto文件"><a href="#复制proto文件" class="headerlink" title="复制proto文件"></a>复制<code>proto</code>文件</h3><p>将服务端<code>GrpcServerDemo</code>的<code>Protos</code>文件夹拷贝到项目根目录，在<code>解决方案资源管理器</code>找到<code>Order.proto</code>文件，右键 -&gt; 属性 -&gt; <code>Build Action</code>选择<code>Protobuf compiler</code> -&gt; <code>gRPC Stub Classes</code>选择<code>Client only</code></p><h3 id="修改Program-cs"><a href="#修改Program-cs" class="headerlink" title="修改Program.cs"></a>修改<code>Program.cs</code></h3><p>修改<code>Program.cs</code>文件，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Grpc.Core;</span><br><span class="line"><span class="keyword">using</span> Grpc.Net.Client;</span><br><span class="line"><span class="keyword">using</span> GrpcDemo.Protos;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">GrpcClientDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">"https://localhost:5001"</span>);</span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">new</span> OrderService.OrderServiceClient(channel);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> option = <span class="keyword">int</span>.Parse(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">switch</span> (option)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">await</span> GetByOrderNoAsync(client);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">await</span> GetByOwner(client);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="keyword">await</span> AddOrder(client);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">await</span> BatchAddOrder(client);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">"==========END=========="</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">GetByOrderNoAsync</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> metaData = <span class="keyword">new</span> Metadata()</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;<span class="string">"userName"</span>, <span class="string">"jiamiao.x"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"clientName"</span>, <span class="string">"GrpcClientDemo"</span>&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> client.GetByOrderNoAsync(<span class="keyword">new</span> GetByOrderNoRequest() &#123;OrderNo = <span class="string">"2020042201"</span>&#125;,metaData);</span><br><span class="line">            Console.WriteLine(<span class="string">$"接收到数据：<span class="subst">&#123;response&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">GetByOwner</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> response = client.GetByOwner(<span class="keyword">new</span> GetByOwnerRequest() &#123;OrderOwner = <span class="number">100</span>&#125;);</span><br><span class="line">            <span class="keyword">var</span> responseStream = response.ResponseStream;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">await</span> responseStream.MoveNext())</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"接收到数据：<span class="subst">&#123;responseStream.Current&#125;</span>"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"数据接收完毕"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">AddOrder</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> order = <span class="keyword">new</span> Order()</span><br><span class="line">            &#123;</span><br><span class="line">                OrderNo = <span class="string">"2020042301"</span>,</span><br><span class="line">                Status = <span class="number">1</span>,</span><br><span class="line">                Payment = <span class="number">43141.98f</span>,</span><br><span class="line">                Products =</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                    &#123;</span><br><span class="line">                        ProductTitle = <span class="string">"OnePlus 7T"</span>,</span><br><span class="line">                        SkuTitle = <span class="string">"256GB 蓝色"</span>,</span><br><span class="line">                        Num = <span class="number">1</span>,</span><br><span class="line">                        UnitPrice = <span class="number">3600f</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                Address = <span class="keyword">new</span> Order.Types.OrderAddress()</span><br><span class="line">                &#123;</span><br><span class="line">                    Province = <span class="string">"广东省"</span>,</span><br><span class="line">                    City = <span class="string">"深圳市"</span>,</span><br><span class="line">                    Districe = <span class="string">"南山区"</span>,</span><br><span class="line">                    Detail = <span class="string">"北科大厦7003"</span>,</span><br><span class="line">                    Name = <span class="string">"Jiamiao.x"</span>,</span><br><span class="line">                    Mobile = <span class="string">"13822113366"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                OrderOwner = <span class="number">100</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> response = <span class="keyword">await</span> client.AddOrderAsync(order);</span><br><span class="line">            Console.WriteLine(<span class="string">$"接收到数据：<span class="subst">&#123;response&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">BatchAddOrder</span>(<span class="params">OrderService.OrderServiceClient client</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> orders = <span class="keyword">new</span> List&lt;Order&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">new</span> Order()</span><br><span class="line">                &#123;</span><br><span class="line">                    OrderNo = <span class="string">"2020042301"</span>,</span><br><span class="line">                    Status = <span class="number">1</span>,</span><br><span class="line">                    Payment = <span class="number">3600f</span>,</span><br><span class="line">                    Products =</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                        &#123;</span><br><span class="line">                            ProductTitle = <span class="string">"OnePlus 7T"</span>,</span><br><span class="line">                            SkuTitle = <span class="string">"256GB 蓝色"</span>,</span><br><span class="line">                            Num = <span class="number">1</span>,</span><br><span class="line">                            UnitPrice = <span class="number">3600f</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    Address = <span class="keyword">new</span> Order.Types.OrderAddress()</span><br><span class="line">                    &#123;</span><br><span class="line">                        Province = <span class="string">"广东省"</span>,</span><br><span class="line">                        City = <span class="string">"深圳市"</span>,</span><br><span class="line">                        Districe = <span class="string">"南山区"</span>,</span><br><span class="line">                        Detail = <span class="string">"北科大厦7003"</span>,</span><br><span class="line">                        Name = <span class="string">"Jiamiao.x"</span>,</span><br><span class="line">                        Mobile = <span class="string">"13822113366"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    OrderOwner = <span class="number">100</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="keyword">new</span> Order()</span><br><span class="line">                &#123;</span><br><span class="line">                    OrderNo = <span class="string">"2020042302"</span>,</span><br><span class="line">                    Status = <span class="number">1</span>,</span><br><span class="line">                    Payment = <span class="number">13999.99f</span>,</span><br><span class="line">                    Products =</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                        &#123;</span><br><span class="line">                            ProductTitle = <span class="string">"SONY PS4 Pro"</span>,</span><br><span class="line">                            SkuTitle = <span class="string">"1TB 黑色"</span>,</span><br><span class="line">                            Num = <span class="number">1</span>,</span><br><span class="line">                            UnitPrice = <span class="number">3999.99f</span></span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="keyword">new</span> Order.Types.OrderProduct()</span><br><span class="line">                        &#123;</span><br><span class="line">                            ProductTitle = <span class="string">"Surface Desktop Pro"</span>,</span><br><span class="line">                            SkuTitle = <span class="string">"1TB 白色"</span>,</span><br><span class="line">                            Num = <span class="number">1</span>,</span><br><span class="line">                            UnitPrice = <span class="number">13999.99f</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    Address = <span class="keyword">new</span> Order.Types.OrderAddress()</span><br><span class="line">                    &#123;</span><br><span class="line">                        Province = <span class="string">"广东省"</span>,</span><br><span class="line">                        City = <span class="string">"深圳市"</span>,</span><br><span class="line">                        Districe = <span class="string">"南山区"</span>,</span><br><span class="line">                        Detail = <span class="string">"北科大厦7003"</span>,</span><br><span class="line">                        Name = <span class="string">"Jiamiao.x"</span>,</span><br><span class="line">                        Mobile = <span class="string">"13822113366"</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    OrderOwner = <span class="number">100</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">var</span> call = client.BatchAddOrder();</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">foreach</span> (<span class="keyword">var</span> order <span class="keyword">in</span> orders)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">await</span> call.RequestStream.WriteAsync(order);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> call.RequestStream.CompleteAsync();</span><br><span class="line">            Console.WriteLine(<span class="string">"----数据发送完毕----"</span>);</span><br><span class="line">            <span class="keyword">await</span> Task.Run(<span class="keyword">async</span> () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">await</span> call.ResponseStream.MoveNext())</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$"接收到消息：<span class="subst">&#123;call.ResponseStream.Current&#125;</span>"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行项目-1"><a href="#运行项目-1" class="headerlink" title="运行项目"></a>运行项目</h3><p>在<code>Powershell</code>进入到项目根目录，使用<code>dotnet run [arg]</code>运行项目既可以看到效果，<code>[arg]</code>是对应<code>switch</code>里的参数</p><h1 id="日志和异常"><a href="#日志和异常" class="headerlink" title="日志和异常"></a>日志和异常</h1><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><h3 id="ASP-NET-Core-1"><a href="#ASP-NET-Core-1" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h3><p>作为服务端在<code>ASP.NET Core</code>中开启<code>gRPC</code>日志只需要在<code>appsettings.json</code>中配置<code>grpc</code>的日志等级即可，修改<code>appsettings.json</code>内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"grpc"</span>: <span class="string">"Debug"</span> </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目就可以看到控制台打印出<code>gRPC</code>相关日志</p><h3 id="NET-Core控制台"><a href="#NET-Core控制台" class="headerlink" title=".NET Core控制台"></a>.NET Core控制台</h3><p>在客户端的<code>.NET Core控制台程序</code>，需要自定义一个<code>LoggerFactory</code>，然后在创建<code>Channel</code>的时候指定自定义的<code>LoggerFactory</code>。这里的示例使用<code>Serilog</code>来作为日志组件，需要在引入以下三个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Serilog</span><br><span class="line">Serilog.Extensions.Logging</span><br><span class="line">Serilog.Sinks.Console</span><br></pre></td></tr></table></figure><p>创建<code>SerilogLoggerFactory.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"><span class="keyword">using</span> Serilog.Debugging;</span><br><span class="line"><span class="keyword">using</span> Serilog.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.GrpcClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SerilogLoggerFactory</span>:<span class="title">ILoggerFactory</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> SerilogLoggerProvider _provider;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SerilogLoggerFactory</span>(<span class="params">Serilog.ILogger logger=<span class="literal">null</span>,<span class="keyword">bool</span> dispose = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _provider = <span class="keyword">new</span> SerilogLoggerProvider(logger, dispose);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span> =&gt; _provider.Dispose();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ILogger <span class="title">CreateLogger</span>(<span class="params"><span class="keyword">string</span> categoryName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> _provider.CreateLogger(categoryName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddProvider</span>(<span class="params">ILoggerProvider provider</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            SelfLog.WriteLine(<span class="string">"Ignore added logger provider &#123;0&#125;"</span>, provider);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到<code>gRPC</code>服务调用的地方，将创建<code>GrpcChannel</code>的代码修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">var</span> channel = GrpcChannel.ForAddress(<span class="string">"https://localhost:5001"</span>,<span class="keyword">new</span> GrpcChannelOptions()</span><br><span class="line">&#123;</span><br><span class="line">    LoggerFactory = <span class="keyword">new</span> SerilogLoggerFactory()</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行项目即可以看到<code>gRPC</code>日志内容</p><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>服务端在<code>gRPC</code>抛出异常的时候，可以抛出<code>RpcException</code>来指定异常类型，<code>RpcException</code>示例里的<code>trailer</code>是一个<code>Metadata</code>，可以携带自定义的键值对，客户端捕获异常也可以捕获指定的<code>RpcException</code>，一样可以拿到<code>trailer</code>来获取自定义的键值对信息</p><h1 id="关于JWT授权"><a href="#关于JWT授权" class="headerlink" title="关于JWT授权"></a>关于JWT授权</h1><p>在通过授权接口获取到<code>JWT Token</code>之后，与普通<code>HTTP</code>请求类似，<code>JWT Token</code>也是放在头部与请求一起发送出去，只不过在<code>RPC</code>换了个名词，编程<code>MetaData</code>，其实是一样道理，用<code>Authorization:Bearer {JWT Token}</code>来进行发送即可</p><h1 id="多项目之间共享proto文件"><a href="#多项目之间共享proto文件" class="headerlink" title="多项目之间共享proto文件"></a>多项目之间共享<code>proto</code>文件</h1><ul><li>使用单独的<code>Git</code>仓库管理<code>proto</code>文件</li><li>使用<code>submodule</code>将<code>proto</code>文件集成到工程目录中</li><li>使用<code>dotnet-grpc</code>命令行添加<code>proto</code>文件及祥光依赖包引用</li></ul><p><em>备注：由<code>proto</code>生成的代码文件会存放在<code>obj</code>目录中，不会被嵌入到<code>Git</code>仓库</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%bc%80%e5%8f%91%e7%8e%af%e5%a2%83&quot;&gt;开发环境&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#vscode&quot;&gt;VSCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%b6
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/categories/ASP-NET-Core/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="gRPC" scheme="http://www.dimsum.fun/tags/gRPC/"/>
    
  </entry>
  
  <entry>
    <title>MediatR：轻松实现命令查询职责分离模式(CQRS)</title>
    <link href="http://www.dimsum.fun/2020/04/15/21.MediatR_document/"/>
    <id>http://www.dimsum.fun/2020/04/15/21.MediatR_document/</id>
    <published>2020-04-15T07:00:00.000Z</published>
    <updated>2020-04-15T15:49:20.106Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%b8%80%e5%af%b9%e4%b8%80">一对一</a><ul><li><a href="#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1">核心对象</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%b1%95%e7%a4%ba">代码展示</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e5%91%bd%e4%bb%a4%e5%92%8c%e5%a4%84%e7%90%86%e8%80%85%e5%ad%98%e6%94%be%e8%b7%af%e5%be%84">创建命令和处理者存放路径</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e5%91%bd%e4%bb%a4">创建命令</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e5%91%bd%e4%bb%a4%e5%a4%84%e7%90%86%e8%80%85">创建命令处理者</a></li><li><a href="#%e5%8f%91%e9%80%81%e5%91%bd%e4%bb%a4">发送命令</a></li><li><a href="#%e8%bf%90%e8%a1%8c%e4%bb%a3%e7%a0%81">运行代码</a></li></ul></li></ul></li><li><a href="#%e4%b8%80%e5%af%b9%e5%a4%9a">一对多</a><ul><li><a href="#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1-1">核心对象</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e4%ba%8b%e4%bb%b6%e5%92%8c%e4%ba%8b%e4%bb%b6%e5%a4%84%e7%90%86%e8%80%85%e5%ad%98%e6%94%be%e8%b7%af%e5%be%84">创建事件和事件处理者存放路径</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e4%ba%8b%e4%bb%b6">创建事件</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e4%ba%8b%e4%bb%b6%e5%a4%84%e7%90%86%e8%80%85">创建事件处理者</a></li><li><a href="#%e4%bf%ae%e6%94%b9program">修改<code>Program</code></a></li><li><a href="#%e8%bf%90%e8%a1%8c%e4%bb%a3%e7%a0%81-1">运行代码</a></li></ul></li></ul></li></ul><h1 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h1><h2 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h2><ul><li><code>IMediator</code></li><li><code>IRequest</code> 、<code>IRequest&lt;T&gt;</code></li><li><code>IResuestHandler&lt;in TRequest,TResponse&gt;</code></li></ul><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><p>创建名字为<code>MediatorDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下三个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MediatR</span><br><span class="line">MediatR.Extensions.Microsoft.DependencyInjection</span><br><span class="line">Microsoft.Extensions.DependencyInjection</span><br></pre></td></tr></table></figure><h3 id="创建命令和处理者存放路径"><a href="#创建命令和处理者存放路径" class="headerlink" title="创建命令和处理者存放路径"></a>创建命令和处理者存放路径</h3><p>在根目录创建以下两个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Commands</span><br><span class="line">CommandHandlers</span><br></pre></td></tr></table></figure><h3 id="创建命令"><a href="#创建命令" class="headerlink" title="创建命令"></a>创建命令</h3><p>在<code>Commands</code>文件夹中创建<code>MyCommand.cs</code>，内容如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MediatR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.Commands</span></span><br><span class="line">&#123;</span><br><span class="line">    public class MyDemoCommand:IRequest&lt;string&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Data &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDemoCommand</span>(<span class="params"><span class="keyword">string</span> data</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Data = data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建命令处理者"><a href="#创建命令处理者" class="headerlink" title="创建命令处理者"></a>创建命令处理者</h3><p>在<code>CommandHandlers</code>文件夹中创建<code>MyDemoCommandHandler.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> MediatorDemo.Commands;</span><br><span class="line"><span class="keyword">using</span> MediatR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.CommandHandlers</span></span><br><span class="line">&#123;</span><br><span class="line">    public class MyDemoCommandHandler:IRequestHandler&lt;MyDemoCommand,string&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">Handle</span>(<span class="params">MyDemoCommand request, CancellationToken cancellationToken</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">$"Hello from MyDemoCommandHandler.Handler -&gt; command data = <span class="subst">&#123;request.Data&#125;</span>"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送命令"><a href="#发送命令" class="headerlink" title="发送命令"></a>发送命令</h3><p>修改<code>Program.cs</code>，具体内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> MediatorDemo.CommandHandlers;</span><br><span class="line"><span class="keyword">using</span> MediatR;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> service = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            service.AddMediatR(<span class="keyword">typeof</span>(Program).Assembly);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = service.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> mediator = serviceProvider.GetService&lt;IMediator&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> rsp = <span class="keyword">await</span> mediator.Send(<span class="keyword">new</span> MyDemoCommand(<span class="string">"This is my demo command"</span>));</span><br><span class="line">            Console.WriteLine(rsp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释代码：</p><ul><li>通过<code>var service = new ServiceCollection();</code>创建服务容器</li><li><code>service.AddMediatR(typeof(Program).Assembly);</code>是想服务容器注册<code>MediatR</code>组件，同时指定<code>MediatR</code>扫描当前<code>Program</code>所在的程序集，获得当前程序集里的所有<code>Command</code>和<code>Handler</code>(通过接口约束)</li><li><code>var mediator = serviceProvider.GetService&lt;IMediator&gt;();</code>从服务容器中获取<code>mediator</code>对象</li><li><code>var rsp = await mediator.Send(new MyDemoCommand(&quot;This is my demo command&quot;));</code>发送一条<code>MyDemoCommand</code>命令</li></ul><h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p>运行代码之后可以看到控制台打印以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello from MyDemoCommandHandler.Handler -&gt; command data &#x3D; This is my demo command</span><br></pre></td></tr></table></figure><p>可以看到<code>Program</code>并没有直接去引用<code>MyDemoCommandHandler</code>这个类，只是向<code>MediatR</code>发送了一条指定的命令，<code>MediatR</code>框架会自动去查找该命令对应的<code>Handler</code>，调用<code>Handler</code>里的<code>Handle</code>方法</p><p><strong>注意：所谓一对一就是当你有对一个命令有多个<code>Handler</code>的时候，<code>MediatR</code>只会找到最后注册的那个来执行</strong> </p><h1 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h1><h2 id="核心对象-1"><a href="#核心对象-1" class="headerlink" title="核心对象"></a>核心对象</h2><ul><li><code>IMediator</code></li><li><code>INotification</code></li><li><code>INotificationHandler&lt;in TNotification&gt;</code></li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="创建事件和事件处理者存放路径"><a href="#创建事件和事件处理者存放路径" class="headerlink" title="创建事件和事件处理者存放路径"></a>创建事件和事件处理者存放路径</h3><p>在根目录创建以下两个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Events</span><br><span class="line">EventHandlers</span><br></pre></td></tr></table></figure><h3 id="创建事件"><a href="#创建事件" class="headerlink" title="创建事件"></a>创建事件</h3><p>在<code>Events</code>文件夹中创建<code>MyDemoEvent.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MediatR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.Events</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDemoEvent</span>:<span class="title">INotification</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> EventName &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDemoEvent</span>(<span class="params"><span class="keyword">string</span> eventName</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            EventName = eventName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建事件处理者"><a href="#创建事件处理者" class="headerlink" title="创建事件处理者"></a>创建事件处理者</h3><p>在<code>EventHandlers</code>文件夹中创建<code>MyDemoEventHandler.cs</code>，内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Threading;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> MediatorDemo.Events;</span><br><span class="line"><span class="keyword">using</span> MediatR;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorDemo.EventHandlers</span></span><br><span class="line">&#123;</span><br><span class="line">    public class MyDemoEventHandler:INotificationHandler&lt;MyDemoEvent&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Handle</span>(<span class="params">MyDemoEvent notification, CancellationToken cancellationToken</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;</span><br><span class="line">            Console.WriteLine(<span class="string">$"MyDemoEventHandler.Handle执行:<span class="subst">&#123;notification.EventName&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public class MyDemoEventHandlerV2 : INotificationHandler&lt;MyDemoEvent&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">Handle</span>(<span class="params">MyDemoEvent notification, CancellationToken cancellationToken</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">await</span> Task.CompletedTask;</span><br><span class="line">            Console.WriteLine(<span class="string">$"MyDemoEventHandlerV2.Handle执行:<span class="subst">&#123;notification.EventName&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是一个<code>cs</code>文件中写了两个<code>Handler</code></p><h3 id="修改Program"><a href="#修改Program" class="headerlink" title="修改Program"></a>修改<code>Program</code></h3><p>在原有的<code>Main</code>方法最后面添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> mediator.Publish(<span class="keyword">new</span> MyDemoEvent(<span class="string">"MyEvent"</span>));</span><br></pre></td></tr></table></figure><h3 id="运行代码-1"><a href="#运行代码-1" class="headerlink" title="运行代码"></a>运行代码</h3><p>运行项目可以看到以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello from MyDemoCommandHandler.Handler -&gt; command data &#x3D; This is my demo command</span><br><span class="line">MyDemoEventHandler.Handle执行:MyEvent</span><br><span class="line">MyDemoEventHandlerV2.Handle执行:MyEvent</span><br></pre></td></tr></table></figure><p>其中后面两行分别为两个事件处理者打印出来的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%80%e5%af%b9%e4%b8%80&quot;&gt;一对一&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1&quot;&gt;核心对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/categories/ASP-NET-Core/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="DDD" scheme="http://www.dimsum.fun/tags/DDD/"/>
    
      <category term="CQRS" scheme="http://www.dimsum.fun/tags/CQRS/"/>
    
      <category term="MediatR" scheme="http://www.dimsum.fun/tags/MediatR/"/>
    
  </entry>
  
  <entry>
    <title>EntityFramework Core的并发处理</title>
    <link href="http://www.dimsum.fun/2020/04/10/20.EFCore_Concurrency_document/"/>
    <id>http://www.dimsum.fun/2020/04/10/20.EFCore_Concurrency_document/</id>
    <published>2020-04-10T08:21:00.000Z</published>
    <updated>2020-04-10T10:31:51.922Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%bb%80%e4%b9%88%e5%8f%ab%e5%b9%b6%e5%8f%91">什么叫并发</a></li><li><a href="#%e6%80%8e%e4%b9%88%e8%a7%a3%e5%86%b3">怎么解决</a></li><li><a href="#efcore%e6%98%af%e6%80%8e%e4%b9%88%e5%81%9a%e7%9a%84">EFCore是怎么做的</a></li><li><a href="#talk-is-cheap-show-me-the-code">Talk is cheap. Show me the code</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93%e5%ae%9e%e4%bd%93">创建数据库实体</a></li><li><a href="#%e9%85%8d%e7%bd%ae%e5%ae%9e%e4%bd%93%e6%98%a0%e5%b0%84%e8%a7%84%e5%88%99%e8%bf%99%e9%87%8c%e6%8c%87%e5%ae%9a%e9%94%81">配置实体映射规则(这里指定锁)</a></li><li><a href="#%e5%88%9b%e5%bb%badbcontext">创建<code>DbContext</code></a></li><li><a href="#%e4%bf%ae%e6%94%b9startup">修改<code>Startup</code></a></li><li><a href="#%e6%b7%bb%e5%8a%a0%e6%95%b0%e6%8d%ae%e5%ba%93%e8%bf%9e%e6%8e%a5%e5%ad%97%e7%ac%a6%e4%b8%b2">添加数据库连接字符串</a></li><li><a href="#%e6%b7%bb%e5%8a%a0%e6%b5%8b%e8%af%95%e6%8e%a7%e5%88%b6%e5%99%a8">添加测试控制器</a></li><li><a href="#%e8%bf%81%e7%a7%bb%e6%95%b0%e6%8d%ae%e5%ba%93">迁移数据库</a></li><li><a href="#%e6%b5%8b%e8%af%95">测试</a></li></ul></li><li><a href="#%e5%ae%98%e6%96%b9%e6%96%87%e6%a1%a3">官方文档</a></li></ul><h1 id="什么叫并发"><a href="#什么叫并发" class="headerlink" title="什么叫并发"></a>什么叫并发</h1><p>假设一个场景：</p><ol><li>用户下了一个单，数据库的<code>Order</code>表存放这个订单数据，其中<code>订单状态=待发货</code></li><li>仓库从数据库中<code>查询出</code>这个<code>代发货</code>订单，进行发货逻辑处理，比如：<ol><li>判断订单状态</li><li>判断地址是否能到达</li><li>查询商品库存</li><li>获取快递单号</li><li>调用打印快递单服务</li><li>更新订单状态/商品库存等等</li></ol></li><li>可以看出做发货逻辑处理耗时会比较长，正在这时候，顾客进行了退货申请，一个按钮点击申请退款，注意：业务逻辑要求已发货的订单不能申请退款，但是在顾客点击申请退款那一瞬间，发货流程还没走完，发货系统还在屁颠屁颠的处理发货逻辑，数据库里的订单状态还是<code>待发货</code>，这时候顾客申请退款，接口一下数据库，发现是<code>待发货</code>，就直接将数据库里的订单状态更新为<code>申请退款</code>，并反馈给用户操作成功</li><li>这时候苦逼的发货系统终于把所有发货逻辑全部计算完，兴高采烈得将数据库里得订单状态修改为<code>已发货</code></li><li>那么请问，最终这个订单的状态应该是什么呢？<code>待发货</code>？<code>申请退款</code>？<code>已发货</code>？</li></ol><p>上面那个场景就是所谓的并发，多个地方在对同一条数据进行操作的时候，时常会出现这种情况</p><h1 id="怎么解决"><a href="#怎么解决" class="headerlink" title="怎么解决"></a>怎么解决</h1><p>锁！</p><ul><li>悲观锁：是的，相当悲观，对整个世界都不信任的那种！就是假设我读取的数据一定会被修改，所以读数据之前我先把这些数据锁起来，外界拿不到，等我对数据操作完，再把锁释放掉，外界才可以继续用这些数据；</li><li>乐观锁：相对来说乐观一些，读取数据的时候不对数据上锁，相信没人会来修改这些数据，但是在处理完数据要重新更新数据库的时候，不能盲目信任，要查一下这些数据有没有发生变化，如果变化了，则说明被别人修改了，于是悲伤的抛出个异常表示对这个世界的不满，如果没有变化，则正常的将数据更新进去；</li></ul><h1 id="EFCore是怎么做的"><a href="#EFCore是怎么做的" class="headerlink" title="EFCore是怎么做的"></a>EFCore是怎么做的</h1><p><code>EFCore</code>使用的是<code>乐观锁</code>，它选择相信这个世界！</p><p><code>EFCore</code>的<code>乐观锁</code>分两种粒度：<code>ConcurrencyToken</code>和<code>RowVersion</code></p><ul><li><code>ConcurrencyToken</code>：这个针对表中的某个字段，为表中的某个字段指定为<code>ConcurrencyToken</code>，则当这个字段被并发修改了，则无法进行<code>SaveChange</code>，如果不是这个字段，而是这一行的其他字段被修改了，则可以正常进行<code>SaveChange</code>。以上面订单例子为例，如果将<code>订单状态</code>这个字段设置为<code>ConcurrencyToken</code>，那个在顾客申请退款之后，发货系统去更新订单状态则会失败，但是如果这个时候不是更新<code>订单状态</code>这个字段，而是更新<code>发货员</code>这个字段，则不会有任何影响，照样可以更新进去</li><li><code>RowVersion</code>：这个针对表中的所有字段，指定表中某个字段为<code>RowVersion</code>，每一次更新都会修改<code>RowVersion</code>这个字段的值，在取出数据重新更新的时候，会查询<code>RowVersion</code>这个字段的值是否与刚刚取出来的值一致，如果不一致说明这个表中可能某个或多个字段被修改过，则无法进行<code>SaveChange</code></li></ul><h1 id="Talk-is-cheap-Show-me-the-code"><a href="#Talk-is-cheap-Show-me-the-code" class="headerlink" title="Talk is cheap. Show me the code"></a>Talk is cheap. Show me the code</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>EFCoreConcurrencyDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，这里使用的是<code>Sql Server</code>数据库，所有需要引入以下3个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.EntityFrameworkCore.SqlServer</span><br><span class="line">Microsoft.EntityFrameworkCore.Design</span><br><span class="line">Microsoft.EntityFrameworkCore.Tools</span><br></pre></td></tr></table></figure><h2 id="创建数据库实体"><a href="#创建数据库实体" class="headerlink" title="创建数据库实体"></a>创建数据库实体</h2><p>在项目根目录创建以下路径和文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|--EFCoreConcurrencyDemo</span><br><span class="line">    |-- DbModel</span><br><span class="line">        |-- ConcurrencyCheckDemo</span><br><span class="line">            |-- ConcurrencyCheckDemo.cs</span><br><span class="line">        |-- RowVersionDemo</span><br><span class="line">            |-- RowVersionDemo.cs</span><br></pre></td></tr></table></figure><p><code>ConcurrencyCheckDemo.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ConcurrencyCheckDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RowVersionDemo.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModel.RowVersionDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">RowVersionDemo</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] RowVersion &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置实体映射规则-这里指定锁"><a href="#配置实体映射规则-这里指定锁" class="headerlink" title="配置实体映射规则(这里指定锁)"></a>配置实体映射规则(这里指定锁)</h2><p>在项目根目录创建以下路径和文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">|--EFCoreConcurrencyDemo</span><br><span class="line">    |-- DbModelConfiguration</span><br><span class="line">        |-- ConcurrencyCheckDemoConfiguration.cs</span><br><span class="line">        |-- RowVersionDemoConfiguration.cs</span><br></pre></td></tr></table></figure><p><code>ConcurrencyCheckDemoConfiguration.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Metadata.Builders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModelConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    public class ConcurrencyCheckDemoConfiguration : IEntityTypeConfiguration&lt;ConcurrencyCheckDemo&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;ConcurrencyCheckDemo&gt; builder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            builder.ToTable(<span class="string">"ConcurrencyCheckDemo"</span>);</span><br><span class="line">            builder.Property(x =&gt; x.Name).IsConcurrencyToken(); <span class="comment">//并发令牌</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>RowVersionDemoConfiguration.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.RowVersionDemo;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore.Metadata.Builders;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbModelConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    public class RowVersionDemoConfiguration: IEntityTypeConfiguration&lt;RowVersionDemo&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">EntityTypeBuilder&lt;RowVersionDemo&gt; builder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            builder.ToTable(<span class="string">"RowVersionDemo"</span>);</span><br><span class="line">            builder.Property(x =&gt; x.RowVersion).IsRowVersion(); <span class="comment">//行版本</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建DbContext"><a href="#创建DbContext" class="headerlink" title="创建DbContext"></a>创建<code>DbContext</code></h2><p>在项目根目录创建以下路径和文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|--EFCoreConcurrencyDemo</span><br><span class="line">    |-- DbContext</span><br><span class="line">        |-- MyDbContext.cs</span><br></pre></td></tr></table></figure><p><code>MyDbContext.cs</code>的内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.RowVersionDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModelConfiguration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.DbContext</span></span><br><span class="line">&#123;</span><br><span class="line">    public class MyDbContext:Microsoft.EntityFrameworkCore.DbContext</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyDbContext</span>(<span class="params">DbContextOptions&lt;MyDbContext&gt; options</span>):<span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;ConcurrencyCheckDemo&gt; ConcurrencyCheckDemos &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> DbSet&lt;RowVersionDemo&gt; RowVersionDemos &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnModelCreating</span>(<span class="params">ModelBuilder modelBuilder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            modelBuilder.ApplyConfiguration(<span class="keyword">new</span> ConcurrencyCheckDemoConfiguration());</span><br><span class="line">            modelBuilder.ApplyConfiguration(<span class="keyword">new</span> RowVersionDemoConfiguration());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改Startup"><a href="#修改Startup" class="headerlink" title="修改Startup"></a>修改<code>Startup</code></h2><p>修改<code>Startup.ConfigureServices</code>方法，具体内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddDbContext&lt;MyDbContext&gt;(options =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            options.UseSqlServer(Configuration.GetConnectionString(<span class="string">"EFCoreConcurrencyDemo"</span>));</span><br><span class="line">            options.EnableSensitiveDataLogging(<span class="literal">false</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    services.AddControllers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加数据库连接字符串"><a href="#添加数据库连接字符串" class="headerlink" title="添加数据库连接字符串"></a>添加数据库连接字符串</h2><p>在<code>appsettings.json</code>中添加数据库连接字符串，具体内容如下（连接字符串就换成你自己的数据库）：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ConnectionStrings"</span>: &#123;</span><br><span class="line">    <span class="attr">"EFCoreConcurrencyDemo"</span>: <span class="string">"Password=jiamiao.x.20.demo;Persist Security Info=True;User ID=sa;Initial Catalog=EFCoreConcurrencyDemo;Data Source=127.0.0.1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加测试控制器"><a href="#添加测试控制器" class="headerlink" title="添加测试控制器"></a>添加测试控制器</h2><p>在<code>Controllers</code>中添加<code>DemoController.cs</code>，具体内容如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbContext;</span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.ConcurrencyCheckDemo;</span><br><span class="line"><span class="keyword">using</span> EFCoreConcurrencyDemo.DbModel.RowVersionDemo;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">EFCoreConcurrencyDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"[controller]/[action]"</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DemoController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> MyDbContext _dbContext;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">DemoController</span>(<span class="params">MyDbContext dbContext</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _dbContext = dbContext;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">SeedData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> concurrencyCheckDemo = <span class="keyword">new</span> ConcurrencyCheckDemo()</span><br><span class="line">            &#123;</span><br><span class="line">                Name = <span class="string">"ConcurrencyCheck测试"</span>,</span><br><span class="line">                Age = <span class="number">20</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">await</span> _dbContext.ConcurrencyCheckDemos.AddAsync(concurrencyCheckDemo);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> rowVersionDemo = <span class="keyword">new</span> RowVersionDemo()</span><br><span class="line">            &#123;</span><br><span class="line">                Name = <span class="string">"RowVersion测试"</span>,</span><br><span class="line">                Age = <span class="number">24</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">await</span> _dbContext.RowVersionDemos.AddAsync(rowVersionDemo);</span><br><span class="line">            <span class="keyword">var</span> changedRow = <span class="keyword">await</span> _dbContext.SaveChangesAsync();</span><br><span class="line">            <span class="keyword">return</span> changedRow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">ConcurrencyCheck</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> dbValue = <span class="keyword">await</span> _dbContext.ConcurrencyCheckDemos.FirstOrDefaultAsync();</span><br><span class="line">            <span class="comment">//dbValue.Name = "ConcurrencyCheck New Value";</span></span><br><span class="line">            dbValue.Age = <span class="number">29</span>;</span><br><span class="line">            <span class="keyword">var</span> changedRow = <span class="keyword">await</span> _dbContext.SaveChangesAsync();</span><br><span class="line">            <span class="keyword">return</span> changedRow;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">RowVersionCheck</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> dbValue = <span class="keyword">await</span> _dbContext.RowVersionDemos.FirstOrDefaultAsync();</span><br><span class="line">            <span class="comment">//dbValue.Name = "RowVersion New Value";</span></span><br><span class="line">            dbValue.Age = <span class="number">36</span>;</span><br><span class="line">            <span class="keyword">var</span> changedRow = <span class="keyword">await</span> _dbContext.SaveChangesAsync();</span><br><span class="line">            <span class="keyword">return</span> changedRow;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迁移数据库"><a href="#迁移数据库" class="headerlink" title="迁移数据库"></a>迁移数据库</h2><p>在<code>Visual Studio 2019</code>中的<code>程序包管理控制台</code>中输入以下命令： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add-migration InitDemoDb</span><br></pre></td></tr></table></figure><p>得到迁移记录之后，用以下命令生成数据库脚本，去<code>Microsoft SQL Server Management Studio</code>中执行即可，或者你可以用<code>EFCore</code>中的<code>update</code>命令直接迁移</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">script-migration</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol><li>这里提供测试思路，将项目运行起来，先访问<code>/demo/SeedData</code>往数据库写入两条测试数据</li><li>分别测试<code>/demo/ConcurrencyCheck</code>和<code>/demo/RowVersionCheck</code>，在赋值的那行代码打断点，取得数据之后，自己在<code>Microsoft SQL Server Management Studio</code>中手动修改数据，然后继续运行代码，则可以看出效果</li></ol><h1 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h1><blockquote><p><a href="https://docs.microsoft.com/zh-cn/ef/core/saving/concurrency" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/ef/core/saving/concurrency</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%80%e4%b9%88%e5%8f%ab%e5%b9%b6%e5%8f%91&quot;&gt;什么叫并发&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%80%8e%e4%b9%88%e8%a7%a3%e5%86%b3&quot;&gt;怎么解决&lt;/a
      
    
    </summary>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/categories/ASP-NET-Core/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="EntityFramework Core" scheme="http://www.dimsum.fun/tags/EntityFramework-Core/"/>
    
      <category term="ORM" scheme="http://www.dimsum.fun/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET Core发布到Docker中(使用Dockerfile)</title>
    <link href="http://www.dimsum.fun/2020/04/09/19.Docker_AspNetCore_document/"/>
    <id>http://www.dimsum.fun/2020/04/09/19.Docker_AspNetCore_document/</id>
    <published>2020-04-09T07:49:00.000Z</published>
    <updated>2020-04-09T09:20:56.918Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#aspnet-core%e7%9a%84%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4">ASP.NET Core的常用命令</a></li><li><a href="#dockerfile%e4%b8%ad%e7%9a%84%e5%91%bd%e4%bb%a4">Dockerfile中的命令</a><ul><li><a href="#from">FROM</a></li><li><a href="#workdir">WORKDIR</a></li><li><a href="#copy">COPY</a></li><li><a href="#run">RUN</a></li><li><a href="#entrypoint">ENTRYPOINT</a></li></ul></li><li><a href="#%e5%85%b7%e4%bd%93%e6%93%8d%e4%bd%9c">具体操作</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%88%9b%e5%bb%badockerfile%e6%96%87%e4%bb%b6">创建<code>Dockerfile</code>文件</a></li><li><a href="#%e7%bc%96%e5%86%99dockerfile%e6%96%87%e4%bb%b6">编写<code>Dockerfile</code>文件</a></li><li><a href="#%e7%94%9f%e6%88%90%e9%95%9c%e5%83%8f">生成镜像</a></li></ul></li></ul><h1 id="ASP-NET-Core的常用命令"><a href="#ASP-NET-Core的常用命令" class="headerlink" title="ASP.NET Core的常用命令"></a>ASP.NET Core的常用命令</h1><p>在使用<code>VS 2019</code>、<code>VSCode</code>、<code>Rider</code>这类IDE写完代码之后，在命令行进入项目目录，尝试使用以下命令来<code>恢复</code>、<code>编译</code>、<code>发布</code>、<code>运行</code>项目</p><ul><li>恢复所有的<code>NuGet</code>包<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet restore [项目名.csproj]</span><br></pre></td></tr></table></figure>这里的项目文件可以省略，自己在命令行中执行可以省略，但是如果将命令写到文件中，为了方便理解，一般会将项目文件写上</li><li>编译<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build [项目名.csproj] -c Release -o /app/build</span><br></pre></td></tr></table></figure><ul><li>项目文件解释参照上面</li><li>-c 表示编译配置，这里指定编译配置为<code>Release</code></li><li>-o 表示编译后文件输出到哪个目录，这里指定编译后输出目录为<code>/app/build</code></li></ul></li><li>发布<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet publish [项目名.csproj] -c Release -o /app/publish</span><br></pre></td></tr></table></figure><ul><li>命令参数与编译的参数基本一致</li></ul></li><li>运行<br>在生成发布文件的目录里运行<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet [项目名称.dll]</span><br></pre></td></tr></table></figure></li></ul><h1 id="Dockerfile中的命令"><a href="#Dockerfile中的命令" class="headerlink" title="Dockerfile中的命令"></a>Dockerfile中的命令</h1><p>为了快速看到效果，这里只是列举了下面简单示例使用到的命令</p><h2 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h2><p>指定运行是镜像，例如<code>FROM mcr.microsoft.com/dotnet/core/aspnet:3.1</code>，后面用<code>AS</code>命令可以在执行命令时给镜像起别名，例如<code>FROM mcr.microsoft.com/dotnet/core/aspnet:3.1 AS base</code>，即表示将<code>mcr.microsoft.com/dotnet/core/aspnet:3.1</code>这个镜像起别名为<code>base</code></p><p>当需要多个镜像的时候，可多次使用这个命令</p><h2 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h2><p>设定工作目录，类似命令行中的<code>cd</code>命令，设定之后后续的命令相当于在工作目录中运行</p><h2 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h2><p>拷贝文件，这个命令可以拷贝当前宿主机的文件，也可以拷贝上面那种引用多个镜像进行编译的文件到当前镜像</p><ul><li>拷贝宿主机文件<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> . ./</span></span><br></pre></td></tr></table></figure>表示拷贝当前文件夹的所有文件到镜像中的当前文件夹，一般在执行这个命令之前会设置好工作目录，表示将宿主机当前文件夹中的所有文件拷贝到镜像中的工作目录中</li><li>拷贝其他镜像文件<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /app/publish .</span></span><br></pre></td></tr></table></figure>使用<code>--from=build</code>表示从<code>build</code>的镜像中拷贝文件，这里的<code>build</code>是引入镜像时指定的别名，<code>/app/publish</code>是<code>build</code>镜像的文件路径，最后一个<code>.</code>是指要拷贝到当前镜像来的目录，<code>.</code>表示当前路径，一般也是配合<code>WORKDIR</code>使用<h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2>执行命令，构建镜像的时候需要安装其他软件或者编译文件的命令在这里执行，多条命令可以用<code>&amp;&amp;</code>来连接，以发布<code>ASP.NET Core</code>项目为例，将代码拷贝到镜像之后，需要进行<code>restore</code>、<code>build</code>、<code>publish</code>，就可以在这里使用，例如：<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="bash"> dotnet restore <span class="string">"./Jiamiao.x.ServiceA.csproj"</span> &amp;&amp; dotnet build <span class="string">"./Jiamiao.x.ServiceA.csproj"</span> -c Release -o /app/build &amp;&amp; dotnet publish <span class="string">"./Jiamiao.x.ServiceA.csproj"</span> -c Release -o /app/publish</span></span><br></pre></td></tr></table></figure><h2 id="ENTRYPOINT"><a href="#ENTRYPOINT" class="headerlink" title="ENTRYPOINT"></a>ENTRYPOINT</h2>一样是执行命令，但是这里是容器启动的时候要执行的命令，比如上面那些恢复、编译、发布的命令就不能在这里执行，因为容器启动的时候是不用做这些操作的，作为容器启动，只需要启动站点即可，所以这里使用的是运行命令，所以每个<code>Dockerfile</code>只有一个<code>ENTRYPOINT</code>，多个<code>ENTRYPOINT</code>后面会覆盖前面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [ &quot;dotnet&quot;,&quot;Jiamiao.x.ServiceA.dll&quot; ]</span><br></pre></td></tr></table></figure>上面的命令等于在命令行执行<code>dotnet Jiamiao.x.ServiceA.dll</code>这个命令</li></ul><h1 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>Jiamiao.x.ServiceA</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，这里只是做发布测试，所以不需要动任何代码</p><h2 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a>创建<code>Dockerfile</code>文件</h2><p>这里使用<code>VSCode</code>为例，在<code>VSCode</code>中安装<code>Docker</code>扩展，如下图</p><p><img src="https://i.loli.net/2020/04/09/DqtcljBy6IxRFPN.png" alt="微信截图_20200409164449.png"></p><p>按<code>Ctrl + Shift + P</code>，打开控制面板，输入<code>add docker</code>，选择<code>Docker:Add Docker Files To Workspace</code>，如下图</p><p><img src="https://i.loli.net/2020/04/09/OnB7bAFI1k3xmhM.png" alt="微信截图_20200409164940.png"></p><p>选择<code>.NET:ASP.NET Core</code>，如下图</p><p><img src="https://i.loli.net/2020/04/09/7e6WviBlIEr1qmK.png" alt="微信截图_20200409165104.png"></p><p>选择<code>Linux</code>，如下图</p><p><img src="https://i.loli.net/2020/04/09/MuBoe2jnaY6RpDK.png" alt="微信截图_20200409165115.png"></p><p>选择<code>No</code>，如下图</p><p><img src="https://i.loli.net/2020/04/09/qOTBAVSuidgpHGl.png" alt="微信截图_20200409165128.png"></p><p>默认输入<code>80, 443</code>保持不变，回车即可生成<code>Dockerfile</code>文件<br><img src="https://i.loli.net/2020/04/09/r2b7oK49iAxFldD.png" alt="微信截图_20200409165140.png"></p><p>好了！这里的文件内容不是我们想要的，直接删掉<code>Dockerfile</code>里的文件内容即可，我们主要是要自动生成一个<code>.dockerignore</code>文件</p><h2 id="编写Dockerfile文件"><a href="#编写Dockerfile文件" class="headerlink" title="编写Dockerfile文件"></a>编写<code>Dockerfile</code>文件</h2><p>确定以下思路，这里需要将代码拷贝进容器进行编译发布，然后再将发布好的文件拷贝到运行时的镜像中，容器运行时启动站点，具体代码如下：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定运行是镜像</span></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/aspnet:<span class="number">3.1</span> AS base</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定编译和发布镜像</span></span><br><span class="line"><span class="keyword">FROM</span> mcr.microsoft.com/dotnet/core/sdk:<span class="number">3.1</span> AS build</span><br><span class="line"><span class="comment"># 设置工作目录为src</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /src</span></span><br><span class="line"><span class="comment"># 拷贝所有文件到容器中的工作目录</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . ./</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dotnet restore <span class="string">"./Jiamiao.x.ServiceA.csproj"</span> &amp;&amp; dotnet build <span class="string">"./Jiamiao.x.ServiceA.csproj"</span> -c Release -o /app/build &amp;&amp; dotnet publish <span class="string">"./Jiamiao.x.ServiceA.csproj"</span> -c Release -o /app/publish</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> base as final</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /app/publish .</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [ <span class="string">"dotnet"</span>,<span class="string">"Jiamiao.x.ServiceA.dll"</span> ]</span></span><br></pre></td></tr></table></figure><p>这里使用了两个镜像，一个是编译发布用的<code>mcr.microsoft.com/dotnet/core/sdk:3.1</code>简称为<code>build</code>，一个是运行时用的<code>mcr.microsoft.com/dotnet/core/aspnet:3.1</code>简称<code>base</code></p><h2 id="生成镜像"><a href="#生成镜像" class="headerlink" title="生成镜像"></a>生成镜像</h2><p>在项目根目录，即<code>Dockerfile</code>所在目录运行预下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t xiejiamiao/aspnetcore .</span><br></pre></td></tr></table></figure><p>其中<code>xiejiamiao/aspnetcore</code>为镜像名字，后面的<code>.</code>表示使用当前目录的<code>Dockerfile</code>。如果生成成功，使用<code>docker images</code>应该就可以看到刚刚生成的镜像，执行以下命令启动容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8080:80 xiejiamiao&#x2F;aspnetcore --name ASPNETCore-X</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>表示后台运行容器</li><li><code>8080:80</code>是指将宿主机的<code>8080</code>端口映射到容器中的<code>80</code>端口</li><li><code>xiejiamiao/aspnetcore</code>为镜像的名字</li><li><code>ASPNETCore-X</code>为镜像运行起来的容器的名字<br>容器启动成功后，访问<code>http://127.0.0.1:8080/WeatherForecast</code>应该就可以看到返回一些<code>json</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#aspnet-core%e7%9a%84%e5%b8%b8%e7%94%a8%e5%91%bd%e4%bb%a4&quot;&gt;ASP.NET Core的常用命令&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#dockerfile%e4%b8%ad%e7
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.dimsum.fun/categories/Docker/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="Docker" scheme="http://www.dimsum.fun/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(18) -- 微服务之工程结构概览：定义应用分层及依赖关系</title>
    <link href="http://www.dimsum.fun/2020/04/07/18.MicroService01_document/"/>
    <id>http://www.dimsum.fun/2020/04/07/18.MicroService01_document/</id>
    <published>2020-04-07T10:18:00.000Z</published>
    <updated>2020-04-09T09:20:56.918Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%88%86%e5%b1%82">分层</a></li><li><a href="#%e6%80%bb%e7%bb%93">总结</a></li></ul><h1 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h1><ul><li>领域模型层<code>Domain</code>：定义领域模型的地方，这里面会有不同的聚合、领域事件，其中不同的聚合下面就是领域模型</li><li>基础设施层<code>Infrastructure</code>：仓储层和一些共享代码的实现、领域模型与数据库之间的映射关系</li><li>应用层<code>Application</code>：API和后台任务<ul><li><code>Web API</code>也分类一些目录：<ul><li>Application：项目使用了<code>CQRS</code>模式，即命令与查询职责分离，所以我们会把命令放在一个目录，查询放在一个目录，还有两个事件处理的目录，一个是领域模型中领域事件的处理，一个是集成事件的处理</li><li>Controllers：主要就是定义<code>Web</code></li><li>Extensions：将服务注册进容器的代码和中间件配置的代码，就是<code>ServiceCollection</code>和<code>ApplicationBuilder</code>的扩展</li><li>Infrastructure：身份认证、缓存等与基础设施交互的代码</li></ul></li></ul></li><li>共享层<code>Share</code><ul><li>GeekTime.Core  –主要是承载基础简单的类型，比如自定义异常类，一下帮助类</li><li>GeekTime.Domain.Abstractions  –领域抽象层，定义领域模型的一些基类、接口、领域事件的接口、领域事件处理的接口、Entity的接口和Entity的基类</li><li>GeekTime.Infrastructure.Core  –基础设施核心层，可以仓储和<code>EFContext</code>定义一些共享的代码</li></ul></li></ul><p>共享层的代码是在所有项目里面都可以共享的，所有建议的做法是把这些代码通过私有的<code>NuGet</code>仓库来存储，然后其他工程可以使用<code>NuGet</code>包来直接引用即可</p><p>各层之间的依赖关系：</p><ul><li>共享层：这个层不依赖解决方案中其他层<ul><li>GeekTime.Core：不依赖任何其他工程</li><li>GeekTime.Domain.Abstractions：不依赖任何其他工程</li><li>GeekTime.Infrastructure.Core：依赖领域模型的抽象层<code>GeekTime.Domain.Abstractions</code></li></ul></li><li>领域模型层：<ul><li>我们的领域模型是需要继承我们定义的模型基类，并且实现一个聚合根的接口，表示它是一个聚合根</li><li>领域事件就需要我们实现一个领域事件的机口</li></ul></li><li>基础设施层：<ul><li>定义仓储和仓储的实现，仓储的定义实际上依赖了基础设施核心层<code>GeekTime.Infrastructure.Core</code>里的仓储定义，这样就能复用仓储层的代码</li><li>数据库访问的实现：继承了我们自己定义的<code>EFContext</code></li><li>事务处理的对象：这个对象是来管理我们整个应用程序的请求上下文的事务，这样就可以让我们避免去手动的处理事务，简化我们的代码</li></ul></li><li>应用层：<ul><li>依赖基础设施层，基础设施层又依赖领域层，应用层实际上是把各层组装在一起的一层，它是我们应用程序的一个宿主，我们协调各层之间的关系，以及组装的代码都在这里实现</li></ul></li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>领域模型专注业务的实现，不依赖仓储等基础设施层</li><li>基础设置的仓储层仅负责领域模型的取出和存储</li><li>使用<code>CQRS</code>模型设计应用层</li><li><code>Web API</code>是面向前端的交互接口，避免依赖领域模型</li><li>将共享代码设计为共享包，使用私有<code>NuGet</code>仓库来分发管理</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%88%86%e5%b1%82&quot;&gt;分层&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%80%bb%e7%bb%93&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;分层&quot;&gt;&lt;a href=&quot;#分层&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
      <category term="微服务" scheme="http://www.dimsum.fun/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(14) -- 异常处理中间件：区分真异常与逻辑一场</title>
    <link href="http://www.dimsum.fun/2020/04/02/14.Exception_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/14.Exception_document/</id>
    <published>2020-04-02T14:17:00.000Z</published>
    <updated>2020-05-14T14:56:30.036Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%a4%84%e7%90%86%e5%bc%82%e5%b8%b8%e7%9a%84%e6%96%b9%e5%bc%8f">处理异常的方式</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e6%b3%a8%e9%87%8a%e6%8e%89%e7%b3%bb%e7%bb%9f%e8%87%aa%e5%b8%a6%e7%9a%84%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e4%b8%ad%e9%97%b4%e4%bb%b6">注释掉系统自带的异常处理中间件</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84%e5%bc%82%e5%b8%b8%e7%b1%bb">创建自定义的异常类</a><ul><li><a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%88%9b%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84%e5%bc%82%e5%b8%b8%e7%b1%bb">为什么要创建自定义的异常类</a></li><li><a href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bc%82%e5%b8%b8%e7%b1%bb">自定义异常类</a></li></ul></li><li><a href="#%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e9%a1%b5%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">异常处理页代码实现</a></li><li><a href="#%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e5%8c%bf%e5%90%8d%e5%a7%94%e6%89%98%e6%96%b9%e6%b3%95%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">异常处理匿名委托方法代码实现</a></li><li><a href="#iexceptionfilter%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0"><code>IExceptionFilter</code>代码实现</a></li><li><a href="#exceptionfilterattribute%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0"><code>ExceptionFilterAttribute</code>代码实现</a></li></ul></li><li><a href="#%e6%80%bb%e7%bb%93">总结</a></li></ul><h1 id="处理异常的方式"><a href="#处理异常的方式" class="headerlink" title="处理异常的方式"></a>处理异常的方式</h1><ul><li>异常处理页</li><li>异常处理匿名委托方法</li><li><code>IExceptionFilter</code></li><li><code>ExceptionFilterAttribute</code></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ExceptionDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="注释掉系统自带的异常处理中间件"><a href="#注释掉系统自带的异常处理中间件" class="headerlink" title="注释掉系统自带的异常处理中间件"></a>注释掉系统自带的异常处理中间件</h2><p>在<code>Startup.Configure</code>中有<code>app.UseDeveloperExceptionPage();</code>这个中间件，这个就是<code>ASP.NET Core</code>自带的一个异常处理页，但是这个页面错误信息太多，只适合开发时对开发人员进行提示，不适合放到生产环境，所以这里注释掉这个中间件</p><h2 id="创建自定义的异常类"><a href="#创建自定义的异常类" class="headerlink" title="创建自定义的异常类"></a>创建自定义的异常类</h2><h3 id="为什么要创建自定义的异常类"><a href="#为什么要创建自定义的异常类" class="headerlink" title="为什么要创建自定义的异常类"></a>为什么要创建自定义的异常类</h3><p>通常情况下我们系统里面的异常与我们业务逻辑里的异常是不同的，业务逻辑上的判断异常，比如输入的参数不合法、订单状态不符合条件，当前账户余额不足这样的错误信息，我们有两种处理方式，一种处理方式是对不同的逻辑输出不同的业务对象，还有一种方式就是对于这种业务逻辑输出一个异常，用异常来承载我们的逻辑的特殊分支，那这个时候<strong>我们就需要识别出哪些是我们的业务异常，哪些是我们不确定的未知异常</strong>，比如网络突发的无法连接、MySql的闪断之类的</p><p>那这里怎么识别出哪些是业务异常，哪些是未知异常？</p><p>首先通过定义一个接口，接口里有错误码和错误信息，当我们有一个业务出现异常，我们可以人为的抛出一个已经实现了这个接口的自定义异常类。然后在异常处理过程中，我们尝试将捕获到的异常转为我们定义的异常接口，如果能转成功，说明这个异常是我们认为抛出的业务异常，否则为系统抛出的未知异常</p><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>在项目根目录创建文件夹<code>Exceptions</code>，所有异常的自定义类都放在这里</p><p>创建<code>IKnownException</code>接口，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IKnownException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> Message &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ErrorCode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">object</span>[] ErrorData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>KnownException</code>类，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KnownException</span>:<span class="title">IKnownException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">KnownException</span>(<span class="params"><span class="keyword">object</span>[] errorData, <span class="keyword">int</span> errorCode, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ErrorData = errorData;</span><br><span class="line">            ErrorCode = errorCode;</span><br><span class="line">            Message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Message &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ErrorCode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span>[] ErrorData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> IKnownException UnKnown = <span class="keyword">new</span> KnownException(errorData: <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; &#125;, errorCode: <span class="number">9999</span>, message: <span class="string">"未知错误"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IKnownException <span class="title">FromKnownException</span>(<span class="params">IKnownException exception</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KnownException(errorData: exception.ErrorData, errorCode: exception.ErrorCode, message: exception.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试用的<code>InvalidParameterException</code>类，用来模拟参数错误的异常，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvalidParameterException</span>: <span class="title">Exception</span>,<span class="title">IKnownException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InvalidParameterException</span>(<span class="params"><span class="keyword">int</span> errorCode, <span class="keyword">string</span> message, <span class="keyword">params</span> <span class="keyword">object</span>[] errorData</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ErrorCode = errorCode;</span><br><span class="line">            ErrorData = errorData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ErrorCode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span>[] ErrorData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理页代码实现"><a href="#异常处理页代码实现" class="headerlink" title="异常处理页代码实现"></a>异常处理页代码实现</h2><p>创建处理页面控制器<code>ErrorController</code>，在<code>Index</code>方法中获取到当前请求上下文的异常信息，并尝试进行转成<code>IKnownException</code>，如果转成功则表示为业务逻辑异常，如果失败则表示为未知异常，未知异常则通过<code>KnownException</code>的静态方法生成一个特定的未知异常对象，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ExceptionDemo.Exceptions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ErrorController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ErrorController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ErrorController</span>(<span class="params">ILogger&lt;ErrorController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Route(<span class="meta-string">"/error"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> exceptionHandlerPathFeature = HttpContext.Features.Get&lt;IExceptionHandlerPathFeature&gt;();</span><br><span class="line">            <span class="keyword">var</span> ex = exceptionHandlerPathFeature?.Error;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> knownException = ex <span class="keyword">as</span> IKnownException;</span><br><span class="line">            <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                 _logger.LogError(ex,ex.Message);</span><br><span class="line">                 knownException = KnownException.UnKnown;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> View(knownException);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的试图<code>Index.cshtml</code>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@model ExceptionDemo.Exceptions.IKnownException</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>错误码：@Model.ErrorCode<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>错误信息：@Model.Message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到<code>Startup</code>，对<code>ConfigureServices</code>和<code>Configure</code>两个方法做出调整，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseExceptionHandler(<span class="string">"/error"</span>);</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换到<code>WeatherForecastController</code>，在这里来主动抛出异常，将<code>Get</code>方法修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="number">65</span>, <span class="string">"参数有误"</span>, <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;() &#123;<span class="string">"exception info 1"</span>,<span class="string">"exception info 2"</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/weatherforecast</code>，可以看到返回了以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误码：65</span><br><span class="line"></span><br><span class="line">错误信息：参数有误</span><br></pre></td></tr></table></figure><p>将<code>WeatherForecastController.Get</code>里的异常换成一个普通的异常，在重新运行代码，可以看到页面会变成<code>未知错误</code>的提示，同时控制台打印出来的日志是完全的异常日志</p><h2 id="异常处理匿名委托方法代码实现"><a href="#异常处理匿名委托方法代码实现" class="headerlink" title="异常处理匿名委托方法代码实现"></a>异常处理匿名委托方法代码实现</h2><p>将<code>Startup.Configure</code>方法中的<code>app.UseExceptionHandler(&quot;/error&quot;);</code>注释掉，原位置新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.UseExceptionHandler(errApp =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    errApp.Run(<span class="keyword">async</span> context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> exceptionHandlerPathFeature = context.Features.Get&lt;IExceptionHandlerPathFeature&gt;();</span><br><span class="line">        <span class="keyword">var</span> knownException = exceptionHandlerPathFeature.Error <span class="keyword">as</span> IKnownException;</span><br><span class="line">        <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> logger = context.RequestServices.GetService&lt;ILogger&lt;Startup&gt;&gt;();</span><br><span class="line">            logger.LogError(exceptionHandlerPathFeature.Error, exceptionHandlerPathFeature.Error.Message);</span><br><span class="line">            knownException = KnownException.UnKnown;</span><br><span class="line">            context.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">            context.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> jsonOptions = context.RequestServices.GetService&lt;IOptions&lt;JsonOptions&gt;&gt;();</span><br><span class="line">        context.Response.ContentType = <span class="string">"application/json; charset=utf-8"</span>;</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(JsonSerializer.Serialize(knownException, jsonOptions.Value.JsonSerializerOptions));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里的操作与异常处理页逻辑差不多，只是不再返回视图，而是返回<code>json</code>，同时设定好业务逻辑异常返回200状态码，未知异常返回500状态码(这样做的好处后面说明)，运行代码，访问<code>/weatherforecast</code>，通过修改抛出异常，可看到对应的返回结果</p><h2 id="IExceptionFilter代码实现"><a href="#IExceptionFilter代码实现" class="headerlink" title="IExceptionFilter代码实现"></a><code>IExceptionFilter</code>代码实现</h2><p>在<code>Exceptions</code>文件夹新建<code>MyExceptionFilter.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyExceptionFilter</span>:<span class="title">IExceptionFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> knownException = context.Exception <span class="keyword">as</span> IKnownException;</span><br><span class="line">            <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> logger = context.HttpContext.RequestServices.GetService&lt;ILogger&lt;MyExceptionFilter&gt;&gt;();</span><br><span class="line">                logger.LogError(context.Exception,context.Exception.Message);</span><br><span class="line">                knownException = KnownException.UnKnown;</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Result = <span class="keyword">new</span> JsonResult(knownException)</span><br><span class="line">            &#123;</span><br><span class="line">                ContentType = <span class="string">"application/json; charset=utf-8"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对异常的处理逻辑与异常处理匿名委托方法一样</p><p>修改<code>Startup</code>的<code>ConfigureServices</code>、<code>Configure</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews(options =&gt; &#123; options.Filters.Add&lt;MyExceptionFilter&gt;(); &#125;).AddJsonOptions(</span><br><span class="line">        options =&gt; &#123; options.JsonSerializerOptions.Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line"></span><br><span class="line">    app.UseRouting();</span><br><span class="line"></span><br><span class="line">    app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/weatherforecast</code>，通过修改抛出异常，可看到对应的返回结果</p><h2 id="ExceptionFilterAttribute代码实现"><a href="#ExceptionFilterAttribute代码实现" class="headerlink" title="ExceptionFilterAttribute代码实现"></a><code>ExceptionFilterAttribute</code>代码实现</h2><p>在<code>Exceptions</code>中新建<code>MyExceptionFilterAttribute.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyExceptionFilterAttribute</span> : <span class="title">ExceptionFilterAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> knownException = context.Exception <span class="keyword">as</span> IKnownException;</span><br><span class="line">            <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> logger = context.HttpContext.RequestServices.GetService&lt;ILogger&lt;MyExceptionFilterAttribute&gt;&gt;();</span><br><span class="line">                logger.LogError(context.Exception, context.Exception.Message);</span><br><span class="line">                knownException = KnownException.UnKnown;</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Result = <span class="keyword">new</span> JsonResult(knownException)</span><br><span class="line">            &#123;</span><br><span class="line">                ContentType = <span class="string">"application/json; charset=utf-8"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>Startup</code>的<code>ConfigureServices</code>、<code>Configure</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>WeatherForecastController</code>中添加类特性，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ExceptionDemo.Exceptions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line">    [<span class="meta">MyExceptionFilter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"Freezing"</span>, <span class="string">"Bracing"</span>, <span class="string">"Chilly"</span>, <span class="string">"Cool"</span>, <span class="string">"Mild"</span>, <span class="string">"Warm"</span>, <span class="string">"Balmy"</span>, <span class="string">"Hot"</span>, <span class="string">"Sweltering"</span>, <span class="string">"Scorching"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="number">65</span>, <span class="string">"参数有误！！！"</span>, <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;() &#123;<span class="string">"exception info 1"</span>,<span class="string">"exception info 2"</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/weatherforecast</code>，通过修改抛出异常，可看到对应的返回结果</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>用特定的异常类或接口表示业务逻辑异常</li><li>为业务逻辑异常定义全局错误码</li><li>为未知异常定义特定的输出信息和错误码，不应该输出系统内部的异常堆栈</li><li>对已知的业务逻辑异常相应<code>HTTP 200</code>，这样对监控系统友好，不会区分不开真异常和逻辑异常</li><li>对于未预见的异常相应<code>HTTP 500</code></li><li>为所有异常记录详细的日志</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%a4%84%e7%90%86%e5%bc%82%e5%b8%b8%e7%9a%84%e6%96%b9%e5%bc%8f&quot;&gt;处理异常的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%a3%e7%a0%81%e5%ae%
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(13) -- 中间件：掌握请求处理过程的关键</title>
    <link href="http://www.dimsum.fun/2020/04/02/13.Middleware_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/13.Middleware_document/</id>
    <published>2020-04-02T10:12:00.000Z</published>
    <updated>2020-04-02T17:11:23.323Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1">核心对象</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e7%9b%b4%e6%8e%a5%e6%b3%a8%e5%85%a5%e5%a7%94%e6%89%98">直接注入委托</a></li><li><a href="#%e5%af%b9%e7%89%b9%e5%ae%9a%e8%b7%af%e5%be%84%e6%b3%a8%e5%86%8c%e7%89%b9%e5%ae%9a%e4%b8%ad%e9%97%b4%e4%bb%b6">对特定路径注册特定中间件</a></li><li><a href="#%e5%af%b9%e7%89%b9%e5%ae%9a%e8%b7%af%e5%be%84%e6%b3%a8%e5%86%8c%e4%b8%ad%e9%97%b4%e4%bb%b6%e5%8d%87%e7%ba%a7%e7%89%88">对特定路径注册中间件升级版</a></li><li><a href="#%e4%bd%bf%e7%94%a8%e6%89%a9%e5%b1%95%e6%96%b9%e6%b3%95%e6%9d%a5%e6%b3%a8%e5%86%8c%e4%b8%ad%e9%97%b4%e4%bb%b6%e6%9c%80%e4%bd%b3%e5%a7%bf%e5%8a%bf">使用扩展方法来注册中间件(最佳姿势)</a></li></ul></li></ul><h1 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h1><ul><li><code>IApplicationBuilder</code>：让我们注册我们自己的中间件</li><li><code>RequestDelegate</code>：我们处理整个请求的委托</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>MiddlewareDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="直接注入委托"><a href="#直接注入委托" class="headerlink" title="直接注入委托"></a>直接注入委托</h2><p><code>Startup.Configure</code>方法里，在<code>app.UseHttpsRedirection()</code>中间件之前添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Hello world -- my middleware in delegate"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行代码访问<code>/WeatherForecast</code>，可以看到原本的json后面会添加<code>Hello world -- my middleware in delegate</code>这句话</p><h2 id="对特定路径注册特定中间件"><a href="#对特定路径注册特定中间件" class="headerlink" title="对特定路径注册特定中间件"></a>对特定路径注册特定中间件</h2><p>注释掉上面的代码，在原处新增以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.Map(<span class="string">"/abc"</span>, builder =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    builder.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Hello world abc -- from map middleware"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行代码访问<code>/WeatherForecast</code>，结果与初始项目运行一致，访问<code>/abc</code>，页面会返回<code>Hello world abc -- from map middleware</code></p><h2 id="对特定路径注册中间件升级版"><a href="#对特定路径注册中间件升级版" class="headerlink" title="对特定路径注册中间件升级版"></a>对特定路径注册中间件升级版</h2><p>当这个特定路径的判断比较复杂，可以使用<code>MapWhen</code>来注册，注释掉上一步代码，在原处新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.MapWhen(context =&gt; &#123; <span class="keyword">return</span> context.Request.Query.Keys.Contains(<span class="string">"abc"</span>); &#125;, builder =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    builder.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Hello world query abc -- from mapWhen middleware"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里表示当url参数里包含<code>abc</code>这个函数，则触发指定的中间件，运行代码，运行代码访问<code>/WeatherForecast</code>，结果与初始项目运行一致，访问<code>/WeatherForecast?abc=aaa</code>，会在原有的返回结果后面添加<code>Hello world query abc -- from mapWhen middleware</code></p><h2 id="使用扩展方法来注册中间件-最佳姿势"><a href="#使用扩展方法来注册中间件-最佳姿势" class="headerlink" title="使用扩展方法来注册中间件(最佳姿势)"></a>使用扩展方法来注册中间件(最佳姿势)</h2><p>自定义中间件是按约定来调用的，即中间件里需要包含一个<code>InvokeAsync</code>方法，方法参数为<code>HttpContext</code>，通常中间件不直接对外暴露，所以类的访问修饰符通常是默认的<code>internal</code>，然后通过<code>IApplicationBuilder</code>的扩展方法向外暴露</p><p>在根目录创建文件夹<code>Middlewares/MyMiddleware</code>，在目录下创建两个文件<code>MyMiddleware.cs</code>和<code>MyMiddlewareExtension.cs</code>，具体代码如下：</p><p><code>MyMiddleware.cs</code>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MiddlewareDemo.Middlewares.MyMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;MyMiddleware&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyMiddleware</span>(<span class="params">RequestDelegate next,ILogger&lt;MyMiddleware&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _next = next;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (_logger.BeginScope(<span class="string">"TraceIdentifier:&#123;TraceIdentifier&#125;"</span>,context.TraceIdentifier))</span><br><span class="line">            &#123;</span><br><span class="line">                _logger.LogDebug(<span class="string">"开始执行MyMiddleware中间件"</span>);</span><br><span class="line">                <span class="keyword">await</span> _next(context);</span><br><span class="line">                _logger.LogDebug(<span class="string">"执行MyMiddleware中间件结束"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyMiddlewareExtension.cs</code>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MiddlewareDemo.Middlewares.MyMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyMiddlewareExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseMyMiddleware</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> app.UseMiddleware&lt;MyMiddleware&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里使用了日志作用域，所以还需要到<code>appsettings.json</code>里修改以下日志配置，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Trace"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"IncludeScopes"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"MiddlewareDemo.Middlewares.MyMiddleware.MyMiddleware"</span>: <span class="string">"Trace"</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到<code>Startup.Configure</code>，注释掉前面的测试代码，在原处新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseMyMiddleware();</span><br></pre></td></tr></table></figure><p>运行项目，访问<code>/WeatherForecast</code>，可以看到控制台打印出了对应的日志</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1&quot;&gt;核心对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&quot;&gt;代码实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(17) -- 路由与终结点：如何规划好你的Web API</title>
    <link href="http://www.dimsum.fun/2020/04/02/17.Routing_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/17.Routing_document/</id>
    <published>2020-04-02T08:02:00.000Z</published>
    <updated>2020-04-03T08:34:59.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由注册方式"><a href="#路由注册方式" class="headerlink" title="路由注册方式"></a>路由注册方式</h1><ul><li>路由模板的方式</li><li>RouteAttribute方式</li></ul><h1 id="路由约束"><a href="#路由约束" class="headerlink" title="路由约束"></a>路由约束</h1><ul><li>类型约束</li><li>范围约束</li><li>正则表达式</li><li>是否必选</li><li>自定义<code>IRouteConstraint</code></li></ul><h1 id="Url生成"><a href="#Url生成" class="headerlink" title="Url生成"></a>Url生成</h1><ul><li><code>LinkGenerator</code></li><li><code>IUrlHelper</code></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>RoutingDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，为了方便演示，这里配置了<code>swagger</code>的组件，需要引入以下的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swashbuckle.AspNetCore</span><br></pre></td></tr></table></figure><p>然后右键项目名称-&gt;属性-&gt;生成-&gt;输出，勾选上<code>XML文档文件</code></p><p>回到<code>Startup.ConfigureServices</code>方法，在<code>services.AddControllers();</code>后面新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> OpenApiInfo() &#123;Title = <span class="string">"My API"</span>, Version = <span class="string">"v1"</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> xmlFile = <span class="string">$"<span class="subst">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml"</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);</span><br><span class="line">    c.IncludeXmlComments(xmlPath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>Startup.Configure</code>的<code>if(env.IsDevelopment()){...}</code>这个<code>if</code>判断后面，新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger();</span><br><span class="line">app.UseSwaggerUI(c =&gt; &#123; c.SwaggerEndpoint(<span class="string">"/swagger/v1/swagger.json"</span>, <span class="string">"My API V1"</span>); &#125;);</span><br></pre></td></tr></table></figure><h2 id="添加测试控制器"><a href="#添加测试控制器" class="headerlink" title="添加测试控制器"></a>添加测试控制器</h2><p>新增控制器<code>OrderController</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RoutingDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 订单控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"api/[controller]/[action]"</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 订单是否存在</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>必须可以转为long<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment">//[HttpGet("&#123;id:MyRouteConstraint&#125;")]</span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;id:isLong&#125;"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">OrderExist</span>(<span class="params">[FromRoute]<span class="keyword">string</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 订单最大数量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>最大20<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="linkGenerator"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;id:max(20)&#125;"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Max</span>(<span class="params"><span class="keyword">long</span> id, [FromServices] LinkGenerator linkGenerator</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> a = linkGenerator.GetPathByAction(<span class="string">"Reque"</span>, <span class="string">"Order"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para name="ss"&gt;</span>必填<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;name:required&#125;"</span>)</span>]</span><br><span class="line">        [<span class="meta">Obsolete</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Reque</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="number"&gt;</span>以三个数字开始<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;number:regex(^\\d&#123;&#123;3&#125;&#125;$)&#125;"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Number</span>(<span class="params"><span class="keyword">string</span> number</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义路由约束"><a href="#自定义路由约束" class="headerlink" title="自定义路由约束"></a>自定义路由约束</h2><p>在项目根目录新增<code>Constraint</code>文件夹，在文件夹里新增<code>MyRouteConstraint.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RoutingDemo.Constraint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyRouteConstraint</span>:<span class="title">IRouteConstraint</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Match</span>(<span class="params">HttpContext httpContext, IRouter route, <span class="keyword">string</span> routeKey, RouteValueDictionary values,</span></span></span><br><span class="line"><span class="function"><span class="params">            RouteDirection routeDirection</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (RouteDirection.IncomingRequest == routeDirection)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> v = values[routeKey];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">long</span>.TryParse(v.ToString(), <span class="keyword">out</span> <span class="keyword">var</span> <span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义路由约束注册到框架中，在<code>Startup.ConfigureServices</code>方法里追加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddRouting(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.ConstraintMap.Add(<span class="string">"isLong"</span>, <span class="keyword">typeof</span>(MyRouteConstraint));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/swagger</code>，即可以看到路由配置的情况</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Restful不是必须的</li><li>约定好API的表达契约</li><li>将API约束在特定的目录下，如<code>/api/</code></li><li>使用<code>ObsoleteAttribute</code>标记即将废弃的API</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由注册方式&quot;&gt;&lt;a href=&quot;#路由注册方式&quot; class=&quot;headerlink&quot; title=&quot;路由注册方式&quot;&gt;&lt;/a&gt;路由注册方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;路由模板的方式&lt;/li&gt;
&lt;li&gt;RouteAttribute方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(12) -- 结构化日志组件Serilog：记录对查询分析友好的日志</title>
    <link href="http://www.dimsum.fun/2020/04/02/12.LoggingSerilog_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/12.LoggingSerilog_document/</id>
    <published>2020-04-02T06:12:00.000Z</published>
    <updated>2020-04-02T17:12:26.749Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%bb%93%e6%9e%84%e5%8c%96%e6%97%a5%e5%bf%97%e7%9a%84%e5%a5%bd%e5%a4%84">结构化日志的好处</a></li><li><a href="#%e4%b8%bb%e8%a6%81%e5%9c%ba%e6%99%af">主要场景</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e7%94%a8serilog%e6%9b%bf%e6%8d%a2%e8%87%aa%e5%b8%a6%e7%9a%84%e6%97%a5%e5%bf%97%e6%a1%86%e6%9e%b6">用Serilog替换自带的日志框架</a></li><li><a href="#%e4%bf%ae%e6%94%b9appsettingsjson%e6%96%87%e4%bb%b6">修改<code>appsettings.json</code>文件</a></li><li><a href="#%e8%be%93%e5%87%ba%e6%97%a5%e5%bf%97">输出日志</a></li></ul></li></ul><h1 id="结构化日志的好处"><a href="#结构化日志的好处" class="headerlink" title="结构化日志的好处"></a>结构化日志的好处</h1><ul><li>易于检索</li><li>易于分析统计</li></ul><h1 id="主要场景"><a href="#主要场景" class="headerlink" title="主要场景"></a>主要场景</h1><ul><li>实现日志告警</li><li>实现上下文的关联</li><li>实现与追踪系统集成</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>LoggingSerilogDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，因为使用的日志结构化组件为<code>Serilog</code>，所以需要引入以下的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serilog.AspNetCore</span><br></pre></td></tr></table></figure><h2 id="用Serilog替换自带的日志框架"><a href="#用Serilog替换自带的日志框架" class="headerlink" title="用Serilog替换自带的日志框架"></a>用Serilog替换自带的日志框架</h2><p>修改<code>Program</code>类，让Serilog替换掉<code>ASP.NET Core</code>自带的日志框架，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Serilog;</span><br><span class="line"><span class="keyword">using</span> Serilog.Formatting.Compact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSerilogDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">            .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .AddJsonFile(<span class="string">$"appsettings<span class="subst">&#123;Environment.GetEnvironmentVariable(<span class="string">"ASPNETCORE_ENVIRONMENT"</span>) ?? <span class="string">"Production"</span>&#125;</span>.json"</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .AddEnvironmentVariables()</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">                .ReadFrom.Configuration(Configuration)</span><br><span class="line">                .MinimumLevel.Debug()</span><br><span class="line">                .Enrich.FromLogContext()</span><br><span class="line">                .WriteTo.Console(<span class="keyword">new</span> RenderedCompactJsonFormatter())</span><br><span class="line">                .WriteTo.File(formatter: <span class="keyword">new</span> CompactJsonFormatter(), <span class="string">"logs\\log.txt"</span>, rollingInterval: RollingInterval.Day)</span><br><span class="line">                .CreateLogger();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Log.Information(<span class="string">"Starting web host"</span>);</span><br><span class="line">                CreateHostBuilder(args).Build().Run();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Fatal(ex,<span class="string">"Host terminated unexpectedly"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Log.CloseAndFlush();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt; &#123; webBuilder.UseStartup&lt;Startup&gt;(); &#125;)</span><br><span class="line">                .UseSerilog(dispose: <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：</p><ol><li>新建<code>Configuration</code>静态属性，直接读取<code>appsettings.json</code>的配置</li><li><code>new LoggerConfiguration</code>是创建一个<code>Serilog</code>的<code>logger</code>对象，调的各种方法是进行日志配置</li><li><code>CreateHostBuilder</code>的时候用<code>try...catch</code>包住是确保应用程序从开启到结束都有日志输出，包括启动失败，最后<code>Log.CloseAndFlush()</code>表示应用程序结束时会释放日志资源</li><li><code>UseSerilog</code>表示正式引入<code>Serilog</code>组件，<code>dispose:true</code>表示应用程序关闭之后会自动释放日志资源</li></ol><h2 id="修改appsettings-json文件"><a href="#修改appsettings-json文件" class="headerlink" title="修改appsettings.json文件"></a>修改<code>appsettings.json</code>文件</h2><p>在<code>appsettings.json</code>文件中新增<code>Serilog</code>节点，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"Serilog"</span>: &#123;</span><br><span class="line">    <span class="attr">"MinimumLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Override"</span>: &#123;</span><br><span class="line">        <span class="attr">"Microsoft"</span>: <span class="string">"Information"</span>,</span><br><span class="line">        <span class="attr">"System"</span>: <span class="string">"Information"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h2><p>在<code>WeatherForecastController.Get</code>方法中新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_logger.LogInformation(<span class="string">"This is information log"</span>);</span><br></pre></td></tr></table></figure><p>运行项目，可以看到控制台打印出了结构化的日志，同时在项目根目录也有一个<code>logs</code>文件夹，进入文件夹可以看到日志文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%bb%93%e6%9e%84%e5%8c%96%e6%97%a5%e5%bf%97%e7%9a%84%e5%a5%bd%e5%a4%84&quot;&gt;结构化日志的好处&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%bb%e8%a6
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(16) -- 文件提供程序：让你可以将文件放在任何地方</title>
    <link href="http://www.dimsum.fun/2020/04/02/16.FileProvider_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/16.FileProvider_document/</id>
    <published>2020-04-02T04:30:00.000Z</published>
    <updated>2020-04-03T08:34:56.257Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h1><ul><li><code>IFileProvider</code>：用来访问各种各样文件的提供程序的接口，通过这样抽象的定义，让我们与具体的文件的读取代码进行隔离，这样的好处是我们可以从不同的地方读取文件，不仅仅是本地物理文件，也可以是嵌入式文件，甚至是云端上面的其他API提供的文件</li><li><code>IFileInfo</code></li><li><code>IDirectoryContents</code></li></ul><h1 id="内置文件提供程序"><a href="#内置文件提供程序" class="headerlink" title="内置文件提供程序"></a>内置文件提供程序</h1><ul><li><code>PhysicalFileProvider</code>：物理文件的提供程序</li><li><code>EmbeddedFileProvider</code>：嵌入式的提供程序</li><li><code>CompositeFileProvider</code>：组合文件的提供程序，当我们由多个数据源来提供文件的手，可以将这些源合并为一个目录</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>FileProviderDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下四个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.FileProviders.Abstractions</span><br><span class="line">Microsoft.Extensions.FileProviders.Composite</span><br><span class="line">Microsoft.Extensions.FileProviders.Embedded</span><br><span class="line">Microsoft.Extensions.FileProviders.Physical</span><br></pre></td></tr></table></figure><h2 id="创建PhysicalFileProvider"><a href="#创建PhysicalFileProvider" class="headerlink" title="创建PhysicalFileProvider"></a>创建<code>PhysicalFileProvider</code></h2><p>在<code>Program.Main</code>方法中新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phyProvider = <span class="keyword">new</span> PhysicalFileProvider(AppDomain.CurrentDomain.BaseDirectory);</span><br><span class="line"><span class="keyword">var</span> contents = phyProvider.GetDirectoryContents(<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> contents)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item.Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，可以看到控制台打印出类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FileProviderDemo.runtimeconfig.dev.json</span><br><span class="line">FileProviderDemo.runtimeconfig.json</span><br><span class="line">Microsoft.Extensions.FileProviders.Abstractions.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Composite.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Embedded.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Physical.dll</span><br><span class="line">Microsoft.Extensions.FileSystemGlobbing.dll</span><br><span class="line">Microsoft.Extensions.Primitives.dll</span><br></pre></td></tr></table></figure><h2 id="创建EmbeddedFileProvider"><a href="#创建EmbeddedFileProvider" class="headerlink" title="创建EmbeddedFileProvider"></a>创建<code>EmbeddedFileProvider</code></h2><p>在项目根目录创建一个<code>emb.html</code>的文件，右键<code>emb.html</code>文件-&gt;属性-&gt;生成操作选择为<code>嵌入的资源</code>，然后在上面的测试代码后面追加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> embProvider = <span class="keyword">new</span> EmbeddedFileProvider(<span class="keyword">typeof</span>(Program).Assembly);</span><br><span class="line"><span class="keyword">var</span> html = embProvider.GetFileInfo(<span class="string">"emb.html"</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$"获取到嵌入式文件:<span class="subst">&#123;html.Exists&#125;</span>"</span>);</span><br></pre></td></tr></table></figure><p>运行代码可以看到除了上一步打印的信息外，还有打印出了以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取到嵌入式文件:True</span><br></pre></td></tr></table></figure><h2 id="创建CompositeFileProvider"><a href="#创建CompositeFileProvider" class="headerlink" title="创建CompositeFileProvider"></a>创建<code>CompositeFileProvider</code></h2><p>继续上面的测试代码后面新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"=====↓CompositeFileProvider↓====="</span>);</span><br><span class="line"><span class="keyword">var</span> compositeProvider = <span class="keyword">new</span> CompositeFileProvider(phyProvider, embProvider);</span><br><span class="line"><span class="keyword">var</span> comContent = compositeProvider.GetDirectoryContents(<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> comContent)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item.Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码可以看到除了前两步打印的信息外，还打印了以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;↓CompositeFileProvider↓&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FileProviderDemo.deps.json</span><br><span class="line">FileProviderDemo.dll</span><br><span class="line">FileProviderDemo.exe</span><br><span class="line">FileProviderDemo.pdb</span><br><span class="line">FileProviderDemo.runtimeconfig.dev.json</span><br><span class="line">FileProviderDemo.runtimeconfig.json</span><br><span class="line">Microsoft.Extensions.FileProviders.Abstractions.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Composite.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Embedded.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Physical.dll</span><br><span class="line">Microsoft.Extensions.FileSystemGlobbing.dll</span><br><span class="line">Microsoft.Extensions.Primitives.dll</span><br><span class="line">emb.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;核心类型&quot;&gt;&lt;a href=&quot;#核心类型&quot; class=&quot;headerlink&quot; title=&quot;核心类型&quot;&gt;&lt;/a&gt;核心类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IFileProvider&lt;/code&gt;：用来访问各种各样文件的提供程序的接口，通过这样抽象的定义，
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(11) -- 日志框架：聊聊记日志的最佳姿势</title>
    <link href="http://www.dimsum.fun/2020/04/02/11.LoggingSimple_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/11.LoggingSimple_document/</id>
    <published>2020-04-02T03:12:00.000Z</published>
    <updated>2020-04-02T08:49:15.050Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a><ul><li><a href="#%e4%be%9d%e8%b5%96%e5%8c%85">依赖包</a></li><li><a href="#%e6%97%a5%e5%bf%97%e7%ba%a7%e5%88%ab">日志级别</a></li><li><a href="#%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95%e5%99%a8">日志记录器</a></li></ul></li><li><a href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b">代码示例</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e6%89%8b%e5%8a%a8%e5%88%9b%e5%bb%ba%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95%e5%99%a8">手动创建日志记录器</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6appsettingsjson">创建配置文件<code>appsettings.json</code></a></li><li><a href="#%e4%be%9d%e8%b5%96%e6%b3%a8%e5%85%a5%e5%88%9b%e5%bb%ba%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95%e5%99%a8">依赖注入创建日志记录器</a></li></ul></li><li><a href="#%e5%85%b3%e4%ba%8e%e6%97%a5%e5%bf%97%e4%bd%9c%e7%94%a8%e5%9f%9f">关于日志作用域</a><ul><li><a href="#%e6%97%a5%e5%bf%97%e4%bd%9c%e7%94%a8%e5%9f%9f%e7%9a%84%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af">日志作用域的使用场景</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e6%bc%94%e7%a4%ba">代码演示</a></li></ul></li><li><a href="#%e6%b3%a8%e6%84%8f">注意</a></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><p>对于输出到控制台的日志框架，主要依赖包有以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Logging</span><br><span class="line">Microsoft.Extensions.Logging.Console</span><br><span class="line">Microsoft.Extensions.Logging.Debug</span><br><span class="line">Microsoft.Extensions.Logging.TraceSource</span><br></pre></td></tr></table></figure><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p><code>.NET Core</code>中日志级别分<code>7</code>个级别，从低到高具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trace -&gt; Debug -&gt; Information -&gt; Warning -&gt; Error -&gt; Critical -&gt; None</span><br></pre></td></tr></table></figure><p>在配置中如果配置指定级别，则指定级别及以上的日志会被记录，低于指定级别的日志不会被记录，举例：配置项中指定级别为<code>Warning</code>，则只会记录<code>Warning</code>、<code>Error</code>、<code>Critical</code>这些日志，<code>Trace</code>、<code>Debug</code>、<code>Information</code>是不会记录下来，缺省默认配置为<code>Information</code>，如果指定为<code>None</code>级别则以为着不会有日志记录</p><h2 id="日志记录器"><a href="#日志记录器" class="headerlink" title="日志记录器"></a>日志记录器</h2><p>记录日志的级别是属于某个日志记录器的，通过<code>ILoggerFactory</code>的对象方法<code>CreateLogger</code>创建一个日志记录器，传入参数就是这个日志记录去的名字，在配置相中对应配置该日志记录器的日志级别，即可指定要哪个日志记录器需要记录到哪些级别的日志</p><p>通常正常开发比较少去自己创建日志记录器，都是通过构造函数获取依赖注入的对象<code>ILogger&lt;T&gt;</code>，这样获取到的日志记录器的名字为<code>项目名.类型名称</code>，按照这个规律就可以自行配置各个日志记录器的日志记录级别，下面会有代码示例</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>LoggingSimpleDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下五个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration.Json</span><br><span class="line">Microsoft.Extensions.Logging</span><br><span class="line">Microsoft.Extensions.Logging.Console</span><br><span class="line">Microsoft.Extensions.Logging.Debug</span><br><span class="line">Microsoft.Extensions.Logging.TraceSource</span><br></pre></td></tr></table></figure><p>这里引用<code>Microsoft.Extensions.Configuration.Json</code>这个包是因为记录日志的记录要从配置项中读取</p><h2 id="手动创建日志记录器"><a href="#手动创建日志记录器" class="headerlink" title="手动创建日志记录器"></a>手动创建日志记录器</h2><p>修改<code>Program.Main</code>，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = configurationBuilder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            serviceCollection.AddSingleton&lt;IConfigurationRoot&gt;(p =&gt; configurationRoot);</span><br><span class="line">            serviceCollection.AddLogging(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConfiguration(configurationRoot.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> loggerFactory = serviceProvider.GetService&lt;ILoggerFactory&gt;();</span><br><span class="line">            <span class="keyword">var</span> loggerA = loggerFactory.CreateLogger(<span class="string">"LoggerA"</span>);         </span><br><span class="line">            loggerA.LogDebug(<span class="number">2001</span>,<span class="string">"This is LoggerA -- logDebug"</span>);</span><br><span class="line">            loggerA.LogInformation(<span class="string">"This is LoggerA -- logInformation"</span>);</span><br><span class="line">            loggerA.LogError(<span class="keyword">new</span> Exception(<span class="string">"LoggerA Error"</span>),<span class="string">"This is LoggerA -- LogError"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>Main</code>方法中前三行代码是读取<code>appsettings.json</code>的配置项</li><li><code>new ServiceCollection()</code>是创建一个服务容器，然后将上面读到的服务注册到服务容器中去，有服务容器来管理配置项服务生命周期</li><li><code>serviceCollection.AddLogging()</code>是添加日志服务到服务容器中，<code>builder.AddConfiguration()</code>指的是日志使用的是配置框架里<code>Logging</code>的配置项，<code>builder.AddConsole()</code>是添加一个名字为<code>Console</code>的控制台日志到日志工厂中去</li><li><code>serviceCollection.BuildServiceProvider()</code>是生成一个服务容器实例</li><li><code>serviceProvider.GetService&lt;ILoggerFactory&gt;()</code>是从服务容器中获取一个<code>ILoggerFactory</code>的日志工厂对象</li><li><code>loggerFactory.CreateLogger(&quot;LoggerA&quot;)</code>是创建一个名字为<code>LoggerA</code>的日志记录器</li><li><code>LogDebug</code>、<code>LogInformation</code>、<code>LogError</code>则是记录对应级别的日志</li></ol><h2 id="创建配置文件appsettings-json"><a href="#创建配置文件appsettings-json" class="headerlink" title="创建配置文件appsettings.json"></a>创建配置文件<code>appsettings.json</code></h2><p>创建文件<code>appsettings.json</code>，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"LoggerA"</span>: <span class="string">"Trace"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>appsettings.json</code>拷贝到输出目录(可参照<code>文件配置提供程序</code>里的操作)，运行项目，可以看到控制台打出以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dbug: LoggerA[2001]</span><br><span class="line">      This is LoggerA -- logDebug</span><br><span class="line">info: LoggerA[0]</span><br><span class="line">      This is LoggerA -- logInformation</span><br><span class="line">fail: LoggerA[0]</span><br><span class="line">      This is LoggerA -- LogError</span><br><span class="line">System.Exception: LoggerA Error</span><br></pre></td></tr></table></figure><p>可以自行调整<code>appsettings.json</code>里的<code>LoggerA</code>配置来尝试不同级别的日志记录</p><h2 id="依赖注入创建日志记录器"><a href="#依赖注入创建日志记录器" class="headerlink" title="依赖注入创建日志记录器"></a>依赖注入创建日志记录器</h2><p>创建测试服务类<code>OrderService</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;OrderService&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>(<span class="params">ILogger&lt;OrderService&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">"Show Time &#123;time&#125;"</span>,DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Program.Main</code>方法中将<code>OrderService</code>注册进服务容器中，并获取出服务实例，调用<code>Show</code>方法，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = configurationBuilder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            serviceCollection.AddSingleton&lt;IConfigurationRoot&gt;(p =&gt; configurationRoot);</span><br><span class="line">            serviceCollection.AddTransient&lt;OrderService&gt;();</span><br><span class="line">            serviceCollection.AddLogging(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConfiguration(configurationRoot.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> loggerFactory = serviceProvider.GetService&lt;ILoggerFactory&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> loggerA = loggerFactory.CreateLogger(<span class="string">"LoggerA"</span>);</span><br><span class="line">            </span><br><span class="line">            loggerA.LogDebug(<span class="number">2001</span>,<span class="string">"This is LoggerA -- logDebug"</span>);</span><br><span class="line">            loggerA.LogInformation(<span class="string">"This is LoggerA -- logInformation"</span>);</span><br><span class="line">            loggerA.LogError(<span class="keyword">new</span> Exception(<span class="string">"LoggerA Error"</span>),<span class="string">"This is LoggerA -- LogError"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> orderService = serviceProvider.GetService&lt;OrderService&gt;();</span><br><span class="line">            orderService.Show();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>appsettings.json</code>，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"LoggerA"</span>: <span class="string">"Trace"</span>,</span><br><span class="line">        <span class="attr">"LoggingSimpleDemo.OrderService"</span>: <span class="string">"Trace"</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，可以看到控制台输出日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dbug: LoggerA[2001]</span><br><span class="line">      This is LoggerA -- logDebug</span><br><span class="line">info: LoggerA[0]</span><br><span class="line">      This is LoggerA -- logInformation</span><br><span class="line">fail: LoggerA[0]</span><br><span class="line">      This is LoggerA -- LogError</span><br><span class="line">System.Exception: LoggerA Error</span><br><span class="line">info: LoggingSimpleDemo.OrderService[0]</span><br><span class="line">      Show Time 04&#x2F;02&#x2F;2020 12:06:46</span><br></pre></td></tr></table></figure><p>也可以自行调整<code>appsettings.json</code>里的配置来尝试不同级别的日志记录</p><h1 id="关于日志作用域"><a href="#关于日志作用域" class="headerlink" title="关于日志作用域"></a>关于日志作用域</h1><h2 id="日志作用域的使用场景"><a href="#日志作用域的使用场景" class="headerlink" title="日志作用域的使用场景"></a>日志作用域的使用场景</h2><ul><li>一个事务包含多条操作时</li><li>复杂流程的日志关联时</li><li>调用链追踪与请求处理过程对应时</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>将上面获取日志记录器的代码注释掉，手动获取一个<code>Program</code>的日志记录器，然后创建日志作用域，具体代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = configurationBuilder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            serviceCollection.AddSingleton&lt;IConfigurationRoot&gt;(p =&gt; configurationRoot);</span><br><span class="line">            serviceCollection.AddTransient&lt;OrderService&gt;();</span><br><span class="line">            serviceCollection.AddLogging(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConfiguration(configurationRoot.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">                builder.AddDebug();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> loggerFactory = serviceProvider.GetService&lt;ILoggerFactory&gt;();</span><br><span class="line">            <span class="keyword">var</span> logger = loggerFactory.CreateLogger&lt;Program&gt;();</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> scope = logger.BeginScope(<span class="string">"scopeId=&#123;scopeId&#125;"</span>,Guid.NewGuid()))</span><br><span class="line">            &#123;</span><br><span class="line">                logger.LogTrace(<span class="string">"This is Trace in scope"</span>);</span><br><span class="line">                logger.LogInformation(<span class="string">"This is Information in scope"</span>);</span><br><span class="line">                logger.LogWarning(<span class="string">"This is Warning in scope"</span>);</span><br><span class="line">                logger.LogError(<span class="string">"This is Error in scope"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>appsettings.json</code>中添加<code>IncludeScopes</code>属性，具体代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"IncludeScopes"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"LoggerA"</span>: <span class="string">"Trace"</span>,</span><br><span class="line">        <span class="attr">"LoggingSimpleDemo.OrderService"</span>: <span class="string">"Trace"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，可以看到控制台打印出类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info: LoggingSimpleDemo.Program[0]</span><br><span class="line">      &#x3D;&gt; scopeId&#x3D;40c5bb84-584d-4a4c-a56b-f3b66214e1ac</span><br><span class="line">      This is Information in scope</span><br><span class="line">warn: LoggingSimpleDemo.Program[0]</span><br><span class="line">      &#x3D;&gt; scopeId&#x3D;40c5bb84-584d-4a4c-a56b-f3b66214e1ac</span><br><span class="line">      This is Warning in scope</span><br><span class="line">fail: LoggingSimpleDemo.Program[0]</span><br><span class="line">      &#x3D;&gt; scopeId&#x3D;40c5bb84-584d-4a4c-a56b-f3b66214e1ac</span><br><span class="line">      This is Error in scope</span><br></pre></td></tr></table></figure><p><strong>在<code>ASP.NET Core</code></strong>项目中，要启用日志作用域，一样只需要在配置文件中新增<code>IncludeScopes</code>属性即可</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>日志记录要避免敏感信息，如密码、密钥等</li><li>日志记录的时候最好用占位符的方式传参数，可以节省不必要的字符串拼接</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a6%82%e5%bf%b5&quot;&gt;概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%be%9d%e8%b5%96%e5%8c%85&quot;&gt;依赖包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%97%a5%e5%bf%97%e
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(15) -- 静态文件中间件：前后端分离开发合并部署骚操作</title>
    <link href="http://www.dimsum.fun/2020/04/02/15.StaticFiles_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/15.StaticFiles_document/</id>
    <published>2020-04-02T02:30:00.000Z</published>
    <updated>2020-04-03T08:34:52.046Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6%e4%b8%ad%e9%97%b4%e4%bb%b6%e7%9a%84%e8%83%bd%e5%8a%9b">静态文件中间件的能力</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e7%94%a8%e7%9a%84%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6">创建测试用的静态文件</a></li><li><a href="#%e9%bb%98%e8%ae%a4%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6%e4%b8%ad%e9%97%b4%e4%bb%b6">默认静态文件中间件</a></li><li><a href="#%e8%ae%be%e7%bd%ae%e9%bb%98%e8%ae%a4%e6%96%87%e4%bb%b6%e4%b8%baindexhtml">设置默认文件为index.html</a></li><li><a href="#%e6%94%af%e6%8c%81%e7%9b%ae%e5%bd%95%e6%b5%8f%e8%a7%88">支持目录浏览</a></li><li><a href="#%e5%a4%9a%e7%9b%ae%e5%bd%95%e6%98%a0%e5%b0%84">多目录映射</a></li></ul></li><li><a href="#%e5%8a%9f%e8%83%bd%e5%ae%9e%e7%8e%b0">功能实现</a></li></ul><h1 id="静态文件中间件的能力"><a href="#静态文件中间件的能力" class="headerlink" title="静态文件中间件的能力"></a>静态文件中间件的能力</h1><ul><li>支持指定相对路径</li><li>支持目录浏览</li><li>支持设置默认文档</li><li>支持多目录映射</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>StaticFilesDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="创建测试用的静态文件"><a href="#创建测试用的静态文件" class="headerlink" title="创建测试用的静态文件"></a>创建测试用的静态文件</h2><p>在根目录创建<code>wwwroot</code>文件夹，参照下面结构进行对应文件创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wwwroot</span><br><span class="line">    |-- app.js</span><br><span class="line">    |-- index.html</span><br><span class="line">    |-- a</span><br><span class="line">        |-- a.js</span><br><span class="line">        |-- index.html</span><br></pre></td></tr></table></figure><p>具体代码如下：</p><p>/wwwroot/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>静态首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是静态首页 wwwroot/index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/wwwroot/app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"这是/index.html"</span>)</span><br></pre></td></tr></table></figure><p>/wwwroot/a/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是/a/index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/wwwroot/a/a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"这是/a/index.html"</span>)</span><br></pre></td></tr></table></figure><h2 id="默认静态文件中间件"><a href="#默认静态文件中间件" class="headerlink" title="默认静态文件中间件"></a>默认静态文件中间件</h2><p>在<code>Startup.Configure</code>中，将以下代码添加到<code>app.UseHttpsRedirection();</code>下一行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseStaticFiles();</span><br></pre></td></tr></table></figure><p>运行项目访问<code>https://localhost:5001/index.html</code>和<code>https://localhost:5001/a/index.html</code>可看到静态页面信息</p><h2 id="设置默认文件为index-html"><a href="#设置默认文件为index-html" class="headerlink" title="设置默认文件为index.html"></a>设置默认文件为index.html</h2><p>能起到的效果如下：</p><p><code>https://localhost:5001</code> = <code>https://localhost:5001/index.html</code></p><p><code>https://localhost:5001/a</code> = <code>https://localhost:5001/a/index.html</code></p><p>在<code>app.UseStaticFiles();</code>前面添加以下代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseDefaultFiles();</span><br></pre></td></tr></table></figure><p>运行项目访问<code>https://localhost:5001</code>和<code>https://localhost:5001/a</code>可看到静态页面信息</p><h2 id="支持目录浏览"><a href="#支持目录浏览" class="headerlink" title="支持目录浏览"></a>支持目录浏览</h2><p>注释掉默认文件的那个中间件，添加目录浏览的中间件，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseDirectoryBrowser();</span><br></pre></td></tr></table></figure><p>然后在<code>Startup.ConfigureServices</code>配置目录浏览的服务，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddDirectoryBrowser();</span><br></pre></td></tr></table></figure><p>运行项目访问<code>https://localhost:5001</code>，可以看到<code>wwwroot</code>的目录结构</p><h2 id="多目录映射"><a href="#多目录映射" class="headerlink" title="多目录映射"></a>多目录映射</h2><p>当文件支持存在放<code>wwwroot</code>这个文件夹的时候，可以使用静态文件中间件的重载来映射其他文件夹，注释掉上一步的代码，将<code>Startup.Configure</code>修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">    app.UseStaticFiles(<span class="keyword">new</span> StaticFileOptions()</span><br><span class="line">    &#123;</span><br><span class="line">        FileProvider = <span class="keyword">new</span> PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), <span class="string">"file"</span>))</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    app.UseRouting();</span><br><span class="line"></span><br><span class="line">    app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录创建<code>file</code>文件夹，在里面创建个<code>file_page.html</code>文件，随便写点东西，运行项目，访问<code>https://localhost:5001/file_page.html</code>，可以看到静态页内容。注意，如果出现同名文件，则先注册的路径优先权更高，如果需要在访问指定文件夹有指定url地址，可以使用<code>StaticFileOptions</code>对象的<code>RequestPath</code>属性，假设这里的<code>RequestPath=&quot;/myfiles&quot;</code>，则说明要想访问<code>file</code>文件夹的内容，路径前面得加上<code>myfiles</code>，例如<code>https://localhost:5001/myfiles/file_page.html</code></p><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>有这样一个需求，接口里所有接口的路由都由<code>api</code>开始，即<code>/api/xxx</code>，静态文件放在默认的<code>wwwroot</code>文件夹中，如果访问的地址不是接口，同时也找不到对应的静态文件，则重写到<code>/index.html</code>页面，具体代码如下：</p><p>修改<code>WeatherForecastController</code>，将原本的<code>[Route(&quot;[controller]&quot;)]</code>修改为<code>[Route(&quot;/api/[controller]&quot;)]</code></p><p>修改<code>Startup.Configure</code>方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">    app.MapWhen(context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !context.Request.Path.Value.StartsWith(<span class="string">"/api"</span>);</span><br><span class="line">    &#125;, appBuilder =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> option = <span class="keyword">new</span> RewriteOptions();</span><br><span class="line">        option.AddRewrite(regex: <span class="string">".*"</span>, replacement: <span class="string">"/index.html"</span>, skipRemainingRules: <span class="literal">true</span>);</span><br><span class="line">        appBuilder.UseRewriter(option);</span><br><span class="line">        appBuilder.UseStaticFiles();</span><br><span class="line">    &#125;);</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，访问<code>https://localhost:5001/api/WeatherForecast</code>，可以看到正常返回接口信息，访问<code>https://localhost:5001/a/index.html</code>可以看到正常访问到<code>/a/index.html</code>文件内容，访问<code>https://localhost:5001/order/get</code>则会返回<code>/index.html</code>文件内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6%e4%b8%ad%e9%97%b4%e4%bb%b6%e7%9a%84%e8%83%bd%e5%8a%9b&quot;&gt;静态文件中间件的能力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>特基础教程系列</title>
    <link href="http://www.dimsum.fun/2020/04/01/StepByStep/"/>
    <id>http://www.dimsum.fun/2020/04/01/StepByStep/</id>
    <published>2020-04-01T14:18:00.000Z</published>
    <updated>2020-05-14T14:59:34.334Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#visual-studio-code">Visual Studio Code</a><ul><li><a href="#%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85">下载安装</a></li><li><a href="#%e5%85%b3%e4%ba%8e%e5%ae%89%e8%a3%85%e6%89%a9%e5%b1%95%e6%8f%92%e4%bb%b6">关于安装扩展插件</a></li><li><a href="#%e5%85%b3%e4%ba%8e%e6%b1%89%e5%8c%96">关于汉化</a></li></ul></li><li><a href="#%e5%b9%b3%e6%97%b6%e5%86%99%e9%9d%99%e6%80%81%e9%a1%b5%e6%b5%81%e7%a8%8b">平时写静态页流程</a></li><li><a href="#todo%e5%b8%b8%e7%94%a8%e7%9a%84vscode%e6%8f%92%e4%bb%b6">todo:常用的<code>vscode</code>插件</a></li><li><a href="#todo%e5%b8%b8%e7%94%a8%e7%9a%84vscode%e4%bb%a3%e7%a0%81%e6%ae%b5">todo:常用的<code>vscode</code>代码段</a></li></ul><h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>下载地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a>，下载之后双击安装即可</p><h2 id="关于安装扩展插件"><a href="#关于安装扩展插件" class="headerlink" title="关于安装扩展插件"></a>关于安装扩展插件</h2><p>如下图，点击左边的插件tab，输入插件名称进行搜索，然后点击<code>install</code>即可进行安装<br><img src="https://i.loli.net/2020/04/01/ONqmZth8iAbfECX.png" alt="微信截图_20200401235919.png"></p><h2 id="关于汉化"><a href="#关于汉化" class="headerlink" title="关于汉化"></a>关于汉化</h2><p><code>vscode</code>的汉化包使用的也是通过插件的形式来安装，搜索<code>chinese</code>，找到<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>这个插件进行安装，安装完重启即可</p><h1 id="平时写静态页流程"><a href="#平时写静态页流程" class="headerlink" title="平时写静态页流程"></a>平时写静态页流程</h1><ol><li><p>一般我会在电脑指定一个盘创建一个文件夹，指定这个文件夹存放自己的源码，无论个人电脑还是公司电脑，比如<code>G</code>盘里创建了<code>repo</code>的文件夹作为我统一管理源码的文件夹</p></li><li><p>通常自己写代码会分两种级别，一种是为了学习测试而写的demo，一种是比较有一定业务逻辑需求的小项目，所以一般会在<code>repo</code>文件夹下再创建两个文件夹，分别为<code>jiamiao.x.demo</code>和<code>jiamiao.x.project</code></p></li><li><p>注意一点，<strong>无论是在写<code>demo</code>还是写<code>project</code>，都不要出现类似<code>demo1</code>、<code>demo2</code>、<code>project1</code>、<code>project2</code>这种没意义的名字</strong>，以下以我写一段表单<code>demo</code>为例子：</p></li><li><p>在<code>G:/repo/jiamiao.x.demo</code>的文件夹中创建文件夹<code>form_demo</code>，然后再<code>form_demo</code>文件夹上右键，点击<code>通过Code打开</code></p></li><li><p>打开之后可以看到左边有文件夹的目录，当前现在是一片空白，如下图：</p><p><img src="https://i.loli.net/2020/04/02/TjLXCdGEiIoOxSR.png" alt="微信截图_20200402002810.png"></p></li><li><p>接下来在<code>vscode</code>中操作，在<code>FORM_DEMO</code>下方空白处右键，点击<code>新建文件</code>，输入<code>index.html</code>回车，可以看到创建了<code>index.html</code>文件，在右边的编辑区则可以进行编码，只要文件扩展名<code>.html</code>正确，则可以代码高亮和智能提示</p></li><li><p>当静态页需要引用图片、样式、脚本等，可以在<code>FORM_DEMO</code>下方空白处右键，点击<code>新建文件夹</code>，对应输入<code>image/style/script</code>等名字之后回车即可</p></li><li><p>写完页面之后，可以右键<code>index.html</code>文件，点击<code>Open In Default Browser</code>(需要安装插件<code>Open in Browser</code>)，直接打开浏览器来查看页面效果，如下图：</p><p><img src="https://i.loli.net/2020/04/02/kaPc2qStsbyi3DI.png" alt="dcfc42a87e4a4804531ffe3de29fd60.png"></p></li></ol><h1 id="todo-常用的vscode插件"><a href="#todo-常用的vscode插件" class="headerlink" title="todo:常用的vscode插件"></a>todo:常用的<code>vscode</code>插件</h1><h1 id="todo-常用的vscode代码段"><a href="#todo-常用的vscode代码段" class="headerlink" title="todo:常用的vscode代码段"></a>todo:常用的<code>vscode</code>代码段</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#visual-studio-code&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85&quot;&gt;下载安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="StepByStep" scheme="http://www.dimsum.fun/categories/StepByStep/"/>
    
    
      <category term="Visual Studio Code" scheme="http://www.dimsum.fun/tags/Visual-Studio-Code/"/>
    
      <category term="特基础" scheme="http://www.dimsum.fun/tags/%E7%89%B9%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
