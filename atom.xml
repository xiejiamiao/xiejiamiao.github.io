<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dimsum</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dimsum.fun/"/>
  <updated>2020-05-28T10:17:42.051Z</updated>
  <id>http://www.dimsum.fun/</id>
  
  <author>
    <name>Jiamiao.x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RabbitMq</title>
    <link href="http://www.dimsum.fun/2020/05/26/43.RabbitMq_document/"/>
    <id>http://www.dimsum.fun/2020/05/26/43.RabbitMq_document/</id>
    <published>2020-05-26T14:36:00.000Z</published>
    <updated>2020-05-28T10:17:42.051Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#主流消息中间件">主流消息中间件</a><ul><li><a href="#activemq">ActiveMQ</a></li><li><a href="#kafka">Kafka</a></li><li><a href="#rocketmq">RocketMQ</a></li><li><a href="#rabbitmq">RabbitMQ</a></li></ul></li><li><a href="#rabbitmq核心概念及amqp协议">RabbitMQ核心概念及AMQP协议</a><ul><li><a href="#为什么用rabbitmq">为什么用RabbitMQ</a></li><li><a href="#rabbitmq高性能的原因">RabbitMQ高性能的原因</a></li><li><a href="#什么是amqp">什么是AMQP</a></li><li><a href="#amqp核心概念">AMQP核心概念</a></li><li><a href="#rabbitmq整体架构">RabbitMQ整体架构</a></li><li><a href="#rabbitmq消息流转">RabbitMQ消息流转</a></li></ul></li><li><a href="#rabbitmq常用命令">RabbitMQ常用命令</a><ul><li><a href="#rabbitmq-server">rabbitmq-server</a></li><li><a href="#rabbitmqctl">rabbitmqctl</a><ul><li><a href="#用户相关">用户相关</a></li><li><a href="#virtual-host相关">virtual host相关</a></li><li><a href="#queue相关">queue相关</a></li><li><a href="#高级操作">高级操作</a></li></ul></li><li><a href="#rabbitmq-plugins">rabbitmq-plugins</a></li></ul></li><li><a href="#消息生产与消费">消息生产与消费</a><ul><li><a href="#重要概念">重要概念</a></li><li><a href="#创建项目">创建项目</a></li><li><a href="#具体代码">具体代码</a></li><li><a href="#运行测试">运行测试</a></li></ul></li><li><a href="#exchange--交换机">Exchange–交换机</a><ul><li><a href="#exchange属性交换机属性">Exchange属性(交换机属性)</a></li><li><a href="#direct-exchange">Direct Exchange</a><ul><li><a href="#代码示例">代码示例</a><ul><li><a href="#创建项目-1">创建项目</a></li><li><a href="#具体代码-1">具体代码</a></li></ul></li></ul></li><li><a href="#topic-exchange">Topic Exchange</a><ul><li><a href="#代码示例-1">代码示例</a><ul><li><a href="#创建项目-2">创建项目</a></li><li><a href="#具体代码-2">具体代码</a></li></ul></li></ul></li><li><a href="#fanout-exchange">Fanout Exchange</a><ul><li><a href="#代码示例-2">代码示例</a><ul><li><a href="#创建项目-3">创建项目</a></li><li><a href="#具体代码-3">具体代码</a></li></ul></li></ul></li></ul></li><li><a href="#binding--绑定">Binding–绑定</a></li><li><a href="#queue--消息队列">Queue–消息队列</a></li><li><a href="#message--消息">Message–消息</a></li><li><a href="#virtual-hots--虚拟主机">Virtual Hots–虚拟主机</a></li><li><a href="#rabbitmq高级特性">RabbitMQ高级特性</a><ul><li><a href="#消息是如何保障100的投递成功">消息是如何保障100%的投递成功</a><ul><li><a href="#生产端的可靠性投递">生产端的可靠性投递</a></li><li><a href="#具体解决方案">具体解决方案</a></li></ul></li><li><a href="#幂等性怎么避免重复消费">幂等性/怎么避免重复消费</a><ul><li><a href="#消费端-幂等性保障">消费端-幂等性保障</a></li><li><a href="#具体解决方案-1">具体解决方案</a></li></ul></li><li><a href="#confirm确认消息">Confirm确认消息</a><ul><li><a href="#代码示例-3">代码示例</a><ul><li><a href="#创建项目-4">创建项目</a></li><li><a href="#具体代码-4">具体代码</a></li></ul></li></ul></li><li><a href="#return返回消息">Return返回消息</a><ul><li><a href="#代码示例-4">代码示例</a><ul><li><a href="#创建项目-5">创建项目</a></li><li><a href="#具体代码-5">具体代码</a></li></ul></li></ul></li><li><a href="#自定义消费者">自定义消费者</a><ul><li><a href="#代码示例-5">代码示例</a><ul><li><a href="#创建项目-6">创建项目</a></li><li><a href="#具体代码-6">具体代码</a></li></ul></li></ul></li><li><a href="#消息的ack与重回队列">消息的ACK与重回队列</a><ul><li><a href="#消费端的手工ack和nack">消费端的手工ACK和NACK</a></li><li><a href="#消费端的重回队列">消费端的重回队列</a></li><li><a href="#代码示例-6">代码示例</a><ul><li><a href="#创建项目-7">创建项目</a></li><li><a href="#具体代码-7">具体代码</a></li></ul></li></ul></li></ul></li></ul><blockquote><p>源码：<a href="https://github.com/xiejiamiao/RabbitMQSample" target="_blank" rel="noopener">https://github.com/xiejiamiao/RabbitMQSample</a></p></blockquote><h1 id="主流消息中间件"><a href="#主流消息中间件" class="headerlink" title="主流消息中间件"></a>主流消息中间件</h1><p><strong>衡量MQ指标：服务性能、数据存储、集群架构</strong></p><h2 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h2><ul><li>ActiveMQ是Apache出品，最流行的、能力最强劲的开源消息总线，并且它是一个完全支持JMS规范的消息中间件</li><li>其丰富的API、多种集群构建模式使得它称为业界老牌消息中间件，在中小型企业中应用广泛</li><li>性能比较一般，面对大数量高并发的情况容易出现堵塞、消息堆积过多导致延迟</li><li>适合并发量不高的场景</li></ul><p>ActiveMQ的集群模式：<br><img src="https://i.loli.net/2020/05/27/UmneOgI2GSRY7Kp.png" alt="ActiveMQ集群模式.png"></p><h2 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h2><p>Kafka是LinkedIn开源的分布式发布-订阅消息系统，目前归属于Apache顶级项目。Kafka主要特点是基于Pull的模式来处理消息消费，追求高吞吐量(配置不高的单机服务器也能支撑每秒100K的吞吐数据量)，一开始的目的就是用于日志收集和传输。0.8版本开始支持复制，不支持事务，对消息的重复、丢失、错误没有严格要求，适合产生大量数据的互联网服务的数据收集业务</p><p>Kafka集群模式：<br><img src="https://i.loli.net/2020/05/27/K7ZvEM3S16XLDUr.png" alt="Kafka集群模式.png"></p><h2 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h2><p>RocketMQ是阿里开源的消息中间件，目前也已经孵化为Apache顶级项目，它是纯Java开发，具有高吞吐量、高可用性、适合大规模分布式系统应用的特点。RocketMQ思路起源于Kafka，它对消息的可靠传输和事务性做了优化，目前在阿里集团被广泛应用于交易、充值、流计算、消息推送、日志流式处理、binglog分布等场景</p><p>RocketMQ集群模式：<br><img src="https://i.loli.net/2020/05/27/SDQGuKW8sAz93RX.png" alt="RocketMQ集群模式.png"></p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是使用Erlang语言开发的开源消息队列系统，基于AMQP协议来实现。AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量的要求还在其次。</p><p>RabbitMQ高可用负载均衡集群模式：<br><img src="https://i.loli.net/2020/05/27/fGiY93JrbTU1xI7.png" alt="RbbitMQ高可用负载均衡集群.png"></p><h1 id="RabbitMQ核心概念及AMQP协议"><a href="#RabbitMQ核心概念及AMQP协议" class="headerlink" title="RabbitMQ核心概念及AMQP协议"></a>RabbitMQ核心概念及AMQP协议</h1><p><strong>RabbitMQ</strong>是一个开源的消息代理和队列服务器，用来通过普通协议在完全不同的应用之间共享数据，RabbitMQ是使用Erlang语言来编写的，并且RabbitMQ是基于AMQP协议的。</p><h2 id="为什么用RabbitMQ"><a href="#为什么用RabbitMQ" class="headerlink" title="为什么用RabbitMQ"></a>为什么用RabbitMQ</h2><ul><li>与<code>SpringAMQP</code>完美的整合、API丰富</li><li>集群模式丰富，表达式配置，HA模式，镜像队列模型</li><li>保证数据不丢失的前提下做到高可靠性、可用性</li></ul><h2 id="RabbitMQ高性能的原因"><a href="#RabbitMQ高性能的原因" class="headerlink" title="RabbitMQ高性能的原因"></a>RabbitMQ高性能的原因</h2><p><strong>Erlang语言</strong>最初在于交换机领域的架构模式，这使得RabbitMQ在Broker之间进行数据交互的性能是非常优秀的</p><p><strong>Erlang</strong>的优点：有着与原生Socket一样的延迟</p><h2 id="什么是AMQP"><a href="#什么是AMQP" class="headerlink" title="什么是AMQP"></a>什么是AMQP</h2><ul><li>AMQP全称：Advance Message Queuing Protocol（高级消息队列协议）</li><li>AMQP定义：具有现代特征的二进制协议。是一个提供统一消息的应用层标准高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</li><li>AMQP协议模型：<br><img src="https://i.loli.net/2020/05/27/KPqzXyw2lYTxs3Q.png" alt="AMQP协议模型.png"></li></ul><h2 id="AMQP核心概念"><a href="#AMQP核心概念" class="headerlink" title="AMQP核心概念"></a>AMQP核心概念</h2><ul><li><strong>Server</strong>：又称Broker，接受客户端的连接，实现AMQP实体服务</li><li><strong>Connection</strong>：连接，应用程序域Broker的网络连接</li><li><strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel是进行消息读写的通道。客户端可建立多个Channel，每个Channel代表一个会话任务</li><li><strong>Message</strong>：消息，服务器和应用程序之间传送的数据，有<code>Properties</code>和<code>Body</code>组成，Properties可以对消息进行修饰，比如消息的优先级、延迟等高级特性；Body则是消息体内容</li><li><strong>Virtual host</strong>：虚拟主机，用于进行逻辑隔离，最上层的消息路由。一个Virtual host里面可以有若干个Exchange和Queue，同一个Virtual host里面不能有相同名称的Exchange和Queue</li><li><strong>Exchange</strong>：交换机，接受消息，根据路由键转发消息到绑定的队列</li><li><strong>Binding</strong>：Exchange和Queue之间的虚拟连接，bingding中可以包含routing key</li><li><strong>Routing key</strong>：一个路由规则，虚拟机可用它来确定如何路由一个特定消息</li><li><strong>Queue</strong>：也成为Message Queue，消息队列，保存消息并将它们转发给消费者</li></ul><h2 id="RabbitMQ整体架构"><a href="#RabbitMQ整体架构" class="headerlink" title="RabbitMQ整体架构"></a>RabbitMQ整体架构</h2><p><img src="https://i.loli.net/2020/05/27/9o4DdunCB53hPyR.png" alt="RabbitMQ整体架构.png"></p><h2 id="RabbitMQ消息流转"><a href="#RabbitMQ消息流转" class="headerlink" title="RabbitMQ消息流转"></a>RabbitMQ消息流转</h2><p><img src="https://i.loli.net/2020/05/27/6DIpaO721zVJFQn.png" alt="RabbitMQ消息流转.png"></p><h1 id="RabbitMQ常用命令"><a href="#RabbitMQ常用命令" class="headerlink" title="RabbitMQ常用命令"></a>RabbitMQ常用命令</h1><h2 id="rabbitmq-server"><a href="#rabbitmq-server" class="headerlink" title="rabbitmq-server"></a>rabbitmq-server</h2><ul><li>启动并后台运行：<code>rabbitmq-server start &amp;</code></li><li>停止服务：<code>rabbitmq-server stop</code><h2 id="rabbitmqctl"><a href="#rabbitmqctl" class="headerlink" title="rabbitmqctl"></a>rabbitmqctl</h2></li><li>启动应用：<code>rabbitmqctl start_app</code></li><li>停止应用：<code>rabbitmqctl stop_app</code></li><li>节点状态：<code>rabbitmqctl status</code><h3 id="用户相关"><a href="#用户相关" class="headerlink" title="用户相关"></a>用户相关</h3></li><li>添加用户：<code>rabbitmqctl add_user username password</code></li><li>列出所有用户：<code>rabbitmqctl list_users</code></li><li>删除用户：<code>rabbitmqctl delete_user username</code></li><li>清除用户权限：<code>rabbitmqctl clear_permissions -p vhostpath username</code></li><li>列出用户权限：<code>rabbitmqctl list_user_permissions username</code></li><li>修改密码：<code>rabbitmqctl change_password username newpassword</code></li><li>设置用户权限：<code>rabbitmqctl set_permissions -p vhostpath username &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code><h3 id="virtual-host相关"><a href="#virtual-host相关" class="headerlink" title="virtual host相关"></a>virtual host相关</h3></li><li>创建虚拟主机：<code>rabbitmqctl add_vhost vhostpath</code></li><li>列出所有虚拟主机：<code>rabbitmqctl list_vhosts</code></li><li>列出虚拟主机上所有权限：<code>rabbitmqctl list_permissions -p vhostpath</code></li><li>删除虚拟主机：<code>rabbitmqctl delete_vhost vhostpath</code><h3 id="queue相关"><a href="#queue相关" class="headerlink" title="queue相关"></a>queue相关</h3></li><li>查看所有队列信息：<code>rabbitmqctl list_queues</code></li><li>清楚队列里的消息：<code>rabbitmqctl -p vhostpath purge_queue blue</code><h3 id="高级操作"><a href="#高级操作" class="headerlink" title="高级操作"></a>高级操作</h3></li><li>移除所有数据：<code>rabbitmqctl reset</code>(要在<code>rabbitmqctl stop_app</code>之后使用)</li><li>组成集群命令：<code>rabbitmqctl join_cluster &lt;clusternode&gt; [--ram]</code></li><li>查看集群状态：<code>rabbitmqctl cluster_status</code></li><li>修改集群节点的存储形式：<code>rabbitmqctl change_cluster_node_type disc | ram</code></li><li>忘记节点(摘除节点)：<code>rabbitmqctl forget_cluster_node [--offline]</code></li><li>修改节点名称：<code>rabbitmqctl rename_cluster_node oldnode1 newnode1 [oldnode2] [newnode2...]</code></li></ul><h2 id="rabbitmq-plugins"><a href="#rabbitmq-plugins" class="headerlink" title="rabbitmq-plugins"></a>rabbitmq-plugins</h2><ul><li>列出当前所有插件：<code>rabbitmq-plugins list</code></li><li>启动控制台：<code>rabbitmq-plugins enable rabbitmq_management</code></li></ul><h1 id="消息生产与消费"><a href="#消息生产与消费" class="headerlink" title="消息生产与消费"></a>消息生产与消费</h1><h2 id="重要概念"><a href="#重要概念" class="headerlink" title="重要概念"></a>重要概念</h2><ul><li><code>ConnectionFactory</code>：获取连接工厂</li><li><code>Connection</code>：一个连接</li><li><code>Channel</code>：数据通信信道，可发送和接收消息</li><li><code>Queue</code>：具体的消息存储队列</li><li><code>Producer</code>：消息生产者</li><li><code>Consumer</code>：消息消费者</li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建两个控制台应用程序，名字分别为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BasicConsumer</span><br><span class="line">BasicProducer</span><br></pre></td></tr></table></figure><p>在两个项目分别通过nuget引入<code>RabbitMQ.Client</code></p><h2 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h2><p>BasicProducer.Program代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace BasicProducer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 1.创建一个ConnectionFactory</span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            &#x2F;&#x2F; 2.通过连接工厂创建连接</span><br><span class="line">            using (var connection &#x3D; connectionFactory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 3.通过connection创建Channel</span><br><span class="line">                var channel &#x3D; connection.CreateModel();</span><br><span class="line">                &#x2F;&#x2F; 4.通过channel发送数据</span><br><span class="line">                var message &#x3D; &quot;Hello RabbitMQ&quot;;</span><br><span class="line">                var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line">                for (int i &#x3D; 0; i &lt; 5; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    channel.BasicPublish(exchange: &quot;&quot;, routingKey: &quot;test001&quot;, basicProperties: null, body: body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;发送完毕&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BasicConsumer.Program代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace BasicConsumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; 1.创建一个ConnectionFactory</span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;, </span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;, </span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            &#x2F;&#x2F; 2.通过连接工厂创建连接</span><br><span class="line">            using (var connection &#x3D; connectionFactory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; 3.通过connection创建Channel</span><br><span class="line">                var channel &#x3D; connection.CreateModel();</span><br><span class="line">                &#x2F;&#x2F; 4.声明一个队列</span><br><span class="line">                var queue &#x3D; channel.QueueDeclare(queue: &quot;test001&quot;, durable: true, exclusive: false, autoDelete: true, arguments: null);</span><br><span class="line">                &#x2F;&#x2F; 5.创建消费者</span><br><span class="line">                var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">                &#x2F;&#x2F; 6.设置Channel</span><br><span class="line">                channel.BasicConsume(queue: &quot;test001&quot;, autoAck: true, consumer: consumer);</span><br><span class="line">                &#x2F;&#x2F; 7.获取消息</span><br><span class="line">                consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    var body &#x3D; ea.Body;</span><br><span class="line">                    var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">                    Console.WriteLine($&quot;接收到消息:&#123;message&#125;&quot;);</span><br><span class="line">                &#125;;</span><br><span class="line">                Console.WriteLine(&quot;输入回车键键退出&quot;);</span><br><span class="line">                Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><p><strong>注意：先运行Consumer，再运行Producer</strong>，可以看到Consumer端接收到了Producer端发出的5条消息</p><h1 id="Exchange–交换机"><a href="#Exchange–交换机" class="headerlink" title="Exchange–交换机"></a>Exchange–交换机</h1><p>Exchange：接受消息，并根据路由键转发消息所绑定的队列<br><img src="https://i.loli.net/2020/05/27/fXumPnWEpoLehdy.png" alt="Exchange.png"></p><h2 id="Exchange属性-交换机属性"><a href="#Exchange属性-交换机属性" class="headerlink" title="Exchange属性(交换机属性)"></a>Exchange属性(交换机属性)</h2><ul><li>Name：交换机名字</li><li>Type：交换机类型 <code>direct</code>、<code>topic</code>、<code>fanout</code>、<code>headers</code></li><li>Durability：是否需要持久化，true为持久化</li><li>Auto Delete：当最后一个绑定到Exchange上的队列删除后，自动删除该Exchange</li><li>Internal：当前Exchange是否用于RabbitMQ内部使用，默认为false</li><li>Arguments：扩展参数，用于扩展AMQP协议自制定化使用</li></ul><h2 id="Direct-Exchange"><a href="#Direct-Exchange" class="headerlink" title="Direct Exchange"></a>Direct Exchange</h2><p>所有发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue</p><p><strong>注意：Direct模式可以使用RabbitMQ自带的Exchange:default Exchange，所以不需要将Exchange进行任何绑定(bingding)操作，消息传递时，RouteKey必须完全匹配才会被队列接受，否则该消息会被抛弃</strong></p><p><img src="https://i.loli.net/2020/05/27/bYIA27sadEDihwx.png" alt="Direct Exchange.png"></p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-1"><a href="#创建项目-1" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DirectExchange.Consumer</span><br><span class="line">DirectExchange.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-1"><a href="#具体代码-1" class="headerlink" title="具体代码"></a>具体代码</h4><p>DirectExchange.Producer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace DirectExchange.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;**** Direct Exchange Producer Sample ****&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;,</span><br><span class="line">                AutomaticRecoveryEnabled &#x3D; true,</span><br><span class="line">                NetworkRecoveryInterval &#x3D; TimeSpan.FromSeconds(3)</span><br><span class="line">            &#125;;</span><br><span class="line">            using (var connection &#x3D; connectionFactory.CreateConnection())</span><br><span class="line">            &#123;</span><br><span class="line">                using (var channel &#x3D; connection.CreateModel())</span><br><span class="line">                &#123;</span><br><span class="line">                    var exchangeName &#x3D; &quot;test_direct_exchange&quot;;</span><br><span class="line">                    var routingKey &#x3D; &quot;test.direct&quot;;</span><br><span class="line"></span><br><span class="line">                    var message &#x3D; &quot;Hello World RabbitMQ For Direct Exchange&quot;;</span><br><span class="line">                    var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                    channel.BasicPublish(exchangeName, routingKey, null, body);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;消息发送完毕&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DirectExchange.Consumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace DirectExchange.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;**** Direct Exchange Consumer Sample ****&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;,</span><br><span class="line">                AutomaticRecoveryEnabled &#x3D; true,</span><br><span class="line">                NetworkRecoveryInterval &#x3D; TimeSpan.FromSeconds(3)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_direct_exchange&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;test_direct_queue&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;test.direct&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 声明一个交换机</span><br><span class="line">            channel.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Direct, durable: true, autoDelete: false, arguments: null);</span><br><span class="line">            &#x2F;&#x2F; 声明一个队列</span><br><span class="line">            channel.QueueDeclare(queue: queueName, durable: true, exclusive: false, autoDelete: false, arguments: null);</span><br><span class="line">            &#x2F;&#x2F; 建立一个绑定关系</span><br><span class="line">            channel.QueueBind(queue:queueName,exchange:exchangeName,routingKey:routingKey);</span><br><span class="line"></span><br><span class="line">            var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">            channel.BasicConsume(queue: queueName, autoAck: true, consumer);</span><br><span class="line">            consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; ea.Body;</span><br><span class="line">                var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">                Console.WriteLine($&quot;接收到消息：&#123;message&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车键退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Topic-Exchange"><a href="#Topic-Exchange" class="headerlink" title="Topic Exchange"></a>Topic Exchange</h2><p>所有发送到Topic Exchange的消息都会被转发到所有关系RouteKey中指定Topic的Queue上</p><p>Exchange将RouteKey和某个Topic进行模糊匹配，此时队列需要绑定一个Topic</p><p><em>注意：可以使用通配符进行模糊匹配</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">符号&quot;#&quot;匹配一个或多个词</span><br><span class="line">符号&quot;*&quot;匹配不多不少一个词</span><br><span class="line">例如：&quot;log.#&quot; 能够匹配到 &quot;log.info.oa&quot;</span><br><span class="line">      &quot;log.*&quot; 只能够匹配到 &quot;log.error&quot;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2020/05/27/J95AiKbfn4UutRa.png" alt="Topic Exchange.png"></p><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-2"><a href="#创建项目-2" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TopicExchange.Consumer</span><br><span class="line">TopicExchange.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-2"><a href="#具体代码-2" class="headerlink" title="具体代码"></a>具体代码</h4><p>TopicExchange.Producer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace TopicExchange.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;**** Topic Exchange Producer Sample ****&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;,</span><br><span class="line">                AutomaticRecoveryEnabled &#x3D; true,</span><br><span class="line">                NetworkRecoveryInterval &#x3D; TimeSpan.FromSeconds(3)</span><br><span class="line">            &#125;;</span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_topic_exchange&quot;;</span><br><span class="line">            var routingKey1 &#x3D; &quot;user.save&quot;;</span><br><span class="line">            var routingKey2 &#x3D; &quot;user.update&quot;;</span><br><span class="line">            var routingKey3 &#x3D; &quot;user.delete.abc&quot;;</span><br><span class="line"></span><br><span class="line">            var message &#x3D; &quot;Hello World RabbitMQ For Topic Exchange Message&quot;;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">            channel.BasicPublish(exchange: exchangeName, routingKey: routingKey1, basicProperties: null, body);</span><br><span class="line">            channel.BasicPublish(exchange: exchangeName, routingKey: routingKey2, basicProperties: null, body);</span><br><span class="line">            channel.BasicPublish(exchange: exchangeName, routingKey: routingKey3, basicProperties: null, body);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(&quot;消息发送完毕&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TopicExchange.Consumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace TopicExchange.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;**** Topic Exchange Consumer Sample ****&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;,</span><br><span class="line">                AutomaticRecoveryEnabled &#x3D; true,</span><br><span class="line">                NetworkRecoveryInterval &#x3D; TimeSpan.FromSeconds(3)</span><br><span class="line">            &#125;;</span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_topic_exchange&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;test_topic_queue&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;user.*&quot;;</span><br><span class="line">            &#x2F;&#x2F; 声明交换机</span><br><span class="line">            channel.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Topic, durable: true, autoDelete: false, arguments: null);</span><br><span class="line">            &#x2F;&#x2F; 声明队列</span><br><span class="line">            channel.QueueDeclare(queue: queueName, durable: false, exclusive: false, autoDelete: false, arguments: null);</span><br><span class="line">            &#x2F;&#x2F; 建立绑定关系</span><br><span class="line">            channel.QueueBind(queue: queueName, exchange: exchangeName, routingKey: routingKey);</span><br><span class="line"></span><br><span class="line">            var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">            channel.BasicConsume(queue: queueName, autoAck: true, consumer: consumer);</span><br><span class="line">            consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; ea.Body;</span><br><span class="line">                var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">                </span><br><span class="line">                Console.WriteLine($&quot;接收到消息：&#123;message&#125;   RoutingKey&#x3D;&#123;ea.RoutingKey&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fanout-Exchange"><a href="#Fanout-Exchange" class="headerlink" title="Fanout Exchange"></a>Fanout Exchange</h2><p>不处理路由键，只需要简单的队列绑定到交换机上，发送到交换机上的消息都会被转发到与该交换机绑定的所有队列上，<strong>Fanout交换机转发消息是最快的</strong></p><p><img src="https://i.loli.net/2020/05/27/VaGHXMh6YsboDJp.png" alt="Fanout Exchange.png"></p><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-3"><a href="#创建项目-3" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FanoutExchange.Consumer</span><br><span class="line">FanoutExchange.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-3"><a href="#具体代码-3" class="headerlink" title="具体代码"></a>具体代码</h4><p>FanoutExchange.Producer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace FanoutExchange.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;**** Fanout Exchange Producer Sample ****&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;,</span><br><span class="line">                AutomaticRecoveryEnabled &#x3D; true,</span><br><span class="line">                NetworkRecoveryInterval &#x3D; TimeSpan.FromSeconds(3)</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_fanout_exchange&quot;;</span><br><span class="line">            var message &#x3D; &quot;Hello World RabbitMQ For Fanout Exchange&quot;;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line">            channel.BasicPublish(exchange: exchangeName, routingKey: &quot;&quot;, basicProperties: null, body: body);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;消息发送完毕&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>FanoutExchange.Consumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace FanoutExchange.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;**** Fanout Exchange Consumer Sample ****&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;,</span><br><span class="line">                AutomaticRecoveryEnabled &#x3D; true,</span><br><span class="line">                NetworkRecoveryInterval &#x3D; TimeSpan.FromSeconds(3)</span><br><span class="line">            &#125;;</span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_fanout_exchange&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;test_fanout_queue&quot;;</span><br><span class="line">            &#x2F;&#x2F; 声明</span><br><span class="line">            channel.ExchangeDeclare(exchange: exchangeName, type: ExchangeType.Fanout, durable: true, autoDelete: false, arguments: null);</span><br><span class="line">            channel.QueueDeclare(queue: queueName, durable: true, exclusive: false, autoDelete: false, arguments: null);</span><br><span class="line">            channel.QueueBind(queue:queueName,exchange:exchangeName,&quot;&quot;);</span><br><span class="line"></span><br><span class="line">            var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">            channel.BasicConsume(queue: queueName, autoAck: true, consumer);</span><br><span class="line">            consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; ea.Body;</span><br><span class="line">                var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">                Console.WriteLine($&quot;接收到消息：&#123;message&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Binding–绑定"><a href="#Binding–绑定" class="headerlink" title="Binding–绑定"></a>Binding–绑定</h1><ul><li>Exchange和Exchange、Queue之间的连接关系</li><li>Binding中可以包含RoutingKey或参数</li></ul><h1 id="Queue–消息队列"><a href="#Queue–消息队列" class="headerlink" title="Queue–消息队列"></a>Queue–消息队列</h1><ul><li>消息队列，实际存储消息数据</li><li>Durability：是否持久化，Durable：是，Transient：否</li><li>Auto Delete：如果是yes，则代表当最后一个监听被移除之后，该queue会被自动删除</li></ul><h1 id="Message–消息"><a href="#Message–消息" class="headerlink" title="Message–消息"></a>Message–消息</h1><ul><li>服务器和应用程序之间传送的数据</li><li>本质上就是一段数据，由Properties和Payload(Body)组成</li><li>常用属性：delivery mode、headers（自定义属性）</li><li>content_type、content_encoding、priority(优先级)</li><li>correlation_id（消息唯一ID）、reply_to（消息处理失败了返回哪个队列）、expiration（消息过期时间，多久时间没被消费就过期）、message_id</li><li>timestamp、type、user_id、app_id、cluster_id</li></ul><h1 id="Virtual-Hots–虚拟主机"><a href="#Virtual-Hots–虚拟主机" class="headerlink" title="Virtual Hots–虚拟主机"></a>Virtual Hots–虚拟主机</h1><ul><li>虚拟地址，用于进行逻辑隔离，最上层的消息路由</li></ul><h1 id="RabbitMQ高级特性"><a href="#RabbitMQ高级特性" class="headerlink" title="RabbitMQ高级特性"></a>RabbitMQ高级特性</h1><h2 id="消息是如何保障100-的投递成功"><a href="#消息是如何保障100-的投递成功" class="headerlink" title="消息是如何保障100%的投递成功"></a>消息是如何保障100%的投递成功</h2><h3 id="生产端的可靠性投递"><a href="#生产端的可靠性投递" class="headerlink" title="生产端的可靠性投递"></a>生产端的可靠性投递</h3><ul><li><p>保障消息的成功发出</p></li><li><p>保障MQ节点的成功接受</p></li><li><p>发送端收到MQ节点(Broker)确认应答</p></li><li><p>完善的消息进行补偿机制</p><h3 id="具体解决方案"><a href="#具体解决方案" class="headerlink" title="具体解决方案"></a>具体解决方案</h3></li><li><p>消息落库，对消息状态进行达标。即在发送消息的时候将消息持久化到数据库中，然后进行状态维护</p><p><img src="https://i.loli.net/2020/05/27/JhjECxulDILTWQp.png" alt="消息落库.png"></p><p>缺陷：需要对消息做持久化，这样在遇到高并发的场景，数据库压力大</p></li><li><p>消息的延迟投递，做二次确认，回调检查</p><p><img src="https://i.loli.net/2020/05/27/go7lXc49nNjUPHi.png" alt="消息延迟投递.png"></p></li></ul><h2 id="幂等性-怎么避免重复消费"><a href="#幂等性-怎么避免重复消费" class="headerlink" title="幂等性/怎么避免重复消费"></a>幂等性/怎么避免重复消费</h2><p>幂等性：通俗的讲就是一个操作不管做多少次，结果永远都一样</p><h3 id="消费端-幂等性保障"><a href="#消费端-幂等性保障" class="headerlink" title="消费端-幂等性保障"></a>消费端-幂等性保障</h3><p>消费端实现幂等性，就意味着消费端永远不会消费多次，即使消费端收到多条一样的消息</p><h3 id="具体解决方案-1"><a href="#具体解决方案-1" class="headerlink" title="具体解决方案"></a>具体解决方案</h3><ul><li><p><code>唯一ID+指纹码</code>机制</p><ul><li>唯一ID+指纹码 机制，利用数据库主键去重</li><li>SELECT COUNT(1) FROM T_ORDER WHERE ID=(唯一ID+指纹码)</li><li>好处：实现简单</li><li>坏处：高并发下有数据库写入的性能瓶颈</li><li>解决方案：跟进ID进行分库分表进行算法路由</li></ul></li><li><p>利用Redis的原子性去实现</p><ul><li>数据是否需要进行数据落库，如果落库的话，关键解决的问题是数据库和缓存如何做到原子性</li><li>如果数据不落库，那么都存在缓存中，如何设置定时同步的策略</li></ul></li></ul><h2 id="Confirm确认消息"><a href="#Confirm确认消息" class="headerlink" title="Confirm确认消息"></a>Confirm确认消息</h2><ul><li>消息的确定，是指生产者投递消息后，如果Broker收到消息，则会给生产者一个应答</li><li>生产者进行接受应答，用来确定这条消息是否正常的发送给Broker，这种方法也是消息的可靠性投递的核心保障</li></ul><p><img src="https://i.loli.net/2020/05/27/y92nhMRg1b7sTJ6.png" alt="Confirm机制流程图.png"></p><h3 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-4"><a href="#创建项目-4" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ComfirmSample.Consumer</span><br><span class="line">ComfirmSample.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-4"><a href="#具体代码-4" class="headerlink" title="具体代码"></a>具体代码</h4><p>ComfirmSample.Producer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace ComfirmSample.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;****** Confirm Sample Producer ******&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 指定消息投递模式&#x3D;Confirm</span><br><span class="line">            channel.ConfirmSelect();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_confirm_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;confirm.save&quot;;</span><br><span class="line"></span><br><span class="line">            var message &#x3D; &quot;Hello RabbitMQ For Confirm Message&quot;;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">            channel.BasicPublish(exchangeName, routingKey, null, body);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 添加确认监听</span><br><span class="line">            channel.BasicAcks +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;消息确认被MQ收到  DeliveryTag&#x3D;&#123;ea.DeliveryTag&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line">            &#x2F;&#x2F; no ack-ed</span><br><span class="line">            channel.BasicNacks +&#x3D; (sender, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine($&quot;消息发送失败  DeliveryTag&#x3D;&#123;ea.DeliveryTag&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;消息发送完成&quot;);</span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ComfirmSample.Consumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace ComfirmSample.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;****** Confirm Sample Consumer ******&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;test_confirm_exchange&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;test_confirm_queue&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;confirm.save&quot;;</span><br><span class="line"></span><br><span class="line">            channel.ExchangeDeclare(exchangeName,ExchangeType.Direct,true,false,null);</span><br><span class="line">            channel.QueueDeclare(queueName, true, false, false, null);</span><br><span class="line">            channel.QueueBind(queueName, exchangeName, routingKey, null);</span><br><span class="line"></span><br><span class="line">            var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">            channel.BasicConsume(queueName, true, consumer);</span><br><span class="line">            consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; ea.Body;</span><br><span class="line">                var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">                Console.WriteLine($&quot;接收到消息：&#123;message&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Return返回消息"><a href="#Return返回消息" class="headerlink" title="Return返回消息"></a>Return返回消息</h2><ul><li>Return Listener用于处理一些不可路由的消息</li><li>消息生产者通过指定一个<code>Exchange</code>和<code>RoutingKey</code>，把消息送达到某一个队列中去，然后消息监听者监听队列，进行消费处理操作</li><li>但是在某些情况下，如果我们在发送消息的时候，当前的<code>Exchange</code>不存在或者指定的路由key路由不到，这个时候如果我们需要监听这种不可达的消息，就要使用Return Listener</li><li><strong>Mandatory</strong>：如果为true，则监听器会接受到路由不可达的消息，然后进行后续处理，如果为false，那么broker端会自动删除该消息</li></ul><p><img src="https://i.loli.net/2020/05/27/wZe1qY3NxDL2QjS.png" alt="image.png"></p><h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-5"><a href="#创建项目-5" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReturnListenerSample.Consumer</span><br><span class="line">ReturnListenerSample.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><h4 id="具体代码-5"><a href="#具体代码-5" class="headerlink" title="具体代码"></a>具体代码</h4><p>ReturnListenerSample.Producer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace ReturnListenerSample.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;****** Return Listener Producer ******&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;return_listener_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;order.save&quot;;</span><br><span class="line">            var routingKeyError &#x3D; &quot;abc.save&quot;;</span><br><span class="line"></span><br><span class="line">            var message &#x3D; &quot;Hello RabbitMQ For ReturnListener&quot;;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">            channel.BasicPublish(exchangeName,routingKey,mandatory:true,null,body);</span><br><span class="line">            channel.BasicPublish(exchangeName, routingKeyError, mandatory: true, null, body);</span><br><span class="line"></span><br><span class="line">            channel.BasicReturn +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;---------- 消息发送失败 ----------&quot;);</span><br><span class="line">                Console.WriteLine($&quot;ReplyCode &#x3D; &#123;ea.ReplyCode&#125;&quot;);</span><br><span class="line">                Console.WriteLine($&quot;ReplyText &#x3D;&#123;ea.ReplyText&#125;&quot;);</span><br><span class="line">                Console.WriteLine($&quot;Exchange &#x3D; &#123;ea.Exchange&#125;&quot;);</span><br><span class="line">                Console.WriteLine($&quot;RoutingKey &#x3D; &#123;ea.RoutingKey&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;消息发送完成&quot;);</span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ReturnListenerSample.Consumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace ReturnListenerSample.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;****** Return Listener Consumer ******&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;return_listener_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;order.#&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;return_listener_queue&quot;;</span><br><span class="line"></span><br><span class="line">            channel.ExchangeDeclare(exchangeName,ExchangeType.Topic,true,false,null);</span><br><span class="line">            channel.QueueDeclare(queueName, true, false, false, null);</span><br><span class="line">            channel.QueueBind(queueName,exchangeName,routingKey,null);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            var consumer &#x3D; new EventingBasicConsumer(channel);</span><br><span class="line">            channel.BasicConsume(queueName, true, consumer);</span><br><span class="line">            consumer.Received +&#x3D; (model, ea) &#x3D;&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                var body &#x3D; ea.Body;</span><br><span class="line">                var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">                Console.WriteLine($&quot;接收到消息  &#123;message&#125;&quot;);</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义消费者"><a href="#自定义消费者" class="headerlink" title="自定义消费者"></a>自定义消费者</h2><p>自定义Consumer在日常工作中更常用，主要就是继承<code>DefaultBasicConsumer</code>这个类，然后<code>override HandleBasicDeliver()</code>这个方法即可</p><h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-6"><a href="#创建项目-6" class="headerlink" title="创建项目"></a>创建项目</h4><p>创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CustomerConsumer.Consumer</span><br><span class="line">CustomerConsumer.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><p>在<code>CustomerConsumer.Consumer</code>中创建类<code>MyConsumer.cs</code></p><h4 id="具体代码-6"><a href="#具体代码-6" class="headerlink" title="具体代码"></a>具体代码</h4><p>CustomerConsumer.Producer.Program.cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace CustomerConsumer.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;****** Customer Consumer Producer ******&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;customer_consumer_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;customer.save&quot;;</span><br><span class="line"></span><br><span class="line">            var message &#x3D; &quot;Hello RabbitMQ For Customer_Consumer&quot;;</span><br><span class="line">            var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">            for (int i &#x3D; 0; i &lt; 5; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                channel.BasicPublish(exchangeName, routingKey, true, null, body);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;消息发送完成&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerConsumer.Consumer.MyConsumer.cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace CustomerConsumer.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    public class MyConsumer : DefaultBasicConsumer</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly IModel _model;</span><br><span class="line"></span><br><span class="line">        public MyConsumer(IModel model):base(model)</span><br><span class="line">        &#123;</span><br><span class="line">            _model &#x3D; model;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey,</span><br><span class="line">            IBasicProperties properties, ReadOnlyMemory&lt;byte&gt; body)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine($&quot;consumerTag &#x3D; &#123;consumerTag&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;deliveryTag &#x3D; &#123;deliveryTag&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;redelivered &#x3D; &#123;redelivered&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;exchange &#x3D; &#123;exchange&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;routingKey &#x3D; &#123;routingKey&#125;&quot;);</span><br><span class="line">            var message &#x3D; Encoding.UTF8.GetString(body.ToArray());</span><br><span class="line">            Console.WriteLine($&quot;Message &#x3D; &#123;message&#125;&quot;);</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CustomerConsumer.Consumer.Program.cs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace CustomerConsumer.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;****** Customer Consumer Producer ******&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;customer_consumer_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;customer.#&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;customer_consumer_queue&quot;;</span><br><span class="line"></span><br><span class="line">            channel.ExchangeDeclare(exchangeName,ExchangeType.Topic,true,false,null);</span><br><span class="line">            channel.QueueDeclare(queueName, true, false, false, null);</span><br><span class="line">            channel.QueueBind(queueName, exchangeName, routingKey);</span><br><span class="line"></span><br><span class="line">            channel.BasicConsume(queueName, true, new MyConsumer(channel));</span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息的限流"><a href="#消息的限流" class="headerlink" title="消息的限流"></a>消息的限流</h2><p>为什么需要消费端限流：当消费端处理能力达不到生产端的生产速度，或当Broker中囤积了巨量消息，当消费端启动之后，巨量消息同一时间全部推送到消费端，会直接导致消费端崩溃，</p><p> RabbitMQ提供了一种Qos(服务质量保证)功能，即在非自动确认消息的前提下，如果一定数目的消息(通过基于consumer或者channel设置Qos的值)未被确认之前，不进行消费新的消息</p><p> 主要操作方式就是调用<code>channel</code>上的<code>BasicQos</code>方法设置，其中参数意思如下：</p><ul><li><p>prefetchSize：表示单挑消息的最大限制，一般设置为0表示对单挑消息的体积大小不做限制</p></li><li><p>prefetchCount：表示Broker最多同时给一个消费者推送多少条消息，一旦有这么多条消息没有ack，则该consumer将block掉，知道有消息ack，Broker才会继续推消息</p></li><li><p>global：true/false，是否将上面的设置应用于channel，简单点说就是上面限制是channel级别还是consumer级别</p></li><li><p><em>注意：这里的设置一定是在调用channel.BasicConsume()的时候设置consumer的autoAck=false才有效，并且一般开发中都是将autoAck设置为false，然后在业务逻辑处理完之后再手动ack*</em></p></li></ul><h3 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-7"><a href="#创建项目-7" class="headerlink" title="创建项目"></a>创建项目</h4><p> 创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ConsumerLimit.Consumer</span><br><span class="line">ConsumerLimit.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><p>在<code>ConsumerLimit.Consumer</code>中创建类<code>MyConsumer.cs</code></p><h4 id="具体代码-7"><a href="#具体代码-7" class="headerlink" title="具体代码"></a>具体代码</h4><p>ConsumerLimit.Producer.Program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace ConsumerLimit.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;********** Consumer Limit Producer **********&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;consumer_limit_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;order.saved&quot;;</span><br><span class="line"></span><br><span class="line">            var random &#x3D; new Random();</span><br><span class="line">            for (var i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var message &#x3D; $&quot;Hello RabbitMQ For Consumer Limit &#123;random.Next(1,100)&#125;&quot;;</span><br><span class="line">                var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line">                channel.BasicPublish(exchangeName, routingKey, null, body);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;消息发送完成&quot;);</span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConsumerLimit.Consumer.MyConsumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace ConsumerLimit.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    public class MyConsumer:DefaultBasicConsumer</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly IModel _channel;</span><br><span class="line"></span><br><span class="line">        public MyConsumer(IModel channel):base(channel)</span><br><span class="line">        &#123;</span><br><span class="line">            _channel &#x3D; channel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey,</span><br><span class="line">            IBasicProperties properties, ReadOnlyMemory&lt;byte&gt; body)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;接收到消息：&#123;Encoding.UTF8.GetString(body.ToArray())&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;consumerTag &#x3D; &#123;consumerTag&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;deliveryTag &#x3D; &#123;deliveryTag&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;redelivered &#x3D; &#123;redelivered&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;exchange &#x3D; &#123;exchange&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;routingKey &#x3D; &#123;routingKey&#125;&quot;);</span><br><span class="line">            Console.WriteLine($&quot;正在模拟业务操作...&quot;);</span><br><span class="line">            Thread.Sleep(2000);</span><br><span class="line">            Console.WriteLine(&quot;业务处理完毕&quot;);</span><br><span class="line">            _channel.BasicAck(deliveryTag,false);</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ConsumerLimit.Consumer.Program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using RabbitMQ.Client.Events;</span><br><span class="line"></span><br><span class="line">namespace ConsumerLimit.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;********** Consumer Limit Consumer **********&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;consumer_limit_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;order.#&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;consumer_limit_queue&quot;;</span><br><span class="line"></span><br><span class="line">            channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, true, false, null);</span><br><span class="line">            channel.QueueDeclare(queueName, true, false, false, null);</span><br><span class="line">            channel.QueueBind(queueName, exchangeName, routingKey, null);</span><br><span class="line"></span><br><span class="line">            channel.BasicConsume(queueName, false, new MyConsumer(channel));</span><br><span class="line">            channel.BasicQos(prefetchSize:0,prefetchCount:1,global:false);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="消息的ACK与重回队列"><a href="#消息的ACK与重回队列" class="headerlink" title="消息的ACK与重回队列"></a>消息的ACK与重回队列</h2><h3 id="消费端的手工ACK和NACK"><a href="#消费端的手工ACK和NACK" class="headerlink" title="消费端的手工ACK和NACK"></a>消费端的手工ACK和NACK</h3><ul><li>ACK=消息已经成功处理了</li><li>NACK=消息我处理失败了(Broker会进行重新投递)</li></ul><p>使用场景：</p><ul><li>消费端进行消费的时候，如果由于业务异常可以进行NACK，当尝试到足够的次数都一直处理失败，则返回记录日志后续做补偿，然后返回ACK</li><li>由于服务器宕机等严重问题，Broker即没收到ACK也没有收到NACK，那么Broker也会进行重新推送消息，这时如果处理完消息，返回ACK可以保障Broker知道消费端已经成功消费</li></ul><h3 id="消费端的重回队列"><a href="#消费端的重回队列" class="headerlink" title="消费端的重回队列"></a>消费端的重回队列</h3><ul><li>消费端重回队列是为了对没有处理成功的消息，把消息重新会递给Broker</li><li>一般在实际应用中，都会关闭重回队列，也就是设置为False</li></ul><h3 id="代码示例-7"><a href="#代码示例-7" class="headerlink" title="代码示例"></a>代码示例</h3><h4 id="创建项目-8"><a href="#创建项目-8" class="headerlink" title="创建项目"></a>创建项目</h4><p> 创建两个控制台应用程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AckSample.Consumer</span><br><span class="line">AckSample.Producer</span><br></pre></td></tr></table></figure><p>再分别通过nuget引入<code>RabbitMQ.Client</code></p><p>在<code>AckSample.Consumer</code>中创建类<code>MyConsumer.cs</code></p><h4 id="具体代码-8"><a href="#具体代码-8" class="headerlink" title="具体代码"></a>具体代码</h4><p>AckSample.Producer.Program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace AckSample.Producer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;********** ACK Sample Producer **********&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;ack_sample_exchange&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;order.saved&quot;;</span><br><span class="line"></span><br><span class="line">            var random &#x3D;new Random();</span><br><span class="line"></span><br><span class="line">            for (var i &#x3D; 0; i &lt; 10; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                var properties &#x3D; channel.CreateBasicProperties();</span><br><span class="line">                properties.DeliveryMode &#x3D; 2;</span><br><span class="line">                properties.ContentEncoding &#x3D; &quot;UTF-8&quot;;</span><br><span class="line">                properties.Headers &#x3D; new Dictionary&lt;string, object&gt;() &#123;&#123;&quot;num&quot;, random.Next(0, 10).ToString()&#125;&#125;;</span><br><span class="line"></span><br><span class="line">                var message &#x3D; $&quot;Hello RabbitMQ For ACK  -&gt;  &#123;i&#125;&quot;;</span><br><span class="line">                var body &#x3D; Encoding.UTF8.GetBytes(message);</span><br><span class="line"></span><br><span class="line">                channel.BasicPublish(exchangeName, routingKey, properties, body);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AckSample.Consumer.MyConsumer</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using Console &#x3D; System.Console;</span><br><span class="line"></span><br><span class="line">namespace AckSample.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    public class MyConsumer:DefaultBasicConsumer</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly IModel _channel;</span><br><span class="line"></span><br><span class="line">        public MyConsumer(IModel channel):base(channel)</span><br><span class="line">        &#123;</span><br><span class="line">            _channel &#x3D; channel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey,</span><br><span class="line">            IBasicProperties properties, ReadOnlyMemory&lt;byte&gt; body)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            var stringNum &#x3D; properties.Headers[&quot;num&quot;];</span><br><span class="line">            var byteNum &#x3D; stringNum as byte[];</span><br><span class="line">            Console.WriteLine($&quot;接收到消息  num&#x3D;&#123;Encoding.UTF8.GetString(byteNum)&#125;  &#123;Encoding.UTF8.GetString(body.ToArray())&#125;&quot;);</span><br><span class="line">            Console.WriteLine(&quot;......模拟业务操作......&quot;);</span><br><span class="line">            var num &#x3D; int.Parse(Encoding.UTF8.GetString(byteNum));</span><br><span class="line">            if (num % 2 &#x3D;&#x3D; 0)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;......业务处理失败......&quot;);</span><br><span class="line">                _channel.BasicNack(deliveryTag, false, true);</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;......业务处理成功......&quot;);</span><br><span class="line">                _channel.BasicAck(deliveryTag,false);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;);</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            Thread.Sleep(2000);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AckSample.Consumer.Program</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line"></span><br><span class="line">namespace AckSample.Consumer</span><br><span class="line">&#123;</span><br><span class="line">    class Program</span><br><span class="line">    &#123;</span><br><span class="line">        static void Main(string[] args)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(&quot;********** ACK Sample Consumer **********&quot;);</span><br><span class="line"></span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            using var connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            using var channel &#x3D; connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;ack_sample_exchange&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;ack_sample_queue&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;order.saved&quot;;</span><br><span class="line"></span><br><span class="line">            channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, true, false, null);</span><br><span class="line">            channel.QueueDeclare(queueName, true, false, false, null);</span><br><span class="line">            channel.QueueBind(queueName,exchangeName,routingKey);</span><br><span class="line"></span><br><span class="line">            channel.BasicConsume(queueName, false, new MyConsumer(channel));</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(&quot;输入回车退出...&quot;);</span><br><span class="line">            Console.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TTL消息"><a href="#TTL消息" class="headerlink" title="TTL消息"></a>TTL消息</h2><p>主要就是两点，TTL可以针对消息本身也可以针对消息队列</p><p>消息本身通过消息的<code>Properties</code>中设置<code>Expiration</code>属性来设置过期时间</p><p>Queue通过声明的时候在<code>arguments</code>字典参数里添加<code>x-message-ttl</code>这个键值对来设置进入该消息队列的消息有效期</p><h2 id="DLX–死信队列-Dead-Letter-Exchange"><a href="#DLX–死信队列-Dead-Letter-Exchange" class="headerlink" title="DLX–死信队列(Dead-Letter-Exchange)"></a>DLX–死信队列(Dead-Letter-Exchange)</h2><p>利用DLX，当消息在一个队列变成死信(dead message)之后，它能被重新publish到另一个Exchange，这个Exchange就是DLX</p><p>消息编程死信的情况：</p><ul><li>消息被拒绝(basic.reject/basic.nack)，并且requeue=false(不再重回队列)</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><p>死信队列</p><ul><li>DLX也是一个正常的Exchange，和一般的Exchange没有区别，它能在仍和的队列上被指定，实际上就是设置某个队列的属性</li><li>当这个队列中有死信时，RabbitMQ就会自动的将这个消息重新发布到设置的Exchange上去，进而被路由到另一个队列</li><li>可以监听这个队列中消息做相应的处理，这个特性可以弥补RabbitMQ以前支持的immediate参数的功能</li></ul><p>死信队列设置：</p><ul><li>首先需要设置死信队列的exchange和queue，然后进行绑定<ul><li>Exchange：dlx.exchange</li><li>Queue：dlx.queue</li><li>RoutingKey：#</li></ul></li><li>然后进行正常声明交换机、队列、绑定，只不过需要在队列上的arguments字典上加一个键值对：<code>x-dead-letter-exchange:dlx.exchange</code></li></ul><h1 id="ASP-NET-Core做消费者"><a href="#ASP-NET-Core做消费者" class="headerlink" title="ASP.NET Core做消费者"></a>ASP.NET Core做消费者</h1><p>主要思路：创建一个<code>HostedService</code>服务类，继承<code>BackgroundService</code>，<code>override ExecuteAsync</code>方法，然后在里面做消息监听，最后在<code>Startup.ConfigureServices</code>中注册这个<code>HostedService</code></p><h2 id="代码示例-8"><a href="#代码示例-8" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Threading;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line">using Microsoft.Extensions.Hosting;</span><br><span class="line">using Microsoft.Extensions.Logging;</span><br><span class="line">using RabbitMQ.Client;</span><br><span class="line">using WebSiteConsumerSample.Consumers;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ReSharper disable UnusedMember.Global</span><br><span class="line">&#x2F;&#x2F; ReSharper disable InconsistentNaming</span><br><span class="line"></span><br><span class="line">namespace WebSiteConsumerSample.BackgroundServices</span><br><span class="line">&#123;</span><br><span class="line">    public class ConsumeRabbitMQHostedService : BackgroundService</span><br><span class="line">    &#123;</span><br><span class="line">        private readonly ILogger&lt;ConsumeRabbitMQHostedService&gt; _logger;</span><br><span class="line">        private readonly ILogger&lt;SolutionMessageConsumer&gt; _consumerLogger;</span><br><span class="line">        private IConnection _connection;</span><br><span class="line">        private IModel _channel;</span><br><span class="line"></span><br><span class="line">        private string _exchangeName;</span><br><span class="line">        private string _queueName;</span><br><span class="line">        private string _routingKey;</span><br><span class="line"></span><br><span class="line">        public ConsumeRabbitMQHostedService(ILogger&lt;ConsumeRabbitMQHostedService&gt; logger,ILogger&lt;SolutionMessageConsumer&gt; consumerLogger)</span><br><span class="line">        &#123;</span><br><span class="line">            _logger &#x3D; logger;</span><br><span class="line">            _consumerLogger &#x3D; consumerLogger;</span><br><span class="line">            InitRabbitMq();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private void InitRabbitMq()</span><br><span class="line">        &#123;</span><br><span class="line">            var connectionFactory &#x3D; new ConnectionFactory()</span><br><span class="line">            &#123;</span><br><span class="line">                HostName &#x3D; &quot;127.0.0.1&quot;,</span><br><span class="line">                Port &#x3D; 5672,</span><br><span class="line">                UserName &#x3D; &quot;admin&quot;,</span><br><span class="line">                Password &#x3D; &quot;admin&quot;,</span><br><span class="line">                VirtualHost &#x3D; &quot;&#x2F;&quot;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            _connection &#x3D; connectionFactory.CreateConnection();</span><br><span class="line">            _channel &#x3D; _connection.CreateModel();</span><br><span class="line"></span><br><span class="line">            var exchangeName &#x3D; &quot;dimsum_solution_exchange&quot;;</span><br><span class="line">            var queueName &#x3D; &quot;dimsum_solution_queue&quot;;</span><br><span class="line">            var routingKey &#x3D; &quot;solution.#&quot;;</span><br><span class="line"></span><br><span class="line">            _exchangeName &#x3D; exchangeName;</span><br><span class="line">            _queueName &#x3D; queueName;</span><br><span class="line">            _routingKey &#x3D; routingKey;</span><br><span class="line"></span><br><span class="line">            _channel.ExchangeDeclare(exchangeName, ExchangeType.Topic, true, false, null);</span><br><span class="line">            _channel.QueueDeclare(queueName, true, false, false, null);</span><br><span class="line">            _channel.QueueBind(queueName, exchangeName, routingKey, null);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        protected override async Task ExecuteAsync(CancellationToken stoppingToken)</span><br><span class="line">        &#123;</span><br><span class="line">            await Task.CompletedTask;</span><br><span class="line">            stoppingToken.ThrowIfCancellationRequested();</span><br><span class="line">            _channel.BasicConsume(_queueName, false, new SolutionMessageConsumer(_channel, _consumerLogger));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public override void Dispose()</span><br><span class="line">        &#123;</span><br><span class="line">            _channel.Dispose();</span><br><span class="line">            _connection.Dispose();</span><br><span class="line">            base.Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Startup.ConfigureServices</code>中添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddHostedService&lt;ConsumeRabbitMQHostedService&gt;();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#主流消息中间件&quot;&gt;主流消息中间件&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#activemq&quot;&gt;ActiveMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#kafka&quot;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rock
      
    
    </summary>
    
    
      <category term="消息队列" scheme="http://www.dimsum.fun/categories/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
    
      <category term="RabbitMQ" scheme="http://www.dimsum.fun/tags/RabbitMQ/"/>
    
      <category term="消息队列" scheme="http://www.dimsum.fun/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="http://www.dimsum.fun/2020/05/25/42.MultiThreading/"/>
    <id>http://www.dimsum.fun/2020/05/25/42.MultiThreading/</id>
    <published>2020-05-25T02:11:00.000Z</published>
    <updated>2020-05-27T16:57:02.915Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机概念"><a href="#计算机概念" class="headerlink" title="计算机概念"></a>计算机概念</h1><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>程序在服务器运行时，占据的计算资源合计，称之为进程。进程之间不会相互干扰，但是进程间的通信比较困难（分布式）。</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>程序执行的最小单位，相应操作的最小执行流，线程也包含自己的计算资源。线程是属于进程的，一个进程可以有多个线程。</p><h2 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h2><p>一个进程里面，有多个线程并发执行</p><h1 id="C"><a href="#C" class="headerlink" title="C#"></a>C#</h1><h2 id="多线程Thread"><a href="#多线程Thread" class="headerlink" title="多线程Thread"></a>多线程Thread</h2><p><code>Thread</code>是一个类，就是一个封装，是.NET对线程对象的抽象封装，通过<code>Thread</code>去完成的操作，最终是通过像操作系统请求得到的执行流</p><ul><li><code>CurrentThread</code>：当前线程–任何操作执行都是线程完成的，即获得运行当前这句话的线程</li><li><code>ManagerThreadId</code>：是.NET平台给Thread起的名字，就是一个<code>int</code>值，尽量不重复</li></ul><hr><ul><li>同步单线程方法：按顺序执行，每次调用完成后才能进下一行，是同一个线程运行的</li><li>异步多线程方法：发起调用，不等待结果就直接进入下一行(主线程)，动作会由一个新线程来执行(子线程)</li></ul><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><h2 id="界面卡顿"><a href="#界面卡顿" class="headerlink" title="界面卡顿"></a>界面卡顿</h2><ul><li>同步单线程方法卡界面 —- 主(UI)线程线程忙于计算，所以不能相应</li><li>异步多线程不卡界面 —- 计算任务交给子线程，主(UI)线程已经闲置，可以相应别的操作</li><li>多线程对于C/S：点击按钮后能不卡死，例如：上传文件界面不卡死</li><li>多线程对于B/S：例如：用户注册时同时发邮件/发短信/写日志<h2 id="执行速度"><a href="#执行速度" class="headerlink" title="执行速度"></a>执行速度</h2></li><li>同步单线程方法慢 —- 因为只有一个线程在计算</li><li>异步多线程方法快 —- 因为多个线程并发计算</li><li>多线程就是用资源换性能</li><li>但是两者的速度差不是线性增长，例如1个线程耗时1000毫秒，5个线程不代表能做到耗时200毫秒。说明多线程的协调管理由额外的成本，同时资源也是由上限的</li><li>所以：线程并不是越多越好<h2 id="无序性"><a href="#无序性" class="headerlink" title="无序性"></a>无序性</h2></li><li>启动无序：几乎同一时间向操作系统请求线程，因为线程时操作系统资源，CLR只能去申请，具体时什么顺序启动这个无法掌握</li><li>执行时间不确定：同个线程同个任务耗时都不一样，更何况多个任务多个线程。这跟操作系统的资源调度策略有关</li><li>结束无序：上面的都无序，结束时间怎么可能有序</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>使用多线程时，千万不要通过延时等方式去掌控顺序</p><h1 id="多线程控制顺序"><a href="#多线程控制顺序" class="headerlink" title="多线程控制顺序"></a>多线程控制顺序</h1><h2 id="异步回调"><a href="#异步回调" class="headerlink" title="异步回调"></a>异步回调</h2><h2 id="死循环IsCompleted等待"><a href="#死循环IsCompleted等待" class="headerlink" title="死循环IsCompleted等待"></a>死循环IsCompleted等待</h2><h2 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h2><h2 id="EndInvoke获得返回值"><a href="#EndInvoke获得返回值" class="headerlink" title="EndInvoke获得返回值"></a>EndInvoke获得返回值</h2><h1 id="使用各个版本的多线程处理方式"><a href="#使用各个版本的多线程处理方式" class="headerlink" title="使用各个版本的多线程处理方式"></a>使用各个版本的多线程处理方式</h1><h2 id="Thread"><a href="#Thread" class="headerlink" title="Thread"></a>Thread</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread的API特别丰富，可以玩的很花哨，但是其实大部分人都玩不好，因为线程资源是操作系统管理的，相应并部灵敏，所以没那么好控制</span></span><br><span class="line"><span class="comment">// Thread启动线程是没限制的，一个for循环启动几百万个线程，分分钟搞死服务器</span></span><br><span class="line">ThreadStart threadHandler = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"Thread Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>); </span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"Thread End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> thread = <span class="keyword">new</span> Thread(threadHandler);</span><br><span class="line">thread.Start();</span><br></pre></td></tr></table></figure><h2 id="ThreadPool"><a href="#ThreadPool" class="headerlink" title="ThreadPool"></a>ThreadPool</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ThreadPool：池化资源管理设计思想，线程是一种资源，以前要用到线程就去申请一个，使用完释放掉。</span></span><br><span class="line"><span class="comment">// 这样是一种浪费，池化就是一个容器，容器提前申请一批线程，程序需要使用线程，直接找容器获取，用完再放回容器(通过控制资源的状态)，避免频繁的申请和销毁，容器自己还会根据限制的数量去申请和释放</span></span><br><span class="line"><span class="comment">// 好处：1.线程服用，2.可以限制最大线程数量</span></span><br><span class="line"><span class="comment">// 缺点：ThreadPool的API太少了，线程等待顺序控制比较弱，影响了实战</span></span><br><span class="line">WaitCallback callback = o =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"ThreadPool Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"ThreadPool End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">ThreadPool.QueueUserWorkItem(callback);</span><br></pre></td></tr></table></figure><h2 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Task:多线程最佳实践</span></span><br><span class="line"><span class="comment">// 优点：1.Task的线程券是线程池的线程  2.提供了丰富的API，非常适合开发实践</span></span><br><span class="line">Action action = () =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"Task Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"Task End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">Task task = <span class="keyword">new</span> Task(action);</span><br><span class="line">task.Start();</span><br></pre></td></tr></table></figure><h2 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h2><p>示例：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Parallel：并行编程</span></span><br><span class="line"><span class="comment">// 可以同时执行多个操作，同时主线程也会参与计算，不会闲置。可以节约一个线程</span></span><br><span class="line"><span class="comment">// 可以通过ParallelOptions的MaxDegreeOfParallelism控制最大并发数量</span></span><br><span class="line">Parallel.Invoke(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Parallel 1 Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"Parallel 1 End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Parallel 2 Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"Parallel 2 End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    () =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"Parallel 3 Start。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">        Thread.Sleep(<span class="number">2000</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"Parallel 3 End。。。<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h1 id="Task比较全面示例"><a href="#Task比较全面示例" class="headerlink" title="Task比较全面示例"></a>Task比较全面示例</h1><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Coding</span>(<span class="params"><span class="keyword">string</span> dev, <span class="keyword">string</span> module</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> random = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">var</span> stopWatch = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">    stopWatch.Start();</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;dev&#125;</span>开发<span class="subst">&#123;module&#125;</span>模块 开始.......... ManagedThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    Thread.Sleep(random.Next(<span class="number">1000</span>, <span class="number">5000</span>));</span><br><span class="line">    stopWatch.Stop();</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;dev&#125;</span>开发<span class="subst">&#123;module&#125;</span>模块 完成.......... ManagedThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>   共耗时<span class="subst">&#123;stopWatch.ElapsedMilliseconds&#125;</span>毫秒"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AllJob</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"谈需求..."</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"选成员..."</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"分配模块..."</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Task&gt; tasks = <span class="keyword">new</span> List&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">    tasks.Add(Task.Run(() =&gt; Coding(<span class="string">"张小三"</span>, <span class="string">"用户管理"</span>)));</span><br><span class="line">    tasks.Add(Task.Run(() =&gt; Coding(<span class="string">"李筱思"</span>, <span class="string">"商品管理"</span>)));</span><br><span class="line">    tasks.Add(Task.Run(() =&gt; Coding(<span class="string">"王小五"</span>, <span class="string">"订单管理"</span>)));</span><br><span class="line">    tasks.Add(Task.Run(() =&gt; Coding(<span class="string">"赵小六"</span>, <span class="string">"售后管理"</span>)));</span><br><span class="line"></span><br><span class="line">    TaskFactory taskFactory = <span class="keyword">new</span> TaskFactory();</span><br><span class="line">    taskFactory.ContinueWhenAny(tasks.ToArray(), t =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"达到里程碑...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 等待全部任务完成后，启动一个新的task来完成后续动作</span></span><br><span class="line">    taskFactory.ContinueWhenAll(tasks.ToArray(), tArray =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"项目上线...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"项目验收...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">$"支付费用...  ManagerThreadId=<span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    // 会阻塞当前线程，直到任一任务结束</span></span><br><span class="line"><span class="comment">    Task.WaitAny(tasks.ToArray());</span></span><br><span class="line"><span class="comment">    Console.WriteLine("达到里程碑...");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 等待上面所有的多线程都计算完毕</span></span><br><span class="line"><span class="comment">    // 会阻塞当前线程，直到全部任务结束</span></span><br><span class="line"><span class="comment">    Task.WaitAll(tasks.ToArray());</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Console.WriteLine("项目上线...");</span></span><br><span class="line"><span class="comment">    Console.WriteLine("项目验收...");</span></span><br><span class="line"><span class="comment">    Console.WriteLine("支付费用...");</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多线程安全"><a href="#多线程安全" class="headerlink" title="多线程安全"></a>多线程安全</h1><p>如果一段代码，单线程执行和多线程执行结果不一致，就表明由线程安全问题</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机概念&quot;&gt;&lt;a href=&quot;#计算机概念&quot; class=&quot;headerlink&quot; title=&quot;计算机概念&quot;&gt;&lt;/a&gt;计算机概念&lt;/h1&gt;&lt;h2 id=&quot;进程&quot;&gt;&lt;a href=&quot;#进程&quot; class=&quot;headerlink&quot; title=&quot;进程&quot;&gt;&lt;/a&gt;进
      
    
    </summary>
    
    
      <category term="C#" scheme="http://www.dimsum.fun/categories/C/"/>
    
    
      <category term="C#" scheme="http://www.dimsum.fun/tags/C/"/>
    
      <category term="多线程" scheme="http://www.dimsum.fun/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习17--触发器</title>
    <link href="http://www.dimsum.fun/2020/05/24/41.TSqlReview17/"/>
    <id>http://www.dimsum.fun/2020/05/24/41.TSqlReview17/</id>
    <published>2020-05-24T05:24:00.000Z</published>
    <updated>2020-05-24T06:11:11.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>触发器是数据库服务器中发生事件时自动执行的特种存储过程</p><h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><ul><li>DML触发器：当发生数据操作语言，如<code>INSERT</code>、<code>UPDATE</code>或<code>DELETE</code>时，执行的触发器</li><li>DDL触发器：当发生数据定义语言，如<code>CREATE</code>、<code>ALTER</code>或<code>DROP</code>时，执行的触发器</li><li>登陆触发器：与SQL Server示例建立用户会话时执行的触发器</li></ul><h1 id="DML触发器"><a href="#DML触发器" class="headerlink" title="DML触发器"></a>DML触发器</h1><p>DML触发器有点：DML触发器类似于约束，可以强制实体完整性或域完整性；当约束支持的功能无法满足应用程序的功能要求时，DML触发器非常有用</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'TR_INSERT'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> TR_INSERT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TR_INSERT</span><br><span class="line"><span class="keyword">ON</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">PRINT <span class="string">'插入学生表成功'</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--测试触发INSERT触发器</span></span><br><span class="line"><span class="keyword">INSERT</span> dbo.STUDENT(<span class="keyword">NAME</span>,SEX,Age) <span class="keyword">VALUES</span>(<span class="string">'Alice'</span>,<span class="string">'女'</span>,<span class="number">24</span>)</span><br></pre></td></tr></table></figure><h1 id="触发器工作原理"><a href="#触发器工作原理" class="headerlink" title="触发器工作原理"></a>触发器工作原理</h1><p>SQL Server创建了两个专用表：<code>inserted</code>和<code>deleted</code>表，这是两个逻辑表，由系统维护，不允许用户直接对两个表进行修改。他们存放在内存中，不存放在数据库中。这两个表的结构总是与被触发器作用的表的结构相同</p><ul><li><p>inserted表：存放由于<code>INSERT</code>或<code>UPDATE</code>语句的执行而要加到该触发表中去的所有新行。即用于插入或更新表的新行值，在插入或更新表的同时，也将其副本存储<code>inserted</code>表中。因为在<code>inserted</code>表中的行总是与触发表中的新行相同</p></li><li><p>deleted表：存放由于<code>DELETE</code>或<code>UPDATE</code>语句的执行而要从该触发表中删除的所有行。也就是说，把触发表中要删除或要更新的旧行移到<code>deleted</code>表中。因此<code>deleted</code>表和触发表的行不相同</p></li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当向成绩表插入学生多个课程的成绩时，学生的总分发生相应变化</span></span><br><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'TR_SCORE'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> TR_SCORE</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> TR_SCORE</span><br><span class="line"><span class="keyword">ON</span> dbo.SCORE</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">INSERT</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> @SCORE <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SELECT</span> @SCORE=SCORE <span class="keyword">FROM</span> inserted</span><br><span class="line"><span class="keyword">UPDATE</span> dbo.TOTALSCORE <span class="keyword">SET</span> TOTALSCORE=TOTALSCORE+@SCORE</span><br><span class="line">PRINT <span class="string">'学生总成绩修改成功'</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="禁用触发器"><a href="#禁用触发器" class="headerlink" title="禁用触发器"></a>禁用触发器</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">DISABLE</span> <span class="keyword">TRIGGER</span> TR_INSERT</span><br></pre></td></tr></table></figure><h1 id="启用触发器"><a href="#启用触发器" class="headerlink" title="启用触发器"></a>启用触发器</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.SCORE</span><br><span class="line"><span class="keyword">ENABLE</span> <span class="keyword">TRIGGER</span> TR_SCORE</span><br></pre></td></tr></table></figure><h1 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TRIGGER</span> dbo.TR_SCORE</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h1&gt;&lt;p&gt;触发器是数据库服务器中发生事件时自动执行的特种存储过程&lt;/p&gt;
&lt;h1 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习16--函数</title>
    <link href="http://www.dimsum.fun/2020/05/24/40.TSqlReview16/"/>
    <id>http://www.dimsum.fun/2020/05/24/40.TSqlReview16/</id>
    <published>2020-05-24T03:42:00.000Z</published>
    <updated>2020-05-24T06:11:11.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h1><ul><li>内置函数：SQL Server自带</li><li>用户自定义函数：用户自己创建的函数</li></ul><h1 id="常用的内置函数"><a href="#常用的内置函数" class="headerlink" title="常用的内置函数"></a>常用的内置函数</h1><h2 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h2><ul><li>GETDATE() –返回当前日期时间</li><li>CURRENT_TIMESTAMP –返回当前日期时间</li><li>YEAR()  –返回日期中的年</li><li>MONTH()  –返回日期中的月</li><li>DAY()  –返回日期中的日</li><li>SELECT DATEPART()  –返回日期中指定部分的日期，如SELECT DATEPART(QUARTER,GETDATE())</li><li>DATEADD  –返回给日期添加指定部分的数量后的日期，如SELECT DATEADD(YEAR,2,GETDATE())</li><li>DATEDIFF  –返回指定两个日期指定部分的差，如SELECT DATEDIFF(YEAR,GETDATE(),’1991-08-22 00:00:00’)</li></ul><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><ul><li>LEFT()  –从字符串左边开始返回指定个数的字符串，如:SELECT LEFT(‘张三’,1)</li><li>RIGHT()  –从字符串右边开始返回指定个数的字符串，如:SELECT RIGHT(‘李四’,1)</li><li>LEN()  –返回字符串的个数，如:SELECT LEN(‘王五’)</li><li>DATALENGTH()  –返回字符串的字节数，如:SELECT DATALENGTH(‘赵六’)</li><li>LTRIM()  –返回删除左边的空格的字符串，如:SELECT LTRIM(‘ 深田咏美’)</li><li>RTRIM()  –返回删除右边的空格的字符串，如:SELECT RTRIM(‘波多野结衣  ‘)</li><li>LOWER()  –将大写字符转成小写字符</li><li>UPPER()  –将小写字符转为大写字符</li><li>SUBSTRING()  –返回字符串中的一部分字符，如:SELECT SUBSTRING(‘张三李四王五赵六’,2,2)</li></ul><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><ul><li>CAST()  –将一种数据类型转换为另一种数据类型，如:SELECT CAST(‘2016-12-1’ AS datetime2)</li><li>CONVERT()  –将一种数据类型转换为另一种数据类型，如:SELECT CONVERT(datetime2,’2020-05-06’)<br>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="keyword">CAST</span>(AGE <span class="keyword">AS</span> <span class="built_in">BIGINT</span>)) <span class="keyword">FROM</span> STUDENT</span><br></pre></td></tr></table></figure></li><li>ISNULL  –使用指定的替换值替换NULL<br>示例：<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ISNULL</span>(ADDRESS,<span class="string">'中国'</span>) <span class="keyword">FROM</span> STUDENT</span><br></pre></td></tr></table></figure></li><li>NEWID()  –创建uniqueidentifier类型的唯一值，如：SELECT NEWID()</li><li>ROUND()  –返回一个数值，舍入到指定的长度，如:SELECT ROUND(123.1243,2),ROUND(123.566,0,1),ROUND(123.456,-2,1)</li></ul><h1 id="用户自定义函数"><a href="#用户自定义函数" class="headerlink" title="用户自定义函数"></a>用户自定义函数</h1><p>SQL Server用户定义函数时接受参数、执行操作(例如复杂计算)并将操作解雇以值得形式返回得例程。返回值可以是单个标量值或结果集。用户定义函数不能用于执行修改数据库状态操作</p><p>使用用户定义函数的优点：</p><ul><li>可重复使用</li><li>执行速度更快</li><li>减少网络流量</li></ul><p>函数类型：<br>标量函数：返回单个值<br>表值函数：用户定义表值函数返回<code>TABLE</code>数据类型</p><h2 id="标量函数"><a href="#标量函数" class="headerlink" title="标量函数"></a>标量函数</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'FN_AGE'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> FN_AGE</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FN_AGE</span><br><span class="line">(@<span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>))  <span class="comment">--定义输入参数及数据类型</span></span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">INT</span>  <span class="comment">--定义返回值数据类型</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> @AGE <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SELECT</span> @AGE=Age <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=@<span class="keyword">NAME</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">IF</span> @AGE <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">SET</span> @AGE=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RETURN</span> @AGE <span class="comment">--指定返回值变量</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> dbo.FN_AGE(<span class="string">'JAME'</span>) <span class="comment">--必须加上所属架构dbo，否则会提示：不是可以识别的函数名称</span></span><br></pre></td></tr></table></figure><h2 id="表值函数"><a href="#表值函数" class="headerlink" title="表值函数"></a>表值函数</h2><h3 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'FN_TABLE'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> FN_TABLE</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> FN_TABLE</span><br><span class="line">(@<span class="keyword">ID</span> <span class="built_in">INT</span>)  <span class="comment">--定义输入参数及数据类型</span></span><br><span class="line"><span class="keyword">RETURNS</span> <span class="keyword">TABLE</span> <span class="comment">--返回类型为TABLE</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">RETURN</span>  <span class="comment">--直接用RETURN，不能使用BEGIN...END块</span></span><br><span class="line">(  <span class="comment">--必须使用括号</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,Age <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span>=@<span class="keyword">ID</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="调用-1"><a href="#调用-1" class="headerlink" title="调用"></a>调用</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.FN_TABLE(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;内置函数：SQL Server自带&lt;/li&gt;
&lt;li&gt;用户自定义函数：用户自己创建的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习15--事务</title>
    <link href="http://www.dimsum.fun/2020/05/24/39.TSqlReview15/"/>
    <id>http://www.dimsum.fun/2020/05/24/39.TSqlReview15/</id>
    <published>2020-05-24T02:19:00.000Z</published>
    <updated>2020-05-24T06:11:11.138Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a></li><li><a href="#sql-server%e4%ba%8b%e5%8a%a1">SQL Server事务</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%8f%90%e4%ba%a4%e4%ba%8b%e5%8a%a1">创建提交事务</a></li><li><a href="#%e6%a0%87%e8%ae%b0%e4%b8%80%e4%b8%aa%e4%ba%8b%e5%8a%a1">标记一个事务</a></li><li><a href="#%e5%9b%9e%e6%bb%9a%e4%ba%8b%e5%8a%a1">回滚事务</a></li><li><a href="#%e5%9c%a8%e4%ba%8b%e5%8a%a1%e5%86%85%e8%ae%be%e7%bd%ae%e4%bf%9d%e5%ad%98%e7%82%b9">在事务内设置保存点</a></li><li><a href="#%e5%9c%a8%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e4%b8%ad%e4%bd%bf%e7%94%a8%e4%ba%8b%e5%8a%a1">在存储过程中使用事务</a></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>事务是单个工作单元，如果某一事务成功，则在该事务中进行的所有数据修改均会提交，成为数据库中的永久组成部分，如果该事务遇到错误且必须取消或回滚，则所有数据修改均被清楚</p><h1 id="SQL-Server事务"><a href="#SQL-Server事务" class="headerlink" title="SQL Server事务"></a>SQL Server事务</h1><ul><li>自动提交事务：每条单独的语句都是一个事务</li><li>显式事务：每个事务均已<code>BEGIN TRANSACTION</code>语句显示开始，已<code>COMMIT</code>或<code>ROLLBACK</code>语句显式结束</li><li>隐式事务：在前一个事务完成时新事务隐式启动，但每个事务仍已<code>COMMIT</code>或<code>ROLLBACK</code>语句显式结束</li></ul><h1 id="创建提交事务"><a href="#创建提交事务" class="headerlink" title="创建提交事务"></a>创建提交事务</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> UP_STU <span class="comment">--表示开始一个事务，BEGIN TRANSACTION使@@TRANCOUNT值按1递增</span></span><br><span class="line"><span class="comment">--SELECT @@TRANCOUNT  --查询@@TRANCOUNT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> Age=<span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span> UP_STU  <span class="comment">--表示提交一个事务，仅当对数据库的操作全部正确时，才可以提交事务。COMMIT TRANSACTION时@@TRANCOUNT值按1递减</span></span><br><span class="line"><span class="comment">--SELECT @@TRANCOUNT</span></span><br></pre></td></tr></table></figure><h1 id="标记一个事务"><a href="#标记一个事务" class="headerlink" title="标记一个事务"></a>标记一个事务</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> UP_STU</span><br><span class="line"><span class="keyword">WITH</span> MARK <span class="string">'修改学生年龄'</span> <span class="comment">--使用WITH MARK来标记事务</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> Age=<span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Hello'</span></span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span> UP_STU</span><br></pre></td></tr></table></figure><p><em>注：标记事务时事务名于事务日志中，在还原数据库时可将数据库还原到标记的事务</em></p><h1 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> UP_STU</span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> Age=<span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Hello'</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TRANSACTION</span> UP_STU <span class="comment">--回滚事务到事务的起点，清除自事务起点所作的所有数据的修改，ROLLBACK TRANSACTION使@@TRANCOUNT值递减到0</span></span><br></pre></td></tr></table></figure><h1 id="在事务内设置保存点"><a href="#在事务内设置保存点" class="headerlink" title="在事务内设置保存点"></a>在事务内设置保存点</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> UP_STU</span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> Age=<span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Hello'</span></span><br><span class="line"><span class="keyword">SAVE</span> <span class="keyword">TRANSACTION</span> TRAN_SAVE</span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> Age=<span class="number">12</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'World'</span></span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TRANSACTION</span> TRAN_SAVE <span class="comment">--回滚到事务的保存点位置，ROLLBACK TRANSACTION savePointName 不影响@@TRANCOUNT</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> Age=<span class="number">13</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'World'</span></span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span> UP_STU</span><br></pre></td></tr></table></figure><h1 id="在存储过程中使用事务"><a href="#在存储过程中使用事务" class="headerlink" title="在存储过程中使用事务"></a>在存储过程中使用事务</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">BEGIN</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> TRAN1 <span class="comment">--外层事务</span></span><br><span class="line"><span class="keyword">UPDATE</span> STUDENT <span class="keyword">SET</span> Age=<span class="number">10</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Hello'</span></span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span> SUBTRAN1  <span class="comment">--嵌套事务</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT(<span class="keyword">NAME</span>,Age,SEX) <span class="keyword">VALUES</span>(<span class="string">'JAME'</span>,<span class="number">12</span>,<span class="string">'男'</span>)</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span> SUBTRAN1</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span> TRAN1</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line"><span class="keyword">IF</span> @@TRANCOUNT &gt; <span class="number">0</span> <span class="comment">--@@TRANCOUNT&gt;0表示在TRY块中的事务没有成功提交，那么就回滚整个外层事务</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">PRINT @@TRANCOUNT</span><br><span class="line"><span class="keyword">SELECT</span> ERROR_LINE(),ERROR_MESSAGE(),ERROR_PROCEDURE()</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TRANSACTION</span> TRAN1</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span>  <span class="comment">--ELSE就是@@TRANCOUNT的值为0，说明事务都已经全部提交了</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a6%82%e5%bf%b5&quot;&gt;概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#sql-server%e4%ba%8b%e5%8a%a1&quot;&gt;SQL Server事务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%88%9b
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习14--游标</title>
    <link href="http://www.dimsum.fun/2020/05/23/38.TSqlReview14/"/>
    <id>http://www.dimsum.fun/2020/05/23/38.TSqlReview14/</id>
    <published>2020-05-23T08:54:00.000Z</published>
    <updated>2020-05-23T10:12:55.673Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a><ul><li><a href="#%e6%b8%b8%e6%a0%87%e7%b1%bb%e5%9e%8b">游标类型：</a><ul><li><a href="#%e5%8f%aa%e8%bf%9b">只进</a></li><li><a href="#%e9%9d%99%e6%80%81%e4%b8%8d%e6%95%8f%e6%84%9f">静态/不敏感</a></li><li><a href="#%e5%8a%a8%e6%80%81">动态</a></li><li><a href="#%e9%94%ae%e9%9b%86">键集</a></li></ul></li></ul></li><li><a href="#%e4%bd%bf%e7%94%a8%e7%ae%80%e5%8d%95%e7%9a%84%e6%b8%b8%e6%a0%87">使用简单的游标</a></li><li><a href="#%e4%bd%bf%e7%94%a8while%e5%be%aa%e7%8e%af%e6%a3%80%e7%b4%a2%e6%b8%b8%e6%a0%87%e4%b8%ad%e7%9a%84%e7%bb%93%e6%9e%9c%e9%9b%86">使用WHILE循环检索游标中的结果集</a></li><li><a href="#%e5%9c%a8%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e4%b8%ad%e4%bd%bf%e7%94%a8%e6%b8%b8%e6%a0%87">在存储过程中使用游标</a></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>SQL Server语句产生完整的结果集，但有时候最好对结果进行逐行处理，打开结果集中的游标，即可对结果集进行逐行处理。<strong>游标主要用于存储过程、触发器、批处理中*</strong></p><p>游标通过以下方式来拓展结果处理：</p><ul><li>允许定位在结果集中的特定行</li><li>从结果集的当前位置检索一行或一部分行</li><li>支持对结果集中当前位置的行进行数据修改</li><li>为由其他用户对显示在结果集中的数据库数据所作的更改提供不同级别的可见性支持</li><li>提供脚本、存储过程和触发器中用于访问结果集中的数据的TSQL语句</li></ul><h2 id="游标类型："><a href="#游标类型：" class="headerlink" title="游标类型："></a>游标类型：</h2><h3 id="只进"><a href="#只进" class="headerlink" title="只进"></a>只进</h3><p>只进游标不支持滚动，它只支持游标从头到尾顺序提取。行只在从数据库中提取出来后才检索。对所有由当前用户发出或由其他用户提交、并影响结果集中的行的<code>INSERT、UPDATE、DELETE</code>语句，其效果在这些行从游标中提取时是可见的</p><h3 id="静态-不敏感"><a href="#静态-不敏感" class="headerlink" title="静态/不敏感"></a>静态/不敏感</h3><p>静态游标总是按照打开游标时的原样显示结果集，游标在打开期间，对数据库的<code>INSERT、UPDATE、DELETE</code>影响的行，在游标中都无法反应出来，除非关闭游标重新打开。静态游标在滚动期间很少或根本检测不到变化，但消耗的资源相对很少</p><h3 id="动态"><a href="#动态" class="headerlink" title="动态"></a>动态</h3><p>动态游标与静态游标相对，当游标滚动时，动态游标反应结果集中所做的所有更变，所有用户做的全部<code>INSERT、UPDATE、DELETE</code>语句均通过游标可见</p><h3 id="键集"><a href="#键集" class="headerlink" title="键集"></a>键集</h3><p>由键集驱动的游标由一组唯一标识符(键)控制，这组键称为键集，打开由剪辑驱动的游标时，该游标中各行的成员身份和顺序是固定的</p><h1 id="使用简单的游标"><a href="#使用简单的游标" class="headerlink" title="使用简单的游标"></a>使用简单的游标</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> CUR_STU <span class="keyword">CURSOR</span> <span class="comment">--定义游标</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> SEX=<span class="string">'女'</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">OPEN</span> CUR_STU   <span class="comment">--OPEN打开游标，然后通过执行DECLARE CURSOR语句的TSQL填充游标结果集</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> CUR_STU  <span class="comment">--FETCH从游标表检索行，NEXT依次从结果集中第一行返回数据</span></span><br><span class="line"><span class="keyword">SELECT</span> @@FETCH_STATUS  <span class="comment">--查看@@FETCH_STATUS的值，游标有数据，则状态值=0，如果游标数据被提取完之后这个状态值为-1</span></span><br><span class="line"><span class="keyword">CLOSE</span> CUR_STU  <span class="comment">--CLOSE关闭一个开放的游标，释放当前的结果集，必须对打开的游标使用CLOSE </span></span><br><span class="line"><span class="keyword">DEALLOCATE</span> CUR_STU  <span class="comment">--DEALLOCATE删除游标引用</span></span><br></pre></td></tr></table></figure><h1 id="使用WHILE循环检索游标中的结果集"><a href="#使用WHILE循环检索游标中的结果集" class="headerlink" title="使用WHILE循环检索游标中的结果集"></a>使用WHILE循环检索游标中的结果集</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> CUR_STU <span class="keyword">CURSOR</span></span><br><span class="line"><span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> SEX=<span class="string">'男'</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">OPEN</span> CUR_STU</span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> CUR_STU</span><br><span class="line"><span class="keyword">WHILE</span> (<span class="keyword">SELECT</span> @@FETCH_STATUS)=<span class="number">0</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> CUR_STU</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">CLOSE</span> CUR_STU</span><br><span class="line"><span class="keyword">DEALLOCATE</span> CUR_STU</span><br></pre></td></tr></table></figure><h1 id="在存储过程中使用游标"><a href="#在存储过程中使用游标" class="headerlink" title="在存储过程中使用游标"></a>在存储过程中使用游标</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_UPDATE_STU'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_UPDATE_STU</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_UPDATE_STU</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">BEGIN</span> TRY</span><br><span class="line"><span class="keyword">SET</span> NOCOUNT <span class="keyword">ON</span> <span class="comment">--关闭显示受影响行数消息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> @<span class="keyword">ID</span> <span class="built_in">BIGINT</span> <span class="comment">--定义两个变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> @AGE <span class="built_in">INT</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DECLARE</span> STU_CUR <span class="keyword">CURSOR</span> <span class="keyword">FOR</span>  <span class="comment">--定义游标</span></span><br><span class="line"><span class="keyword">SELECT</span> STU.ID,stu.AGE <span class="keyword">FROM</span> dbo.GRADE GR <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.STUDENT STU <span class="keyword">ON</span> GR.STUDENTID=STU.ID</span><br><span class="line"></span><br><span class="line"><span class="keyword">OPEN</span> STU_CUR  <span class="comment">--打开游标</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> STU_CUR <span class="keyword">INTO</span> @<span class="keyword">ID</span>,@AGE  <span class="comment">--获取第一行赋值给两个变量</span></span><br><span class="line"><span class="keyword">WHILE</span> @@FETCH_STATUS=<span class="number">0</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> AGE=@AGE+<span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">ID</span>=@<span class="keyword">ID</span></span><br><span class="line"><span class="keyword">FETCH</span> <span class="keyword">NEXT</span> <span class="keyword">FROM</span> STU_CUR <span class="keyword">INTO</span> @<span class="keyword">ID</span>,@AGE</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line"><span class="keyword">SELECT</span> ERROR_NUMBER(),ERROR_PROCEDURE(),ERROR_MESSAGE()</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br><span class="line"></span><br><span class="line"><span class="keyword">CLOSE</span> STU_CUR</span><br><span class="line"><span class="keyword">DEALLOCATE</span> STU_CUR</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a6%82%e5%bf%b5&quot;&gt;概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%b8%b8%e6%a0%87%e7%b1%bb%e5%9e%8b&quot;&gt;游标类型：&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%8f%aa%
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习13--流程控制语句</title>
    <link href="http://www.dimsum.fun/2020/05/23/37.TSqlReview13/"/>
    <id>http://www.dimsum.fun/2020/05/23/37.TSqlReview13/</id>
    <published>2020-05-23T08:17:00.000Z</published>
    <updated>2020-05-23T10:12:55.672Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#beginend">BEGIN…END</a></li><li><a href="#ifelse">IF…ELSE…</a></li><li><a href="#while">WHILE</a><ul><li><a href="#%e5%9c%a8while%e4%b8%ad%e4%bd%bf%e7%94%a8breakcontinue">在WHILE中使用BREAK、CONTINUE</a></li></ul></li><li><a href="#goto">GOTO</a><ul><li><a href="#%e4%bd%bf%e7%94%a8goto%e8%af%ad%e5%8f%a5%e5%ae%9e%e7%8e%b0%e5%be%aa%e7%8e%af">使用GOTO语句实现循环</a></li></ul></li><li><a href="#waitfor">WAITFOR</a></li></ul><h1 id="BEGIN…END"><a href="#BEGIN…END" class="headerlink" title="BEGIN…END"></a>BEGIN…END</h1><p>可以包含多个TSQL语言，一次性执行多个TSQL语言</p><h1 id="IF…ELSE…"><a href="#IF…ELSE…" class="headerlink" title="IF…ELSE…"></a>IF…ELSE…</h1><p>当<code>IF</code>中的条件满足时，执行<code>IF</code>条件后的TSQL语句，若<code>IF</code>中的条件不满足，则执行<code>ELSE</code>后的TSQL语句</p><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF 布尔表达式</span><br><span class="line">TSQL</span><br><span class="line">ELSE <span class="comment">--ELSE子句可选</span></span><br><span class="line">TSQL</span><br></pre></td></tr></table></figure><p><strong>注意：<code>IF</code>或<code>ELSE</code>条件只能影响一个TSQL语句，若要在<code>IF</code>或<code>ELSE</code>条件后面执行多个TSQL，则需要用<code>BEGIN...END</code>关键字</strong></p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IF(<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'YOYOYO'</span>)&gt;<span class="number">18</span></span><br><span class="line">PRINT <span class="string">'已成年'</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">PRINT <span class="string">'未成年'</span></span><br></pre></td></tr></table></figure><p>使用嵌套的<code>IF...ELSE...</code>，示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> @age <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SELECT</span> @age=AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'YOYOYO'</span></span><br><span class="line"><span class="keyword">IF</span> @age&gt;=<span class="number">18</span></span><br><span class="line">PRINT <span class="string">'已成年'</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">IF</span>(@age&gt;=<span class="number">12</span>)</span><br><span class="line">PRINT <span class="string">'小朋友'</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">PRINT <span class="string">'小小朋友'</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h1 id="WHILE"><a href="#WHILE" class="headerlink" title="WHILE"></a>WHILE</h1><p>设置重复执行SQL语句或语句块的条件，指要指定的条件为真，就重复执行语句。可以使用<code>BREAK</code>和<code>CONTINUE</code>关键字在循环内部控制<code>WHILE</code>循环中语句的执行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">WHILE (<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span>)&lt;<span class="number">18</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> AGE=AGE+<span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span> <span class="comment">--查询检查结果</span></span><br></pre></td></tr></table></figure><h2 id="在WHILE中使用BREAK、CONTINUE"><a href="#在WHILE中使用BREAK、CONTINUE" class="headerlink" title="在WHILE中使用BREAK、CONTINUE"></a>在WHILE中使用BREAK、CONTINUE</h2><ul><li>BREAK：退出循环，即推出当前循环，执行出现在END关键字后面的语句</li><li>CONTINUE：跳出本次循环，进行循环条件判断</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">WHILE (<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span>)&lt;<span class="number">30</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> AGE=AGE+<span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span></span><br><span class="line"><span class="keyword">IF</span>(<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span>)&lt;<span class="number">22</span></span><br><span class="line">CONTINUE</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line">    BREAK</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span></span><br></pre></td></tr></table></figure><h1 id="GOTO"><a href="#GOTO" class="headerlink" title="GOTO"></a>GOTO</h1><p>将执行流更改到标签处，<code>GOTO</code>语句和标签可在过程、批处理或语句块中的任意位置使用</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用GOTO语句循环出10到20之间的数字</span></span><br><span class="line"><span class="keyword">DECLARE</span> @N <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SET</span> @N=<span class="number">10</span></span><br><span class="line">LABEL:  <span class="comment">--标签名称要以冒号结束</span></span><br><span class="line"><span class="keyword">IF</span> @N&lt;<span class="number">20</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SET</span> @N=@N+<span class="number">1</span></span><br><span class="line">PRINT @N</span><br><span class="line"><span class="keyword">GOTO</span> LABEL  <span class="comment">--GOTO指定跳转的标签名称</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h2 id="使用GOTO语句实现循环"><a href="#使用GOTO语句实现循环" class="headerlink" title="使用GOTO语句实现循环"></a>使用GOTO语句实现循环</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LABEL1:</span><br><span class="line">IF(<span class="keyword">SELECT</span> AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span>)&lt;<span class="number">25</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> AGE=AGE+<span class="number">1</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span></span><br><span class="line"><span class="keyword">GOTO</span> LABEL1</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'Jame'</span></span><br></pre></td></tr></table></figure><h1 id="WAITFOR"><a href="#WAITFOR" class="headerlink" title="WAITFOR"></a>WAITFOR</h1><p>控制语句执行的时间</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">WAITFOR <span class="built_in">TIME</span> <span class="string">'16:52'</span> <span class="comment">--在几点开始执行，不能指定日期</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">WAITFOR DELAY <span class="string">'00:00:10'</span> <span class="comment">--多长时间后开始，最长为24小时，不能指定日期</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#beginend&quot;&gt;BEGIN…END&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#ifelse&quot;&gt;IF…ELSE…&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#while&quot;&gt;WHILE&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习12--CASE表达式</title>
    <link href="http://www.dimsum.fun/2020/05/23/36.TSqlReview12/"/>
    <id>http://www.dimsum.fun/2020/05/23/36.TSqlReview12/</id>
    <published>2020-05-23T07:48:00.000Z</published>
    <updated>2020-05-23T10:12:55.672Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#case%e7%ae%80%e5%8d%95%e8%a1%a8%e8%be%be%e5%bc%8f">CASE简单表达式</a></li><li><a href="#case%e6%90%9c%e7%b4%a2%e8%a1%a8%e8%be%be%e5%bc%8f">CASE搜索表达式</a></li><li><a href="#%e5%9c%a8order-bygroup-by%e4%b8%ad%e4%bd%bf%e7%94%a8case%e8%a1%a8%e8%be%be%e5%bc%8f">在ORDER BY、GROUP BY中使用CASE表达式</a></li><li><a href="#%e5%9c%a8update%e4%b8%ad%e4%bd%bf%e7%94%a8case%e8%a1%a8%e8%be%be%e5%bc%8f">在UPDATE中使用CASE表达式</a></li></ul><h1 id="CASE简单表达式"><a href="#CASE简单表达式" class="headerlink" title="CASE简单表达式"></a>CASE简单表达式</h1><p><code>CASE</code>简单表达式仅用于同行检查，将第一个表达式与每个<code>WHEN</code>子句中的表达式进行等同行检查，以确定它们是否等效</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE,</span><br><span class="line">(<span class="keyword">CASE</span> SEX </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'男'</span> <span class="keyword">THEN</span> <span class="string">'是'</span> </span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'否'</span> </span><br><span class="line"> <span class="keyword">END</span>) <span class="keyword">AS</span> 是否男性</span><br><span class="line"><span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="CASE搜索表达式"><a href="#CASE搜索表达式" class="headerlink" title="CASE搜索表达式"></a>CASE搜索表达式</h1><p><code>CASE</code>搜索表达式按照指定顺序对每个<code>WHEN</code>子句的<strong>布尔表达式</strong>进行计算</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,</span><br><span class="line">(</span><br><span class="line"><span class="keyword">CASE</span> <span class="comment">--注意这里CASE后面没带字段名称</span></span><br><span class="line"><span class="keyword">WHEN</span> AGE &gt; <span class="string">'18'</span> <span class="keyword">THEN</span> <span class="string">'成年'</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">'未成年'</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line">) <span class="keyword">AS</span> 是否成年</span><br><span class="line"><span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="在ORDER-BY、GROUP-BY中使用CASE表达式"><a href="#在ORDER-BY、GROUP-BY中使用CASE表达式" class="headerlink" title="在ORDER BY、GROUP BY中使用CASE表达式"></a>在ORDER BY、GROUP BY中使用CASE表达式</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> AGE&gt;<span class="number">18</span> <span class="keyword">THEN</span> <span class="string">'已成年'</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">'未成年'</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">) <span class="keyword">AS</span> 是否成年,<span class="keyword">COUNT</span>(<span class="keyword">ID</span>) <span class="keyword">AS</span> 人数</span><br><span class="line"><span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">CASE</span> </span><br><span class="line">        <span class="keyword">WHEN</span> AGE&gt;<span class="number">18</span> <span class="keyword">THEN</span> <span class="string">'已成年'</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">'未成年'</span></span><br><span class="line">    <span class="keyword">END</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 是否成年</span><br></pre></td></tr></table></figure><h1 id="在UPDATE中使用CASE表达式"><a href="#在UPDATE中使用CASE表达式" class="headerlink" title="在UPDATE中使用CASE表达式"></a>在UPDATE中使用CASE表达式</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span></span><br><span class="line">AGE=</span><br><span class="line">(</span><br><span class="line"><span class="keyword">CASE</span> <span class="keyword">NAME</span> </span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'Hello'</span> <span class="keyword">THEN</span> <span class="number">18</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="string">'world'</span> <span class="keyword">THEN</span> <span class="number">11</span></span><br><span class="line"><span class="keyword">ELSE</span> AGE</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#case%e7%ae%80%e5%8d%95%e8%a1%a8%e8%be%be%e5%bc%8f&quot;&gt;CASE简单表达式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#case%e6%90%9c%e7%b4%a2%e8%a1%a8%e8%be
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习11--存储过程</title>
    <link href="http://www.dimsum.fun/2020/05/22/35.TSqlReview11/"/>
    <id>http://www.dimsum.fun/2020/05/22/35.TSqlReview11/</id>
    <published>2020-05-22T09:51:00.000Z</published>
    <updated>2020-05-23T10:12:55.672Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e8%a7%a3%e6%9e%90">解析</a></li><li><a href="#%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e7%9a%84%e7%b1%bb%e5%9e%8b">存储过程的类型</a></li><li><a href="#%e7%ae%80%e5%8d%95%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">简单的存储过程</a><ul><li><a href="#%e5%88%9b%e5%bb%ba">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c">执行</a></li><li><a href="#%e4%bf%ae%e6%94%b9">修改</a></li><li><a href="#%e5%88%a0%e9%99%a4">删除</a></li></ul></li><li><a href="#%e6%89%a7%e8%a1%8c%e5%a4%9a%e6%ad%a5%e6%93%8d%e4%bd%9c%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">执行多步操作的存储过程</a></li><li><a href="#%e5%b8%a6%e8%be%93%e5%85%a5%e5%8f%82%e6%95%b0%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">带输入参数的存储过程</a><ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a></li><li><a href="#%e5%88%9b%e5%bb%ba-1">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c-1">执行</a></li></ul></li><li><a href="#%e5%b8%a6%e9%80%9a%e9%85%8d%e7%ac%a6%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">带通配符的存储过程</a><ul><li><a href="#%e5%88%9b%e5%bb%ba-2">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c-2">执行</a></li></ul></li><li><a href="#%e5%b8%a6%e8%be%93%e5%87%ba%e5%8f%82%e6%95%b0%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">带输出参数的存储过程</a><ul><li><a href="#%e5%88%9b%e5%bb%ba-3">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c-3">执行</a></li></ul></li><li><a href="#%e5%b8%a6%e8%a1%a8%e5%80%bc%e5%8f%82%e6%95%b0%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">带表值参数的存储过程</a><ul><li><a href="#%e5%88%9b%e5%bb%ba-4">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c-4">执行</a></li></ul></li><li><a href="#%e5%b8%a6%e5%8f%98%e9%87%8f%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">带变量的存储过程</a><ul><li><a href="#%e6%a6%82%e5%bf%b5-1">概念</a></li><li><a href="#%e5%88%9b%e5%bb%ba-5">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c-5">执行</a></li></ul></li><li><a href="#%e5%8f%af%e6%8d%95%e8%8e%b7%e5%bc%82%e5%b8%b8%e7%9a%84%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b">可捕获异常的存储过程</a><ul><li><a href="#%e6%a6%82%e5%bf%b5-2">概念</a></li><li><a href="#%e5%88%9b%e5%bb%ba-6">创建</a></li><li><a href="#%e6%89%a7%e8%a1%8c-6">执行</a></li></ul></li><li><a href="#%e5%af%b9%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e5%8a%a0%e5%af%86%e5%8f%8a%e9%87%8d%e6%96%b0%e7%bc%96%e8%af%91">对存储过程加密及重新编译</a><ul><li><a href="#%e6%a6%82%e5%bf%b5-3">概念</a></li><li><a href="#%e5%88%9b%e5%bb%ba-7">创建</a></li></ul></li><li><a href="#%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e7%9a%84%e4%bc%98%e5%8c%96">存储过程的优化</a></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>存储过程是由一个或多个<code>Transact-SQL</code>语句构成的一个组</p><p>存储过程可以：</p><ul><li>接受输入参数并以输出参数的格式向调用程序返回多个值</li><li>包含用于在数据库中执行操作的编程语句，这包括调用其他存储过程</li><li>向调用程序返回状态值，以值明成功或失败(以及失败的原因)</li></ul><p>使用存储过程的好处：</p><ul><li>减少了服务器/客户端网络流量</li><li>更强的安全性</li><li>代码的重复使用</li><li>更容易维护</li><li>改进的性能</li></ul><h1 id="存储过程的类型"><a href="#存储过程的类型" class="headerlink" title="存储过程的类型"></a>存储过程的类型</h1><ul><li>用户定义的存储过程：由用户自己创建的存储过程</li><li>临时存储过程：也是由用户创建的存储过程，存储在<code>tempdb</code>中，名字以<code>#</code>开头，仅在创建该过程的会话中存在，会话结束，临时存储过程即被删除(类似临时表)</li><li>系统存储过程：系统存储过程是由SQL Server附带的，系统过程以<code>sp_</code>开头，帮助用户使用、管理数据库</li></ul><h1 id="简单的存储过程"><a href="#简单的存储过程" class="headerlink" title="简单的存储过程"></a>简单的存储过程</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.P_STUDENT  <span class="comment">--EXEC是EXECUTE的简写</span></span><br><span class="line"><span class="keyword">EXECUTE</span> dbo.P_STUDENT</span><br></pre></td></tr></table></figure><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE,SEX <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&gt;<span class="number">13</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> dbo.P_STUDENT</span><br></pre></td></tr></table></figure><h1 id="执行多步操作的存储过程"><a href="#执行多步操作的存储过程" class="headerlink" title="执行多步操作的存储过程"></a>执行多步操作的存储过程</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_COURSE02'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_COURSE02</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_COURSE02</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> COURSE01 <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.COURSE</span><br><span class="line"><span class="keyword">UPDATE</span> COURSE01 <span class="keyword">SET</span> <span class="keyword">NAME</span>=<span class="string">'高数'</span> <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'.NET CORE'</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.COURSE01 <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'JAVA'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.COURSE01</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="带输入参数的存储过程"><a href="#带输入参数的存储过程" class="headerlink" title="带输入参数的存储过程"></a>带输入参数的存储过程</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>输入参数：调用方将数据值传递给存储过程</li><li>输出参数：存储过程将数据值返回给调用方</li><li>变量：可以在存储过程内部存储和传递数据值，不能将数据从外部传递到存储过程内部</li></ul><h2 id="创建-1"><a href="#创建-1" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line">@sex <span class="built_in">CHAR</span>(<span class="number">2</span>),   <span class="comment">--注意：定义参数位置在存储过程名称粥，参数要以@符号开始</span></span><br><span class="line">@age <span class="built_in">INT</span> = <span class="number">18</span>   <span class="comment">--这里是将age参数的默认值设定为18，当参数由默认值的时候，调用方如果没传该参数的值过来，则使用默认值进行执行</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">   <span class="keyword">SELECT</span> <span class="keyword">ID</span>,<span class="keyword">NAME</span>,AGE,SEX <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> SEX=@sex <span class="keyword">AND</span> AGE&gt;@age </span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行-1"><a href="#执行-1" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.P_STUDENT @sex='女',@age=15</span><br></pre></td></tr></table></figure><h1 id="带通配符的存储过程"><a href="#带通配符的存储过程" class="headerlink" title="带通配符的存储过程"></a>带通配符的存储过程</h1><p>示例：</p><h2 id="创建-2"><a href="#创建-2" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line">@<span class="keyword">name</span> <span class="keyword">NVARCHAR</span>(<span class="number">100</span>)   <span class="comment">--参数定义方法不变</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE,SEX <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> @<span class="keyword">name</span>  <span class="comment">--通配符查询得使用LIKE</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行-2"><a href="#执行-2" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.P_STUDENT @name = N'王%'</span><br></pre></td></tr></table></figure><h1 id="带输出参数的存储过程"><a href="#带输出参数的存储过程" class="headerlink" title="带输出参数的存储过程"></a>带输出参数的存储过程</h1><h2 id="创建-3"><a href="#创建-3" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line">@<span class="keyword">name</span> <span class="keyword">NVARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">@age <span class="built_in">INT</span> <span class="keyword">OUTPUT</span>  <span class="comment">--OUTPUT或OUT都表示为输出参数</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">SELECT</span> @age=AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=@<span class="keyword">name</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行-3"><a href="#执行-3" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行带输出参数的存储过程时一定要先使用DECLARE声明参数</span></span><br><span class="line"><span class="keyword">DECLARE</span> @age <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">EXECUTE</span> dbo.P_STUDENT @<span class="keyword">name</span> = N<span class="string">'李筱思'</span>,</span><br><span class="line">                      @age = @age <span class="keyword">OUTPUT</span></span><br><span class="line"><span class="keyword">SELECT</span> @age 返回值age</span><br></pre></td></tr></table></figure><h1 id="带表值参数的存储过程"><a href="#带表值参数的存储过程" class="headerlink" title="带表值参数的存储过程"></a>带表值参数的存储过程</h1><h2 id="创建-4"><a href="#创建-4" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">-- 创建表类型</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'TYPE01'</span>,<span class="string">'TT'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TYPE</span> TYPE01</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TYPE</span> TYPE01 <span class="keyword">AS</span> <span class="keyword">TABLE</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">NAME</span> <span class="keyword">NVARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SEX <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">AGE <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">-- 创建存储过程</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_INSERT_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_INSERT_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_INSERT_STUDENT</span><br><span class="line">@<span class="keyword">DATA</span> TYPE01 READONLY  <span class="comment">--定义输入参数类型为上面定义的TYPE01类型</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT(<span class="keyword">NAME</span>,SEX,AGE) <span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> @<span class="keyword">DATA</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行-4"><a href="#执行-4" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 执行存储类型</span></span><br><span class="line"><span class="comment">-- 先定义表类型的变量@MyData</span></span><br><span class="line"><span class="keyword">DECLARE</span> @MyData <span class="keyword">AS</span> TYPE01</span><br><span class="line"><span class="comment">-- 然后往变量@MyData里添加数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> @MyData</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'Jame'</span>,<span class="string">'男'</span>,<span class="number">12</span> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">'Alice'</span>,<span class="string">'女'</span>,<span class="number">23</span></span><br><span class="line"><span class="comment">-- 执行存储过程，将上面定义的变量传入存储过程</span></span><br><span class="line">EXEC dbo.P_INSERT_STUDENT @<span class="keyword">DATA</span> = @MyData</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="comment">-- 查看执行结果</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="带变量的存储过程"><a href="#带变量的存储过程" class="headerlink" title="带变量的存储过程"></a>带变量的存储过程</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><p>变量：变量分局部变量和全局变量</p><ul><li>局部变量：用户自定义的变量，作用范围在程序内部，局部变量必须先生命，再使用，名称必须以<code>@</code>开头</li><li>全局变量：是SQL系统内部实现定义好的变量，不需要用户参与定义，任何程序均可以随时调用，SQL中共有30多个全局变量，名称都以<code>@@</code>开头，主要用于SQL Server的配置设定值和效能统计数据</li></ul><p>声明局部变量：<code>DECLARE 以@开头的变量名 数据类型(长度)</code></p><p>局部变量复制：</p><ol><li><code>SET 局部变量名=值</code></li><li><code>SELECT 局部变量名=字段名 FROM 表名 ORDER BY 字段名</code>，若<code>SELECT</code>返回值有多个，则数据库引擎会分配最后一个值给变量</li></ol><p>局部变量的作用域：在<code>DECLARE</code>变量开始至脚本或存储过程结束</p><h2 id="创建-5"><a href="#创建-5" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> dbo.P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line">@<span class="keyword">NAME</span> <span class="keyword">NVARCHAR</span>(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> @AGE <span class="built_in">INT</span>  <span class="comment">--注意：参数的定义位置在AS前面，变量的定义位置在AS后面</span></span><br><span class="line"><span class="keyword">SELECT</span> @AGE=AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=@<span class="keyword">NAME</span>  <span class="comment">--通过查询结果给变量复制</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE=@AGE <span class="comment">--使用变量进行查询</span></span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行-5"><a href="#执行-5" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.P_STUDENT @NAME = N'李筱思'</span><br></pre></td></tr></table></figure><h1 id="可捕获异常的存储过程"><a href="#可捕获异常的存储过程" class="headerlink" title="可捕获异常的存储过程"></a>可捕获异常的存储过程</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><p>使用<code>TRY...CATCH</code>结构来捕获并处理异常</p><p>在<code>TRY</code>块中的SQL发生异常，则执行<code>CATCH</code>块中的SQL，<code>TRY...CATCH</code>不可用在用户自定义函数中</p><h2 id="创建-6"><a href="#创建-6" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> dbo.P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line">@<span class="keyword">ID</span> <span class="built_in">CHAR</span>(<span class="number">10</span>),</span><br><span class="line">@<span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">@SEX <span class="built_in">CHAR</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">BEGIN</span> TRY</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT(<span class="keyword">ID</span>,SEX,<span class="keyword">NAME</span>)  <span class="comment">--这里模拟个异常</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">ID</span>,@<span class="keyword">NAME</span>,@SEX</span><br><span class="line"><span class="keyword">END</span> TRY</span><br><span class="line"><span class="keyword">BEGIN</span> CATCH</span><br><span class="line"><span class="keyword">SELECT</span> ERROR_NUMBER() <span class="keyword">AS</span> ERROR_NUM,</span><br><span class="line">               ERROR_PROCEDURE() <span class="keyword">AS</span> ERROR_PROC,</span><br><span class="line">               ERROR_SEVERITY() <span class="keyword">AS</span> ERROR_SEVE,</span><br><span class="line">               ERROR_MESSAGE() <span class="keyword">AS</span> ERROR_MSG</span><br><span class="line"><span class="keyword">END</span> CATCH</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="执行-6"><a href="#执行-6" class="headerlink" title="执行"></a>执行</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXEC dbo.P_STUDENT @ID = '1',</span><br><span class="line">                   @NAME = '123131',</span><br><span class="line">                   @SEX = '131'</span><br></pre></td></tr></table></figure><h1 id="对存储过程加密及重新编译"><a href="#对存储过程加密及重新编译" class="headerlink" title="对存储过程加密及重新编译"></a>对存储过程加密及重新编译</h1><h2 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h2><p>使用<code>EXEC sys.sp_helptext 存储过程名字</code>查看存储过程定义</p><p>使用<code>WITH ENCRYPTION</code>选项对过程定义进行模糊处理</p><p>使用<code>WITH RECOMPILE</code>选项强制重新编译过程：</p><ol><li>数据结构进行了重要更改，则重新编译过程会进行更新并针对这些更改优化过程的查询计划，这样可以提高过程的处理性能</li><li>对过程引用的基础表添加了过程可能从中受益的新索引，可以强制在下次执行过程时对其重新编译</li></ol><h2 id="创建-7"><a href="#创建-7" class="headerlink" title="创建"></a>创建</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">IF</span> OBJECT_ID(<span class="string">'P_STUDENT'</span>,<span class="string">'P'</span>) <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> P_STUDENT</span><br><span class="line">@<span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">WITH</span> ENCRYPTION,RECOMPILE</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">DECLARE</span> @AGE <span class="built_in">INT</span></span><br><span class="line"><span class="keyword">SELECT</span> @AGE=AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=@<span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE=@AGE</span><br><span class="line"><span class="keyword">END</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="存储过程的优化"><a href="#存储过程的优化" class="headerlink" title="存储过程的优化"></a>存储过程的优化</h1><ol><li>在存储过程中使用<code>SET NOCOUNT ON/OFF</code>关闭或启用显示受TSQL语句影响的行计数消息：<strong><code>SET NOCOUNT ON</code>有利于提升过程执行效率</strong></li><li>当在过程中创建或引用数据库对象时使用架构名称，减少数据库引擎解析对象名称所用的处理时间：<strong>就是类似<code>dbo.STUDENT</code>这样的写法，补上前面的<code>dbo</code>，不要直接写<code>STUDENT</code></strong></li><li>避免函数包装在<code>WHERE</code>和<code>JOIN</code>子句中指定的列，这样做会使列具有不确定性并且禁止查询处理器使用索引</li><li>避免在返回许多行数据的<code>SELECT</code>语句中使用标量函数。因为标量函数必须应用于每一行，会降低性能</li><li>避免使用<code>SELECT *</code>。而是应指定所需的列名称</li><li>避免处理或返回过多的数据，尽可能在过程代码中缩小结果的范围</li><li>通过使用<code>BEGIN/END TRANSACTION</code>来使用显示事务并且保留尽可能短的事务。更长的事务意味着更长的记录锁定和更高的死锁风险</li><li>通过<code>TRY...CATCH...</code>功能进行过程内的错误处理，<code>TRY...CATCH...</code>可以封装整个TSQL语句块</li><li>在过程主体中对<code>CREATE TABLE</code>或<code>ALTER TABLE</code>语句引用的所有表列使用<code>DEFAULT</code>关键字，这将禁止将<code>NULL</code>传递到不允许<code>NULL</code>值的列</li><li>对于临时表中的每一列使用<code>NULL</code>或<code>NOT NULL</code></li><li>使用<code>UNION ALL</code>运算符来代替<code>UNION</code>或<code>OR</code>运算符，除非存在针对非重复值的特定需要。<code>UNION ALL</code>运算符要求更少的处理开销，因为重复值不从结果集中筛选出来</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%a7%a3%e6%9e%90&quot;&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e7%9a%84%e7%b1%bb%e5%9e%8b&quot;&gt;存储过程的类型&lt;/a
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习10--索引</title>
    <link href="http://www.dimsum.fun/2020/05/22/34.TSqlReview10/"/>
    <id>http://www.dimsum.fun/2020/05/22/34.TSqlReview10/</id>
    <published>2020-05-22T08:19:00.000Z</published>
    <updated>2020-05-22T11:00:01.085Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e8%a7%a3%e6%9e%90">解析</a></li><li><a href="#%e5%88%86%e7%b1%bb">分类</a><ul><li><a href="#%e8%81%9a%e9%9b%86%e7%b4%a2%e5%bc%95">聚集索引</a></li><li><a href="#%e9%9d%9e%e8%81%9a%e9%9b%86%e7%b4%a2%e5%bc%95">非聚集索引</a></li><li><a href="#%e5%94%af%e4%b8%80%e7%b4%a2%e5%bc%95">唯一索引</a></li></ul></li><li><a href="#%e6%9f%a5%e8%af%a2%e4%bc%98%e5%8c%96%e5%99%a8%e5%a6%82%e4%bd%95%e4%bd%bf%e7%94%a8%e7%b4%a2%e5%bc%95">查询优化器如何使用索引</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95">创建索引</a><ul><li><a href="#%e9%9a%90%e5%bc%8f%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95">隐式创建索引</a></li><li><a href="#%e6%98%be%e7%a4%ba%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95">显示创建索引</a></li></ul></li><li><a href="#%e5%88%a0%e9%99%a4%e7%b4%a2%e5%bc%95">删除索引</a></li><li><a href="#%e6%9f%a5%e7%9c%8bsql-server%e7%9a%84%e6%9f%a5%e8%af%a2%e6%ad%a5%e9%aa%a4">查看SQL Server的查询步骤</a></li><li><a href="#%e5%9c%a8%e5%93%aa%e4%ba%9b%e5%ad%97%e6%ae%b5%e5%88%9b%e5%bb%ba%e7%b4%a2%e5%bc%95">在哪些字段创建索引</a></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>索引就像书中的目录，使你能快速定位到所需的信息，数据库中的索引可以加快检索表或视图中的信息速度。索引包含表或视图中的一列或多列生成的键，这些键存储在一个结构(B树)中，时SQL Server可以快速有效的查找域键值相关联的行</p><p>索引类似一个微表，索引中只存储索引所在列的件值，需要查询数据时，若可以用到索引中的列，则首先会在索引表中查询，而不是直接从数据表中查询数据</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><h2 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h2><p>聚集索引是指数据表回根据索引表中键值的顺序存储和排序表数据，因为一张表只能按照一个顺序排序，所以一张表只能由一个聚集索引</p><h2 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h2><p>非聚集索引中的键值只是在逻辑上排序，并不对表中的数据进行排序，因此叫做非聚集索引，一张表可以有多个非聚集索引，当一个表有聚集索引时，非聚集索引时指向聚集索引的指针，也就是说当使用非聚集索引查询数据时，SQL Server先从非聚集索引中查到该键值，再去查该键值对应的聚集索引键值，再从聚集索引中找到需要的数据，如果表中没有聚集索引，那么非聚集索引就是一个行定位符</p><h2 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h2><p>唯一索引指的时不允许该索引键列有两行重复的值，聚集索引和非聚集索引都可以是唯一索引</p><h1 id="查询优化器如何使用索引"><a href="#查询优化器如何使用索引" class="headerlink" title="查询优化器如何使用索引"></a>查询优化器如何使用索引</h1><p>当执行查询时，查询优化器评估可用于检索数据的每个方法，然后选择最有效的方法，可能采用的方法包括扫描表和扫描一个或多个索引(如果有).</p><p>扫描表时，查询优化器读取表中的所有行，并提取满足查询条件的行，扫描表会有许多磁盘I/O操作，并占用大量资源</p><p>查询优化器使用索引时，搜索索引键列，查找到查询所需行的存储位置，然后从该位置提取匹配行，通常，搜索索引比搜索表要快很多，因为索引与表不同，一般每行包含的列非常少，且行遵循排序顺序</p><h1 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h1><h2 id="隐式创建索引"><a href="#隐式创建索引" class="headerlink" title="隐式创建索引"></a>隐式创建索引</h2><p>创建<code>PRIMARY KEY</code>约束后，会自动创建唯一聚集索引；创建<code>UNIQUE</code>约束后，会自动创建唯一非聚集索引<br>这里不做示例，需要查看示例返回看约束</p><h2 id="显示创建索引"><a href="#显示创建索引" class="headerlink" title="显示创建索引"></a>显示创建索引</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建唯一聚集索引</span></span><br><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> CLUSTERED <span class="keyword">INDEX</span> INDEX_ID  <span class="comment">--创建唯一聚集索引</span></span><br><span class="line"><span class="keyword">ON</span> dbo.STUDENT(<span class="keyword">ID</span> <span class="keyword">DESC</span>) <span class="comment">--指定STUDENT表的ID列</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建唯一非聚集索引</span></span><br><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> NONCLUSTERED <span class="keyword">INDEX</span> INDEX_NAME</span><br><span class="line"><span class="keyword">ON</span> dbo.STUDENT(<span class="keyword">NAME</span> <span class="keyword">DESC</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">INDEX</span> dbo.STUDENT.[INDEX_NAME]</span><br></pre></td></tr></table></figure><h1 id="查看SQL-Server的查询步骤"><a href="#查看SQL-Server的查询步骤" class="headerlink" title="查看SQL Server的查询步骤"></a>查看SQL Server的查询步骤</h1><p>查看SQL Server的查询步骤，已经是否选择了哪个索引，帮助用户分析哪些索引被系统引用</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> SHOWPLAN_ALL <span class="keyword">ON</span> <span class="comment">--开启显示查询步骤</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="在哪些字段创建索引"><a href="#在哪些字段创建索引" class="headerlink" title="在哪些字段创建索引"></a>在哪些字段创建索引</h1><ol><li>查询经常引用的列可创建聚集索引</li><li>频繁更新的列不应该创建聚集索引，可创建非聚集索引</li><li>用户<code>GROUP BY</code>和<code>ORDER BY</code>的列</li><li>若要创建组合聚集索引，应把最常用的字段放在组合键中靠前的位置</li><li>一个表中的索引最好不要超过5个，因为创建索引后，向表中写数据时，SQL Server既要向数据表中写数据，同时也要向创建的索引中写数据，索引越多需要写入越多，因此新建索引时要考虑这个因素</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%a7%a3%e6%9e%90&quot;&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%88%86%e7%b1%bb&quot;&gt;分类&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%81%9a%e9%9b%86%e7%b4%a2%e5
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习09--视图</title>
    <link href="http://www.dimsum.fun/2020/05/22/33.TSqlReview09/"/>
    <id>http://www.dimsum.fun/2020/05/22/33.TSqlReview09/</id>
    <published>2020-05-22T07:36:00.000Z</published>
    <updated>2020-05-22T11:00:01.085Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e8%a7%a3%e6%9e%90">解析</a></li><li><a href="#%e8%a7%86%e5%9b%be%e7%9a%84%e4%bd%9c%e7%94%a8">视图的作用</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%a7%86%e5%9b%be">创建视图</a></li><li><a href="#%e4%bf%ae%e6%94%b9%e8%a7%86%e5%9b%be">修改视图</a></li><li><a href="#%e6%9b%b4%e6%96%b0%e8%a7%86%e5%9b%be%e6%95%b0%e6%8d%ae">更新视图数据</a></li><li><a href="#%e4%bd%bf%e7%94%a8%e7%b3%bb%e7%bb%9f%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e6%9f%a5%e7%9c%8b%e5%88%9b%e5%bb%ba%e8%a7%86%e5%9b%be%e8%84%9a%e6%9c%ac">使用系统存储过程查看创建视图脚本</a></li><li><a href="#%e5%8a%a0%e5%af%86%e8%a7%86%e5%9b%be">加密视图</a></li><li><a href="#%e5%88%a0%e9%99%a4%e8%a7%86%e5%9b%be">删除视图</a></li></ul><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>视图是一个虚拟表，其内容由查询定义，同表一样，视图包含一系列带有名称的列和行数据，行和列数据来自定义视图的查询所引用的表，并且在引用视图时动态生成</p><h1 id="视图的作用"><a href="#视图的作用" class="headerlink" title="视图的作用"></a>视图的作用</h1><ol><li>集中用户需要的数据</li><li>用作安全机制，数据库管理元只允许用户通过视图查询数据，而不授予用户直接访问视图基础表的权限</li><li>提高性能，存储复杂查询</li></ol><h1 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> V_BEST_SCORE</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> SCORE&gt;<span class="number">90</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> dbo.V_BEST_SCORE</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> SCORE&gt;<span class="number">95</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="更新视图数据"><a href="#更新视图数据" class="headerlink" title="更新视图数据"></a>更新视图数据</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.V_BEST_SCORE <span class="keyword">SET</span> SCORE=<span class="number">96</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p><em>注：更新视图数据同时也会更新源表数据</em></p><h1 id="使用系统存储过程查看创建视图脚本"><a href="#使用系统存储过程查看创建视图脚本" class="headerlink" title="使用系统存储过程查看创建视图脚本"></a>使用系统存储过程查看创建视图脚本</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXEC sys.sp_helptext 'V_BEST_SCORE'</span><br></pre></td></tr></table></figure><h1 id="加密视图"><a href="#加密视图" class="headerlink" title="加密视图"></a>加密视图</h1><p>使用<code>WITH ENCRYPTION</code>加密视图脚本，<code>WITH CHECK OPTION</code>强制更新视图的数据并且符合创建视图时的筛选条件<br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> dbo.V_BEST_SCORE <span class="keyword">WITH</span> ENCRYPTION</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> SCORE&gt;<span class="number">90</span></span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">CHECK</span> <span class="keyword">OPTION</span></span><br></pre></td></tr></table></figure><p>加密了视图之后，使用<code>sp_helptext</code>存储过程就无法查看视图脚本了</p><p>使用<code>WITH CHECK OPTION</code>表示如果更新视图数据，必须保证更新完数据还在视图里，即参照上面的示例，如果将<code>SCORE</code>更新成91，则可以更新成功，如果将<code>SCORE</code>更新成89，则无法更新成功</p><h1 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> dbo.V_BEST_SCORE</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%a7%a3%e6%9e%90&quot;&gt;解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%a7%86%e5%9b%be%e7%9a%84%e4%bd%9c%e7%94%a8&quot;&gt;视图的作用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习08--数据完整性(约束)</title>
    <link href="http://www.dimsum.fun/2020/05/22/32.TSqlReview08/"/>
    <id>http://www.dimsum.fun/2020/05/22/32.TSqlReview08/</id>
    <published>2020-05-22T03:17:00.000Z</published>
    <updated>2020-05-22T11:00:01.084Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%95%b0%e6%8d%ae%e5%ae%8c%e6%95%b4%e6%80%a7">数据完整性</a><ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a></li><li><a href="#%e7%b1%bb%e5%9e%8b">类型</a></li><li><a href="#%e7%ba%a6%e6%9d%9f">约束</a></li></ul></li><li><a href="#%e5%9f%9f%e5%ae%8c%e6%95%b4%e6%80%a7%e7%b1%bb%e5%9e%8b">域完整性类型</a><ul><li><a href="#default%e7%ba%a6%e6%9d%9f">DEFAULT约束</a><ul><li><a href="#%e4%b8%ba%e7%8e%b0%e6%9c%89%e8%a1%a8%e6%b7%bb%e5%8a%a0default%e7%ba%a6%e6%9d%9f">为现有表添加DEFAULT约束</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e6%97%b6%e6%b7%bb%e5%8a%a0default%e7%ba%a6%e6%9d%9f">创建表时添加DEFAULT约束</a></li></ul></li><li><a href="#check%e7%ba%a6%e6%9d%9f">CHECK约束</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e6%97%b6%e6%b7%bb%e5%8a%a0check%e7%ba%a6%e6%9d%9f">创建表时添加CHECK约束</a></li><li><a href="#%e4%b8%ba%e7%8e%b0%e6%9c%89%e8%a1%a8%e6%b7%bb%e5%8a%a0check%e7%ba%a6%e6%9d%9f">为现有表添加CHECK约束</a></li><li><a href="#%e5%88%a0%e9%99%a4%e7%ba%a6%e6%9d%9f">删除约束</a></li></ul></li><li><a href="#null%e7%ba%a6%e6%9d%9f">NULL约束</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e6%97%b6%e6%8c%87%e5%ae%9a%e6%98%af%e5%90%a6%e5%85%81%e8%ae%b8%e4%b8%banull">创建表时指定是否允许为NULL</a></li><li><a href="#%e4%bf%ae%e6%94%b9%e7%8e%b0%e6%9c%89%e8%a1%a8%e7%9a%84%e5%ad%97%e6%ae%b5%e6%98%af%e5%90%a6%e5%85%81%e8%ae%b8%e4%b8%banull">修改现有表的字段是否允许为NULL</a></li></ul></li></ul></li><li><a href="#%e5%ae%9e%e4%bd%93%e5%ae%8c%e6%95%b4%e6%80%a7%e7%b1%bb%e5%9e%8b">实体完整性类型</a><ul><li><a href="#primary-key%e7%ba%a6%e6%9d%9f">primary key约束</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e6%97%b6%e6%8c%87%e5%ae%9a%e4%b8%bb%e9%94%ae">创建表时指定主键</a></li><li><a href="#%e7%bb%99%e7%8e%b0%e6%9c%89%e7%9a%84%e8%a1%a8%e6%b7%bb%e5%8a%a0%e4%b8%bb%e9%94%ae">给现有的表添加主键</a></li></ul></li><li><a href="#unique%e7%ba%a6%e6%9d%9f">UNIQUE约束</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e6%97%b6%e5%90%8c%e6%97%b6%e5%88%9b%e5%bb%baunique%e7%ba%a6%e6%9d%9f">创建表时同时创建UNIQUE约束</a></li><li><a href="#%e7%bb%99%e7%8e%b0%e6%9c%89%e7%9a%84%e8%a1%a8%e6%b7%bb%e5%8a%a0unique%e7%ba%a6%e6%9d%9f">给现有的表添加UNIQUE约束</a></li></ul></li></ul></li><li><a href="#%e5%bc%95%e7%94%a8%e5%ae%8c%e6%95%b4%e6%80%a7%e7%b1%bb%e5%9e%8b">引用完整性类型</a><ul><li><a href="#foreign-key%e7%ba%a6%e6%9d%9f">FOREIGN KEY约束</a></li></ul></li><li><a href="#%e6%80%bb%e7%bb%93">总结</a></li></ul><h1 id="数据完整性"><a href="#数据完整性" class="headerlink" title="数据完整性"></a>数据完整性</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>数据完整性是指存储在数据库中数据的准确性和可靠性，它是应防止数据库中存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的</p><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ul><li>域完整性：域完整性指特定列的项的有效性</li><li>实体完整性：要求表中的所有行具有唯一的标识，例如主关键字值</li><li>引用完整性：确保量表之间的关系在更新和删除期间保持同步<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2>使用不同的约束强制数据完整性。约束时重要的数据库对象</li></ul><h1 id="域完整性类型"><a href="#域完整性类型" class="headerlink" title="域完整性类型"></a>域完整性类型</h1><h2 id="DEFAULT约束"><a href="#DEFAULT约束" class="headerlink" title="DEFAULT约束"></a>DEFAULT约束</h2><p>指定列的默认值</p><h3 id="为现有表添加DEFAULT约束"><a href="#为现有表添加DEFAULT约束" class="headerlink" title="为现有表添加DEFAULT约束"></a>为现有表添加DEFAULT约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> DEF_SEX  <span class="comment">--添加的约束名称</span></span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="string">'男'</span>  <span class="comment">--约束类型及约束的值</span></span><br><span class="line"><span class="keyword">FOR</span> SEX  <span class="comment">--添加约束的列</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="创建表时添加DEFAULT约束"><a href="#创建表时添加DEFAULT约束" class="headerlink" title="创建表时添加DEFAULT约束"></a>创建表时添加DEFAULT约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEMP_DEFAULT</span><br><span class="line">(</span><br><span class="line"><span class="keyword">Id</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB <span class="keyword">NVARCHAR</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="string">'.NET CORE DEV'</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p><em>注：每一列只能有一个<code>DEFAULT</code>约束，不能用于<code>IDENTITY</code>属性的列，若默认值长度大于该字段允许的字符空间，则插入到该列的值会被截断</em></p><h2 id="CHECK约束"><a href="#CHECK约束" class="headerlink" title="CHECK约束"></a>CHECK约束</h2><p>限制列可接受的值，控制列值的范围，检车列值</p><p><code>CHECK</code>约束默认检查现有数据和所有新数据，使用<code>WITH NOCHECK</code>中检查新数据</p><h3 id="创建表时添加CHECK约束"><a href="#创建表时添加CHECK约束" class="headerlink" title="创建表时添加CHECK约束"></a>创建表时添加CHECK约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEMP_CHECK</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">JOB <span class="keyword">NVARCHAR</span>(<span class="number">100</span>) <span class="keyword">CHECK</span>(JOB=<span class="string">'JAVA'</span> <span class="keyword">OR</span> JOB=<span class="string">'C#'</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="为现有表添加CHECK约束"><a href="#为现有表添加CHECK约束" class="headerlink" title="为现有表添加CHECK约束"></a>为现有表添加CHECK约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT <span class="comment">--[WITH NOCHECK] 添加WITH NOCHECK则指检查新数据，不检查表里原有数据</span></span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> CHECK_AGE  <span class="comment">--指定约束名称</span></span><br><span class="line"><span class="keyword">CHECK</span>(AGE&gt;=<span class="number">0</span> <span class="keyword">AND</span> AGE&lt;=<span class="number">150</span>) <span class="comment">--指定约束访范围</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="删除约束"><a href="#删除约束" class="headerlink" title="删除约束"></a>删除约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">CONSTRAINT</span> CHECK_AGE <span class="comment">--约束名称</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="NULL约束"><a href="#NULL约束" class="headerlink" title="NULL约束"></a>NULL约束</h2><p>指定列是否允许<code>NULL</code>，空值(或<code>NULL</code>)不同于<code>0</code>、空白或长度为0的字符串(如””)。NULL的意思是没有输入</p><h3 id="创建表时指定是否允许为NULL"><a href="#创建表时指定是否允许为NULL" class="headerlink" title="创建表时指定是否允许为NULL"></a>创建表时指定是否允许为NULL</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEMP_NULL</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">NAME</span> <span class="keyword">NVARCHAR</span>(<span class="number">100</span>) <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="修改现有表的字段是否允许为NULL"><a href="#修改现有表的字段是否允许为NULL" class="headerlink" title="修改现有表的字段是否允许为NULL"></a>修改现有表的字段是否允许为NULL</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="comment">--NOT NULL修改为NULL则标识允许为NULL</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="实体完整性类型"><a href="#实体完整性类型" class="headerlink" title="实体完整性类型"></a>实体完整性类型</h1><h2 id="primary-key约束"><a href="#primary-key约束" class="headerlink" title="primary key约束"></a>primary key约束</h2><p>能唯一标识表中每一行的值的一列或一组列，这样的一列或多列称为表的主键。一个表只能有一个<code>primary key</code>约束，并且<code>primary key</code>约束中的列不允许空值，不允许重复。如果对多列定义了<code>primary key</code>约束，则一列中的值可能会重复，但来自<code>primary key</code>约束定义中所有列的任何值组合必须唯一。</p><h3 id="创建表时指定主键"><a href="#创建表时指定主键" class="headerlink" title="创建表时指定主键"></a>创建表时指定主键</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEMP_PK</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">BIGINT</span> PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>),</span><br><span class="line"><span class="keyword">NAME</span> <span class="keyword">NVARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="给现有的表添加主键"><a href="#给现有的表添加主键" class="headerlink" title="给现有的表添加主键"></a>给现有的表添加主键</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> PK_ID <span class="comment">--约束名称</span></span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>) <span class="comment">--指定主键列</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="UNIQUE约束"><a href="#UNIQUE约束" class="headerlink" title="UNIQUE约束"></a>UNIQUE约束</h2><p>确保在非主键列中不输入重复的值，可以对一个表定义多个<code>UNIQUE</code>约束，但只能定义一个<code>PRIMARY KEY</code>约束，<code>UNIQUE</code>约束允许一个<code>NULL</code>值，而<code>PARMARY KEY</code>约束不允许有<code>NULL</code>值</p><p>创建<code>UNIQUE</code>约束时，同时会创建一个同名的非聚集索引，当插入或修改数据时，<code>UNIQUE</code>约束自动执行校验数据</p><h3 id="创建表时同时创建UNIQUE约束"><a href="#创建表时同时创建UNIQUE约束" class="headerlink" title="创建表时同时创建UNIQUE约束"></a>创建表时同时创建UNIQUE约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> TEMP_UNIUQE</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">NAME</span> <span class="keyword">NVARCHAR</span>(<span class="number">20</span>) <span class="keyword">CONSTRAINT</span> UNIQUE_NAME <span class="keyword">UNIQUE</span>(<span class="keyword">NAME</span>) <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="给现有的表添加UNIQUE约束"><a href="#给现有的表添加UNIQUE约束" class="headerlink" title="给现有的表添加UNIQUE约束"></a>给现有的表添加UNIQUE约束</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> UNIQUE_NAME</span><br><span class="line"><span class="keyword">UNIQUE</span>(<span class="keyword">NAME</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="引用完整性类型"><a href="#引用完整性类型" class="headerlink" title="引用完整性类型"></a>引用完整性类型</h1><h2 id="FOREIGN-KEY约束"><a href="#FOREIGN-KEY约束" class="headerlink" title="FOREIGN KEY约束"></a>FOREIGN KEY约束</h2><p>用于建立和加强两个表数据之间的链接，可以是一列或多列，称为表的外键(<code>FK</code>)，一个表可以有多个<code>FOREIGN KEY</code>约束，选作外键必须与其他对应的主键列具有相同的数据类型，每个键中列的数必须相等，即如果主键是一列，则外键是一列，如果主键是多列，则外键对应也是多列。<code>FOREIGN KEY</code>约束不仅可以与另一个表的<code>PRIMARY KEY</code>约束相关联，还可以定义为引用另一个表的<code>UNIQUE</code>约束列</p><p>主键要先创建好才能创建外键，<code>FOREIGN KEY</code>约束不能自动创建索引</p><p>外键约束的主要目的时控制可以存储在外键表中的数据，同时它也可以控制对主键表中数据的更改</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.GRADE</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> FK_STUDENT_ID  <span class="comment">--外键约束名称</span></span><br><span class="line"><span class="keyword">FOREIGN</span> <span class="keyword">KEY</span>(STUDENTID)  <span class="comment">--指定当前表哪一列是外键</span></span><br><span class="line"><span class="keyword">REFERENCES</span> dbo.STUDENT(<span class="keyword">ID</span>) <span class="comment">--这个外键对应的是哪个表的主键</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li><code>DEFAULT</code>、<code>CHECK</code>、<code>NULL</code>约束是针对表中的列进行完整性的控制，因此叫做域完整性</li><li><code>PRIMARY KEY</code>、<code>UNIQUE</code>约束是针对行限制数据行的唯一性，因此叫做实体完整性</li><li><code>FOREIGN KEY</code>约束是针对表与表之间的关系控制数据完整性，因此叫参照完整性</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e5%ae%8c%e6%95%b4%e6%80%a7&quot;&gt;数据完整性&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a6%82%e5%bf%b5&quot;&gt;概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习07--表或字段添加描述信息</title>
    <link href="http://www.dimsum.fun/2020/05/21/31.TSqlReview07/"/>
    <id>http://www.dimsum.fun/2020/05/21/31.TSqlReview07/</id>
    <published>2020-05-21T10:15:00.000Z</published>
    <updated>2020-05-22T11:00:01.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加-更新-删除表级别的描述信息"><a href="#添加-更新-删除表级别的描述信息" class="headerlink" title="添加/更新/删除表级别的描述信息"></a>添加/更新/删除表级别的描述信息</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">EXEC sys.sp_addextendedproperty  <span class="comment">--添加表描述信息</span></span><br><span class="line">     <span class="comment">-- sys.sp_updateextendedproperty  更新表属性信息</span></span><br><span class="line">     <span class="comment">-- sp_dropextendedproperty  删除表属性信息   </span></span><br><span class="line">    @name = N'Student',       <span class="comment">-- 描述的名称，可以设定为表名</span></span><br><span class="line">    @value = N'学生表',      <span class="comment">-- 描述内容</span></span><br><span class="line">    @level0type = N'SCHEMA',   <span class="comment">-- 固定语法</span></span><br><span class="line">    @level0name = N'dbo', <span class="comment">-- 架构</span></span><br><span class="line">    @level1type = N'TABLE',   <span class="comment">-- 类型</span></span><br><span class="line">    @level1name = N'STUDENT' <span class="comment">-- 要添加描述的表名</span></span><br></pre></td></tr></table></figure><h1 id="添加-更新-删除字段描述信息"><a href="#添加-更新-删除字段描述信息" class="headerlink" title="添加/更新/删除字段描述信息"></a>添加/更新/删除字段描述信息</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EXEC sys.sp_addextendedproperty  <span class="comment">--添加字段描述信息</span></span><br><span class="line">     <span class="comment">-- sys.sp_updateextendedproperty  更新字段属性信息</span></span><br><span class="line">     <span class="comment">-- sp_dropextendedproperty  删除字段属性信息   </span></span><br><span class="line">    @name = N'ID',       <span class="comment">-- 描述的名称，可以设定为字段名称</span></span><br><span class="line">    @value = N'学生编号',      <span class="comment">-- 描述内容</span></span><br><span class="line">    @level0type = N'SCHEMA',   <span class="comment">-- 固定语法</span></span><br><span class="line">    @level0name = N'dbo', <span class="comment">-- 架构</span></span><br><span class="line">    @level1type = N'TABLE',   <span class="comment">-- 类型</span></span><br><span class="line">    @level1name = N'STUDENT', <span class="comment">-- 表名</span></span><br><span class="line">    @level2type = N'COLUMN',   <span class="comment">-- 列</span></span><br><span class="line">    @level2name = N'ID'  <span class="comment">-- 要添加描述的字段名</span></span><br></pre></td></tr></table></figure><h1 id="查询表中的描述信息"><a href="#查询表中的描述信息" class="headerlink" title="查询表中的描述信息"></a>查询表中的描述信息</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys.extended_properties a <span class="keyword">WHERE</span> a.major_id=OBJECT_ID(<span class="string">'[dbo].[STUDENT]'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加-更新-删除表级别的描述信息&quot;&gt;&lt;a href=&quot;#添加-更新-删除表级别的描述信息&quot; class=&quot;headerlink&quot; title=&quot;添加/更新/删除表级别的描述信息&quot;&gt;&lt;/a&gt;添加/更新/删除表级别的描述信息&lt;/h1&gt;&lt;p&gt;示例：&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习06--高级查询</title>
    <link href="http://www.dimsum.fun/2020/05/21/30.TSqlReview06/"/>
    <id>http://www.dimsum.fun/2020/05/21/30.TSqlReview06/</id>
    <published>2020-05-21T02:15:00.000Z</published>
    <updated>2020-05-21T10:08:32.474Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#unionall">UNION(ALL)</a></li><li><a href="#%e8%81%94%e6%8e%a5%e6%9f%a5%e8%af%a2">联接查询</a><ul><li><a href="#%e8%81%94%e6%8e%a5%e6%9f%a5%e8%af%a2%e9%9c%80%e8%a6%81%e6%bb%a1%e8%b6%b3%e7%9a%84%e6%9d%a1%e4%bb%b6">联接查询需要满足的条件</a></li><li><a href="#%e8%bf%9e%e6%8e%a5%e6%9f%a5%e8%af%a2%e5%88%86%e7%b1%bb">连接查询分类</a></li></ul></li><li><a href="#inner-join%e5%86%85%e8%bf%9e%e6%8e%a5">INNER JOIN内连接</a></li><li><a href="#%e5%a4%96%e8%bf%9e%e6%8e%a5leftrightfull-join">外连接(LEFT/RIGHT/FULL JOIN)</a><ul><li><a href="#%e5%b7%a6%e5%a4%96%e8%bf%9e%e6%8e%a5">左外连接</a></li><li><a href="#%e5%8f%b3%e5%a4%96%e8%bf%9e%e6%8e%a5">右外连接</a></li><li><a href="#%e5%85%a8%e5%a4%96%e8%bf%9e%e6%8e%a5">全外连接</a></li><li><a href="#%e4%ba%a4%e5%8f%89%e8%bf%9e%e6%8e%a5%e5%be%88%e5%b0%91%e7%94%a8">交叉连接(很少用)</a></li></ul></li><li><a href="#%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0">聚合函数</a><ul><li><a href="#sum">SUM</a><ul><li><a href="#sumalldistinct-%e5%88%97%e5%90%8d">SUM(ALL|DISTINCT 列名)</a></li><li><a href="#sum%e5%88%97%e5%90%8d-overpartition-by-%e5%88%97%e5%90%8d-order-by-%e5%88%97%e5%90%8d">SUM(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</a></li></ul></li><li><a href="#avg">AVG</a><ul><li><a href="#avgalldistinct-%e5%88%97%e5%90%8d">AVG(ALL|DISTINCT 列名)</a></li><li><a href="#avg%e5%88%97%e5%90%8d-overpartition-by-%e5%88%97%e5%90%8d-order-by-%e5%88%97%e5%90%8d">AVG(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</a></li></ul></li><li><a href="#count">COUNT</a><ul><li><a href="#countalldistinct-%e5%88%97%e5%90%8d">COUNT(ALL|DISTINCT 列名)</a></li><li><a href="#count%e5%88%97%e5%90%8d-overpartition-by-%e5%88%97%e5%90%8d-order-by-%e5%88%97%e5%90%8d">COUNT(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</a></li><li><a href="#count%e8%bf%94%e5%9b%9e%e8%a1%a8%e4%b8%ad%e7%9a%84%e8%a1%8c%e6%95%b0%e5%8c%85%e6%8b%ac%e7%a9%ba%e5%80%bc%e5%92%8c%e9%87%8d%e5%a4%8d%e9%a1%b9">COUNT(*)返回表中的行数，包括空值和重复项</a></li></ul></li><li><a href="#min">MIN</a><ul><li><a href="#min%e5%88%97%e5%90%8d">MIN(列名)</a></li><li><a href="#min%e5%88%97%e5%90%8d-overpartition-by-%e5%88%97%e5%90%8d-order-by-%e5%88%97%e5%90%8d">MIN(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</a></li></ul></li><li><a href="#max">MAX</a><ul><li><a href="#max%e5%88%97%e5%90%8d">MAX(列名)</a></li><li><a href="#max%e5%88%97%e5%90%8d-overpartition-by-%e5%88%97%e5%90%8d-order-by-%e5%88%97%e5%90%8d">MAX(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</a></li></ul></li><li><a href="#group-by">GROUP BY</a></li><li><a href="#having">HAVING</a><ul><li><a href="#where%e5%92%8chaving%e5%8c%ba%e5%88%ab">WHERE和HAVING区别</a></li></ul></li><li><a href="#rollupcube">ROLLUP、CUBE</a></li><li><a href="#%e5%ad%90%e6%9f%a5%e8%af%a2">子查询</a><ul><li><a href="#%e4%bd%bf%e7%94%a8in%e6%88%96not-in%e7%9a%84%e5%ad%90%e6%9f%a5%e8%af%a2">使用IN或NOT IN的子查询</a></li><li><a href="#%e4%bd%bf%e7%94%a8anysome%e6%88%96all%e7%9a%84%e5%ad%90%e6%9f%a5%e8%af%a2">使用ANY、SOME或ALL的子查询</a></li><li><a href="#%e4%bd%bf%e7%94%a8exists%e6%88%96not-exists%e7%9a%84%e5%ad%90%e6%9f%a5%e8%af%a2">使用EXISTS或NOT EXISTS的子查询</a></li><li><a href="#%e5%9c%a8updatedelete%e5%92%8cinsert%e4%b8%ad%e4%bd%bf%e7%94%a8%e5%ad%90%e6%9f%a5%e8%af%a2">在UPDATE、DELETE和INSERT中使用子查询</a></li><li><a href="#%e4%bd%bf%e7%94%a8%e5%b5%8c%e5%a5%97%e6%9f%a5%e8%af%a2%e8%bf%94%e5%9b%9e%e7%89%b9%e5%ae%9a%e6%8e%92%e5%90%8d%e7%9a%84%e6%95%b0%e6%8d%ae">使用嵌套查询返回特定排名的数据</a></li><li><a href="#%e4%b8%8d%e7%94%a8%e8%81%9a%e5%90%88%e5%87%bd%e6%95%b0%e6%b1%82%e6%9c%80%e5%a4%a7%e5%80%bc">不用聚合函数求最大值</a></li></ul></li></ul></li></ul><h1 id="UNION-ALL"><a href="#UNION-ALL" class="headerlink" title="UNION(ALL)"></a>UNION(ALL)</h1><p>将两个或更多个查询结果合并为单个结果集，该结果集包含联合查询中的所有查询的全部行</p><p>使用<code>UNION</code>合并两个查询结果集的基本准则：</p><ol><li>所有查询中的列数和列的顺序必须相同</li><li>数据类型必须兼容</li></ol><p>ALL将全部行并入结果中，其中包括重复行。如果没有ALL则删除重复行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用UNION合并两个学生表的学生信息</span></span><br><span class="line">NAME,SEX,AGE FROM dbo.STUDENT</span><br><span class="line">UNION (ALL)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ID</span>,<span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT02</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将SELECT INTO与UNION一起使用</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE,SEX </span><br><span class="line"><span class="keyword">INTO</span> STUDENT_UNION </span><br><span class="line"><span class="keyword">FROM</span> STUDENT </span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span> </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE,SEX <span class="keyword">FROM</span> dbo.STUDENT02</span><br></pre></td></tr></table></figure><h1 id="联接查询"><a href="#联接查询" class="headerlink" title="联接查询"></a>联接查询</h1><p>根据数据库表之间的逻辑关系，从两个或多个数据库表中检索数据</p><h2 id="联接查询需要满足的条件"><a href="#联接查询需要满足的条件" class="headerlink" title="联接查询需要满足的条件"></a>联接查询需要满足的条件</h2><p>所要连接的表必须拥有相同的字段值，且数据类型类似。尽量在表的主键上的基础上，指定连接条件</p><h2 id="连接查询分类"><a href="#连接查询分类" class="headerlink" title="连接查询分类"></a>连接查询分类</h2><ol><li>内部链接：基本内连接，多表连接</li><li>外部连接：左外连接，右外连接，全外连接</li><li>交叉连接</li></ol><h1 id="INNER-JOIN内连接"><a href="#INNER-JOIN内连接" class="headerlink" title="INNER JOIN内连接"></a>INNER JOIN内连接</h1><p>只返回两个表中连接字段相等的行，用<code>...INNER JOIN...ON...</code>语句进行连接，<code>JOIN</code>指定需要连接的数据表，<code>ON</code>指定连接条件(<code>INNER</code>可省略)</p><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span></span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> <span class="keyword">ON</span> 关联条件</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">3</span> <span class="keyword">ON</span> 关联条件</span><br><span class="line">...</span><br><span class="line"><span class="keyword">WHERE</span> 筛选条件</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生信息及成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> ST.NAME,ST.SEX,GR.SCORE <span class="keyword">FROM</span> dbo.STUDENT ST <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.GRADE GR <span class="keyword">ON</span> ST.ID=GR.STUDENTID</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询学生信息、成绩及课程名称</span></span><br><span class="line"><span class="keyword">SELECT</span> ST.NAME,ST.SEX,CO.NAME,GR.SCORE <span class="keyword">FROM</span> dbo.STUDENT ST </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.GRADE GR <span class="keyword">ON</span> ST.ID=GR.STUDENTID</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.COURSE CO <span class="keyword">ON</span>  GR.COURSEID=CO.ID</span><br></pre></td></tr></table></figure><h1 id="外连接-LEFT-RIGHT-FULL-JOIN"><a href="#外连接-LEFT-RIGHT-FULL-JOIN" class="headerlink" title="外连接(LEFT/RIGHT/FULL JOIN)"></a>外连接(LEFT/RIGHT/FULL JOIN)</h1><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> 数据库名</span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span>  <span class="comment">--左外连接 OUTER通常省略</span></span><br><span class="line">        <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span>  <span class="comment">--右外连接 OUTER通常省略</span></span><br><span class="line">        <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span>   <span class="comment">--全连接 OUTER通常省略</span></span><br><span class="line"><span class="keyword">ON</span> 表<span class="number">1.</span>字段=表<span class="number">2.</span>字段</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h2><p><code>LEFT OUTER JOIN</code>以左表为基表，结果集返回左表的所有行，而右表只返回符合连接条件的记录，右表中不足的地方显示为<code>NULL</code></p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有学生信息及参加考试的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> ST.NAME,ST.SEX,ST.AGE,GR.SCORE <span class="keyword">FROM</span> dbo.STUDENT ST <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dbo.GRADE GR <span class="keyword">ON</span> ST.ID=GR.STUDENTID</span><br></pre></td></tr></table></figure><h2 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h2><p><code>RIGHT OUTER JOIN</code>以右表为基表，结果集返回右表的所有行，而左表只返回符合连接条件的记录，左表中不足的地方显示为<code>NULL</code></p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 安徽查询所有课程信息及参加该考试的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> CO.ID,CO.NAME,GR.SCORE <span class="keyword">FROM</span> dbo.GRADE GR <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dbo.COURSE CO <span class="keyword">ON</span> GR.COURSEID=CO.ID</span><br></pre></td></tr></table></figure><h2 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h2><p><code>FULL OUTER JOIN</code>结果集返回左表和右表的所有行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找素有的学生信息及所有参加该考试的学生成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> ST.NAME,ST.SEX,ST.AGE,GR.SCORE <span class="keyword">FROM</span> dbo.STUDENT ST <span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> dbo.GRADE GR <span class="keyword">ON</span> ST.ID=GR.STUDENTID</span><br></pre></td></tr></table></figure><h2 id="交叉连接-很少用"><a href="#交叉连接-很少用" class="headerlink" title="交叉连接(很少用)"></a>交叉连接(很少用)</h2><p><code>CROSS JOIN</code>将从被连接的表中返回所有可能的记录组合(如：一个表8条记录，另一个表9条记录，结果将返回72条记录)，交叉连接的结果集是量表行数乘积的集合，也被称为笛卡尔积</p><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> 数据库名</span><br><span class="line"><span class="keyword">SELECT</span> 表<span class="number">1.</span>字段,表<span class="number">2.</span>字段,...</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p><em>注：交叉连接不需要使用ON连接条件</em></p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ST.NAME,ST.AGE,ST.SEX,GR.SCORE <span class="keyword">FROM</span> dbo.STUDENT ST <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> dbo.GRADE GR</span><br></pre></td></tr></table></figure><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><ol><li><code>SUM()</code>：计算表达式中所有值得和，忽略空值，这些表达式通常是字段名或包含字段名的表达式</li><li><code>AVG()</code>：计算表达式的平均值，忽略空值，这些表达式通常是字段名或包含字段名的表达式</li><li><code>COUNT(列名)</code>：计算表达式中非空值的数量，即忽略空值</li><li><code>COUNT(*)</code>：计算表达式中所有值的数量，包括空值</li><li><code>MIN()</code>：返回表达式中所有值的最小值，这些表达式通常是字段名或包含字段名的表达式</li><li><code>MAX()</code>：返回表达式中所有值的最大值，这些表达式通常是字段名或包含字段名的表达式</li></ol><h2 id="SUM"><a href="#SUM" class="headerlink" title="SUM"></a>SUM</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(SCORE) <span class="keyword">FROM</span> dbo.GRADE</span><br></pre></td></tr></table></figure><h3 id="SUM-ALL-DISTINCT-列名"><a href="#SUM-ALL-DISTINCT-列名" class="headerlink" title="SUM(ALL|DISTINCT 列名)"></a>SUM(ALL|DISTINCT 列名)</h3><p>返回表达式中所有值的和或仅非重复值的和。<code>SUM</code>只能用于数字列，将忽略<code>NULL</code>值。</p><ul><li><code>ALL</code>表示所有值求和，默认是<code>ALL</code></li><li><code>DISTINCT</code>表示对唯一值求和</li></ul><h3 id="SUM-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名"><a href="#SUM-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名" class="headerlink" title="SUM(列名) OVER(PARTITION BY 列名 ORDER BY 列名)"></a>SUM(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</h3><p>在<code>SUM</code>后面使用<code>OVER</code>子句可对表数据分区再求和，<code>PARTITION BY</code>指定分区列，<code>ORDER BY</code>指定在分区内按照某列的排序顺序在求和</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对课程ID分区后对学生分数求和</span></span><br><span class="line"><span class="keyword">SELECT</span> STUDENTID,COURSEID,SCORE,<span class="keyword">SUM</span>(SCORE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> COURSEID) <span class="keyword">AS</span> SUM_PAR <span class="keyword">FROM</span> dbo.GRADE</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照学生编号排序对学生分数求和</span></span><br><span class="line"><span class="keyword">SELECT</span> STUDENTID,COURSEID,SCORE,<span class="keyword">SUM</span>(SCORE) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> STUDENTID) SUM_ORDER <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">ORDER</span> <span class="keyword">BY</span> STUDENTID</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对课程分区并按照学生编号排序后对学生分数求和</span></span><br><span class="line"><span class="keyword">SELECT</span> STUDENTID,COURSEID,SCORE,<span class="keyword">SUM</span>(SCORE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> COURSEID <span class="keyword">ORDER</span> <span class="keyword">BY</span> STUDENTID) SUM_PAR_ORDER <span class="keyword">FROM</span> dbo.GRADE</span><br></pre></td></tr></table></figure><h2 id="AVG"><a href="#AVG" class="headerlink" title="AVG"></a>AVG</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(SCORE) <span class="keyword">FROM</span> dbo.GRADE</span><br></pre></td></tr></table></figure><h3 id="AVG-ALL-DISTINCT-列名"><a href="#AVG-ALL-DISTINCT-列名" class="headerlink" title="AVG(ALL|DISTINCT 列名)"></a>AVG(ALL|DISTINCT 列名)</h3><p>返回组中各值得平均值，空值将被忽略，后面可以跟随<code>OVER</code>子句</p><ul><li><code>ALL</code>表示对所有值求平均值，默认是<code>ALL</code></li><li><code>DISTINCT</code>表示对唯一值求平均值</li></ul><h3 id="AVG-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名"><a href="#AVG-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名" class="headerlink" title="AVG(列名) OVER(PARTITION BY 列名 ORDER BY 列名)"></a>AVG(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</h3><p>在<code>AVG</code>使用<code>OVER</code>子句可对表数据分区再求平均值，<code>PARTITION BY</code>指定分区列，<code>ORDER BY</code>指定在分区内按照某列排序再求平均值</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 对课程ID分区后对学生分数求平均值</span></span><br><span class="line"><span class="keyword">SELECT</span> STUDENTID,COURSEID,SCORE,<span class="keyword">AVG</span>(SCORE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> COURSEID) AVG_PAR <span class="keyword">FROM</span> dbo.GRADE</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照学生编号排序对学生分数求平均值</span></span><br><span class="line"><span class="keyword">SELECT</span> STUDENTID,COURSEID,SCORE,<span class="keyword">AVG</span>(SCORE) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> STUDENTID) AVG_ORDER <span class="keyword">FROM</span> dbo.GRADE</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对课程分区并按照学生编号排序后对学生分数求平均值</span></span><br><span class="line"><span class="keyword">SELECT</span> STUDENTID,COURSEID,SCORE,<span class="keyword">AVG</span>(SCORE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> COURSEID <span class="keyword">ORDER</span> <span class="keyword">BY</span> STUDENTID) AVG_PAR_ORDER <span class="keyword">FROM</span> dbo.GRADE</span><br></pre></td></tr></table></figure><h2 id="COUNT"><a href="#COUNT" class="headerlink" title="COUNT"></a>COUNT</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">NAME</span>) <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h3 id="COUNT-ALL-DISTINCT-列名"><a href="#COUNT-ALL-DISTINCT-列名" class="headerlink" title="COUNT(ALL|DISTINCT 列名)"></a>COUNT(ALL|DISTINCT 列名)</h3><p>返回组中的项数，不包含空值</p><ul><li><code>ALL</code>对所有值计数，不包括空值，默认是<code>ALL</code></li><li><code>DISTINCT</code>计算唯一非空值数量</li></ul><h3 id="COUNT-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名"><a href="#COUNT-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名" class="headerlink" title="COUNT(列名) OVER(PARTITION BY 列名 ORDER BY 列名)"></a>COUNT(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</h3><p>在<code>COUNT</code>后使用<code>OVER</code>子句可对表数据分区后计数，<code>PARTITION BY</code>指定分区列，<code>ORDER BY</code>指定在分区内按照某列排序再计数</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">COUNT</span>(<span class="keyword">NAME</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX) COUNT_PAR <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">COUNT</span>(<span class="keyword">NAME</span>) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE) COUNT_ORDER <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">COUNT</span>(<span class="keyword">NAME</span>) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE) <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h3 id="COUNT-返回表中的行数，包括空值和重复项"><a href="#COUNT-返回表中的行数，包括空值和重复项" class="headerlink" title="COUNT(*)返回表中的行数，包括空值和重复项"></a>COUNT(*)返回表中的行数，包括空值和重复项</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="MIN"><a href="#MIN" class="headerlink" title="MIN"></a>MIN</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(AGE) <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h3 id="MIN-列名"><a href="#MIN-列名" class="headerlink" title="MIN(列名)"></a>MIN(列名)</h3><p>返回族中最小的值，忽略空值</p><h3 id="MIN-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名"><a href="#MIN-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名" class="headerlink" title="MIN(列名) OVER(PARTITION BY 列名 ORDER BY 列名)"></a>MIN(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</h3><p>在<code>MIN</code>后使用<code>OVER</code>子句可对表数据分区后求最小值，<code>PARTITION BY</code>指定分区列，<code>ORDER BY</code>指定在分区内按照某列排序在求最小值</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">MIN</span>(AGE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX) MIN_PAR <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">MIN</span>(AGE) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE) MIN_ORDER <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">MIN</span>(AGE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE) MIN_PAR_ORDER <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="MAX"><a href="#MAX" class="headerlink" title="MAX"></a>MAX</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(AGE) <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h3 id="MAX-列名"><a href="#MAX-列名" class="headerlink" title="MAX(列名)"></a>MAX(列名)</h3><p>返回族中最大的值，忽略空值</p><h3 id="MAX-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名"><a href="#MAX-列名-OVER-PARTITION-BY-列名-ORDER-BY-列名" class="headerlink" title="MAX(列名) OVER(PARTITION BY 列名 ORDER BY 列名)"></a>MAX(列名) OVER(PARTITION BY 列名 ORDER BY 列名)</h3><p>在<code>MAX</code>后使用<code>OVER</code>子句可对表数据分区后求最大值，<code>PARTITION BY</code>指定分区列，<code>ORDER BY</code>指定在分区内按照某列排序在求最小值</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">MAX</span>(AGE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX) MAX_PAR <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">MAX</span>(AGE) <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE) MAX_ORDER <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE,<span class="keyword">MAX</span>(AGE) <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE) MAX_PAR_ORDER <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><p><code>GROUP BY</code>：对结果集分组，针对每一组返回一行</p><p>若<code>SELECT</code>子句中同时包含聚合函数和<code>GROUP BY</code>，则聚合函数对每个组聚合计算</p><p>若指定<code>GROUP BT</code>时，<code>GROUP BY</code>后的所有字段都要出现在<code>SELECT</code>列表中</p><p><code>GROUP BY</code>后不能使用数据类型为<code>text、ntext、image</code>的字段</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 简单GROUP BY示例</span></span><br><span class="line"><span class="keyword">SELECT</span> SEX <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 聚合函数中使用GROUP BY</span></span><br><span class="line"><span class="keyword">SELECT</span> SEX,<span class="keyword">AVG</span>(AGE) 平均年龄 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> 平均年龄</span><br></pre></td></tr></table></figure><h2 id="HAVING"><a href="#HAVING" class="headerlink" title="HAVING"></a>HAVING</h2><p>使用<code>HAVING</code>过滤分组后的数据，因此<code>HAVING</code>要用在<code>GROUP BY</code>之后</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照性别分区，求学生平均年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> SEX,<span class="keyword">AVG</span>(AGE) 平均年龄 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分区，求学生平均年龄大于12岁的学生性别</span></span><br><span class="line"><span class="keyword">SELECT</span> SEX,<span class="keyword">AVG</span>(AGE) 平均年龄 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(AGE)&gt;<span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="WHERE和HAVING区别"><a href="#WHERE和HAVING区别" class="headerlink" title="WHERE和HAVING区别"></a>WHERE和HAVING区别</h3><ol><li><code>WHERE</code>语句在<code>GROUP BY</code>语句之前，<code>SQL</code>会在分组之前计算<code>WHERE</code>语句</li><li><code>HAVING</code>语句在<code>GROUP BY</code>语句之后，<code>SQL</code>会在分组之后计算<code>HAVING</code>语句</li><li>在一个<code>SQL</code>语句中可以同时有<code>WHERE</code>子句和<code>HAVING</code>子句，<code>HAVING</code>与<code>WHERE</code>子句类似，均用于设置限定条件</li><li><code>WHERE</code>子句的作用时在对查询结果进行分组前，将不符合<code>WHERE</code>条件的行去掉，即在分组之前过滤数据，条件中不能包含聚合函数，使用<code>WHERE</code>条件显示特定的行</li><li><code>HAVING</code>子句的作用时筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚合函数，使用<code>HAVING</code>条件显示特定的组，也可以使用多个分组标准进行分组</li></ol><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄大于11岁各性别学生平均年龄大于13岁的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> SEX,<span class="keyword">AVG</span>(AGE) 平均年龄 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&gt;<span class="number">11</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX <span class="keyword">HAVING</span> <span class="keyword">AVG</span>(AGE)&gt;<span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="ROLLUP、CUBE"><a href="#ROLLUP、CUBE" class="headerlink" title="ROLLUP、CUBE"></a>ROLLUP、CUBE</h2><p>在<code>GROUP BY</code>后使用<code>ROLLUP、CUBE</code>子句对分组数据汇总</p><p><code>ROLLUP</code>就是将<code>GROUP BY</code>后面的第一个字段的各个值分组在聚合运算，而其他列并不要求，其中<code>ROLLUP</code>包含仅使用<code>GROUP BY</code>的结果集</p><p>而<code>CUBE</code>则会将<code>GROUP BY</code>后面的每一个字段的各个值分组在聚合运算，其中<code>CUBE</code>结果集包含<code>ROLLUP</code>结果集</p><p><strong>注：<code>ROLLUP、CUBE</code>在后续SQL SERVER版中将删除</strong></p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SEX,<span class="keyword">NAME</span>,<span class="keyword">AVG</span>(AGE) <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX,<span class="keyword">NAME</span> <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> SEX,<span class="keyword">NAME</span></span><br><span class="line"><span class="keyword">SELECT</span> SEX,<span class="keyword">NAME</span>,<span class="keyword">AVG</span>(AGE) <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">GROUP</span> <span class="keyword">BY</span> SEX,<span class="keyword">NAME</span> <span class="keyword">WITH</span> <span class="keyword">CUBE</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> SEX,<span class="keyword">NAME</span></span><br></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>在<code>WHERE</code>子句中包含的<code>SELECT</code>查询，就成为子查询或嵌套查询。而包含子查询的语句称为外部查询或外部选择。子查询可以嵌套在外部<code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code>或<code>DELETE</code>语句的<code>WHERE</code>或<code>HAVING</code>子句内，也可以嵌套在其他子查询内。</p><p>子查询类型：</p><ol><li>使用<code>IN</code>或<code>NOT IN</code>的子查询(用的比较多)</li><li>使用<code>ANY</code>、<code>SOME</code>或<code>ALL</code>的子查询</li><li>使用<code>EXISTS</code>或<code>NOT EXISTS</code>的子查询(用的比较多)</li></ol><p><em>注：子查询通常用()括起来</em></p><h3 id="使用IN或NOT-IN的子查询"><a href="#使用IN或NOT-IN的子查询" class="headerlink" title="使用IN或NOT IN的子查询"></a>使用IN或NOT IN的子查询</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用IN的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> STUDENTID <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> COURSEID=<span class="string">'k01'</span> <span class="keyword">AND</span> SCORE&gt;<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用NOT IN的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> STUDENTID <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> COURSEID=<span class="string">'k01'</span> <span class="keyword">AND</span> SCORE&gt;<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用联接查询</span></span><br><span class="line"><span class="keyword">SELECT</span> ST.NAME,ST.SEX,ST.AGE <span class="keyword">FROM</span> dbo.STUDENT ST <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.GRADE GR <span class="keyword">ON</span> ST.ID=GR.STUDENTID <span class="keyword">WHERE</span> GR.COURSEID=<span class="string">'k01'</span> <span class="keyword">AND</span> GR.SCORE&gt;<span class="number">60</span></span><br></pre></td></tr></table></figure><p>联接总是可以表示为子查询，子查询经常(但不总是)可以表示为联接。这是因为联接时对称的，无论以何种顺序联接表A或B，都将得到相同的结果</p><p>使用联接而不是用子查询的一个同之处在于，联接使您可以在结果中显示多个表中的列</p><h3 id="使用ANY、SOME或ALL的子查询"><a href="#使用ANY、SOME或ALL的子查询" class="headerlink" title="使用ANY、SOME或ALL的子查询"></a>使用ANY、SOME或ALL的子查询</h3><p>如果子查询的返回值不止一个，而是一个集合时，则不能直接使用比较运算符，可以在比较运算符和子查询之间插入<code>ANY</code>或<code>ALL</code>。<code>ANY</code>与<code>SOME</code>完全等效</p><p><code>ANY</code>任一个：</p><ul><li><code>&gt;ANY</code>：表示至少大于一个值，即大于最小值。因此<code>&gt;ANY(1,2,3)</code>表示大于1</li><li><code>&lt;ANY</code>：表示至少小于一个值，即小于最大值。因此<code>&lt;ANY(1,2,3)</code>表示小于3</li><li><code>=ANY</code>：表示至少等于一个值，因此<code>=ANY(1,2,3)</code>表示等于1或等于2或等于3，<code>=ANY</code>等效于<code>IN</code> </li></ul><p><code>ALL</code>所有：</p><ul><li><code>&gt;ALL</code>：表示大于每一个值，即大于最大值。因此<code>&gt;ALL(1,2,3)</code>表示大于3</li><li><code>&lt;ALL</code>：表示小于每一个值，即小于最小值。因此<code>&lt;ALL(1,2,3)</code>表示小于1</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用ANY的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span>&gt;<span class="keyword">ANY</span>(<span class="keyword">SELECT</span> STUDENTID <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> SCORE&gt;<span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用ALL的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span>&gt;<span class="keyword">ALL</span>(<span class="keyword">SELECT</span> STUDENTID <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> SCORE&gt;<span class="number">80</span>)</span><br></pre></td></tr></table></figure><h3 id="使用EXISTS或NOT-EXISTS的子查询"><a href="#使用EXISTS或NOT-EXISTS的子查询" class="headerlink" title="使用EXISTS或NOT EXISTS的子查询"></a>使用EXISTS或NOT EXISTS的子查询</h3><p>使用<code>EXISTS</code>的子查询，只进行存在测试，外部查询的<code>WHERE</code>子句测试子查询返回的行是否存在，子查询实际上不产生任何数据，它时返回<code>TRUE</code>或<code>FALSE</code>值</p><p>使用<code>EXISTS</code>引入的子查询的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WHERE [NOT] EXISTS (subquery)</span><br></pre></td></tr></table></figure><ul><li><code>EXISTS</code>关键字前面没有列名、常量或其他表达式</li><li>由<code>EXISTS</code>引入的子查询的选择列通常几乎都是由星号<code>(*)</code>组成，由于这是测试是否存在符合子查询指定条件的行，因此不必列出列名</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用EXISTS的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> [<span class="keyword">NOT</span>] <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> dbo.STUDENT.ID=dbo.GRADE.STUDENTID <span class="keyword">AND</span> COURSEID=<span class="string">'k02'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用IN替换的子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> STUDENTID <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> COURSEID=<span class="string">'k01'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用联接查询替换</span></span><br><span class="line"><span class="keyword">SELECT</span> ST.* <span class="keyword">FROM</span> dbo.STUDENT ST <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.GRADE GR <span class="keyword">ON</span> ST.ID=GR.STUDENTID <span class="keyword">WHERE</span> GR.COURSEID=<span class="string">'k01'</span></span><br></pre></td></tr></table></figure><h3 id="在UPDATE、DELETE和INSERT中使用子查询"><a href="#在UPDATE、DELETE和INSERT中使用子查询" class="headerlink" title="在UPDATE、DELETE和INSERT中使用子查询"></a>在UPDATE、DELETE和INSERT中使用子查询</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在DELETE语句中使用NOT IN子查询</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> STUDENTID <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> dbo.STUDENT)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在DELETE语句中使用NOT EXISTS子查询</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> STUDENTID=dbo.GRADE.STUDENTID)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 在UPDATE语句中使用IN子查询</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.GRADE <span class="keyword">SET</span> SCORE=SCORE+<span class="number">5</span> <span class="keyword">WHERE</span> STUDENTID <span class="keyword">IN</span> (<span class="keyword">SELECT</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> SEX=<span class="string">'女'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用联接的等效UPDATE语句</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.GRADE <span class="keyword">SET</span> SCORE=SCORE+<span class="number">5</span> <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.STUDENT <span class="keyword">ON</span> dbo.GRADE.STUDENTID=dbo.STUDENT.ID <span class="keyword">WHERE</span> dbo.STUDENT.SEX=<span class="string">'女'</span></span><br></pre></td></tr></table></figure><h3 id="使用嵌套查询返回特定排名的数据"><a href="#使用嵌套查询返回特定排名的数据" class="headerlink" title="使用嵌套查询返回特定排名的数据"></a>使用嵌套查询返回特定排名的数据</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询成绩表中排名名词在中间的信息和成绩</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> SCORE) 排名,* <span class="keyword">FROM</span> dbo.GRADE <span class="keyword">WHERE</span> COURSEID=<span class="string">'k01'</span>) A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.STUDENT B <span class="keyword">ON</span> A.STUDENTID=B.ID <span class="keyword">WHERE</span> A.排名=<span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="不用聚合函数求最大值"><a href="#不用聚合函数求最大值" class="headerlink" title="不用聚合函数求最大值"></a>不用聚合函数求最大值</h3><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用聚合函数求学生最大年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(AGE) <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不适用聚合函数求学生最大年龄</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT A <span class="keyword">WHERE</span> A.AGE <span class="keyword">NOT</span> <span class="keyword">IN</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">SELECT</span> B.AGE <span class="keyword">FROM</span> dbo.STUDENT B <span class="keyword">INNER</span> <span class="keyword">JOIN</span> dbo.STUDENT c <span class="keyword">ON</span> B.AGE&lt;C.AGE</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#unionall&quot;&gt;UNION(ALL)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%81%94%e6%8e%a5%e6%9f%a5%e8%af%a2&quot;&gt;联接查询&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%81%94%e6
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习05--基础查询</title>
    <link href="http://www.dimsum.fun/2020/05/20/29.TSqlReview05/"/>
    <id>http://www.dimsum.fun/2020/05/20/29.TSqlReview05/</id>
    <published>2020-05-20T06:49:00.000Z</published>
    <updated>2020-05-21T10:08:32.473Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#select%e8%af%ad%e5%8f%a5%e8%af%ad%e6%b3%95">SELECT语句语法</a></li><li><a href="#%e6%9f%a5%e8%af%a2%e6%89%a7%e8%a1%8c%e9%a1%ba%e5%ba%8f">查询执行顺序</a></li><li><a href="#%e4%bd%bf%e7%94%a8selectwhere%e6%9f%a5%e8%af%a2%e6%95%b0%e6%8d%ae">使用SELECT…WHERE查询数据</a><ul><li><a href="#%e4%bd%bf%e7%94%a8%e9%80%9a%e9%85%8d%e7%ac%a6%e6%9f%a5%e8%af%a2%e6%89%80%e6%9c%89%e5%88%97">使用通配符<code>*</code>查询所有列</a></li><li><a href="#%e6%9f%a5%e8%af%a2%e6%8c%87%e5%ae%9a%e7%9a%84%e5%88%97">查询指定的列</a></li><li><a href="#%e4%bd%bf%e7%94%a8as%e7%bb%99%e5%88%97%e6%88%96%e8%a1%a8%e6%8c%87%e5%ae%9a%e5%88%ab%e5%90%8d">使用<code>as</code>给列或表指定别名</a></li><li><a href="#where%e4%bd%bf%e7%94%a8"><code>where</code>使用</a></li></ul></li><li><a href="#%e6%a8%a1%e7%b3%8a%e6%9f%a5%e8%af%a2">模糊查询</a></li><li><a href="#orand%e9%80%bb%e8%be%91%e8%bf%90%e7%ae%97">OR/AND逻辑运算</a></li><li><a href="#betweenand">BETWEEN…AND</a></li><li><a href="#in">IN</a></li><li><a href="#is-null">IS NULL</a></li><li><a href="#order-by">ORDER BY</a></li><li><a href="#%e6%8e%92%e5%90%8d%e5%87%bd%e6%95%b0rank">排名函数RANK</a></li><li><a href="#%e6%8e%92%e5%90%8d%e5%87%bd%e6%95%b0rownumber">排名函数ROW_NUMBER</a></li><li><a href="#%e8%bf%87%e6%bb%a4%e9%87%8d%e5%a4%8d%e6%95%b0%e6%8d%ae">过滤重复数据</a></li><li><a href="#%e5%88%a4%e6%96%ad%e5%af%b9%e8%b1%a1%e8%a1%a8%e5%ad%98%e5%82%a8%e8%bf%87%e7%a8%8b%e8%a7%86%e5%9b%be%e7%ad%89%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8">判断对象(表/存储过程/视图等)是否存在</a><ul><li><a href="#%e5%88%a4%e6%96%ad%e8%a1%a8%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8%e6%96%b9%e5%bc%8f1">判断表是否存在方式1</a></li><li><a href="#%e5%88%a4%e6%96%ad%e8%a1%a8%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8%e6%96%b9%e5%bc%8f2">判断表是否存在方式2</a></li></ul></li><li><a href="#selectinto">SELECT…INTO</a></li><li><a href="#insertselect">INSERT…SELECT</a></li><li><a href="#mergeinto">MERGE..INTO</a></li><li><a href="#top">TOP</a><ul><li><a href="#%e4%bd%bf%e7%94%a8top%e9%99%90%e5%88%b6%e5%88%a0%e9%99%a4%e7%9a%84%e8%a1%8c%e6%95%b0">使用TOP限制删除的行数</a></li><li><a href="#%e4%bd%bf%e7%94%a8top%e9%99%90%e5%88%b6%e6%9b%b4%e6%96%b0%e7%9a%84%e8%a1%8c%e6%95%b0">使用TOP限制更新的行数</a></li><li><a href="#%e4%bd%bf%e7%94%a8top%e9%99%90%e5%88%b6%e6%8f%92%e5%85%a5%e8%a1%8c%e6%95%b0">使用TOP限制插入行数</a></li></ul></li></ul><h1 id="SELECT语句语法"><a href="#SELECT语句语法" class="headerlink" title="SELECT语句语法"></a>SELECT语句语法</h1><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 选择列表(查询所显示的内容)</span><br><span class="line"><span class="keyword">from</span> 表名(查询内容所在的表)</span><br><span class="line"><span class="keyword">where</span> 查询条件(查询内容的条件)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 条件(分组汇总的条件)</span><br><span class="line"><span class="keyword">having</span> 条件(筛选条件)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 列名(排序基准)</span><br></pre></td></tr></table></figure><p>解析：</p><ol><li>选择列表：可以包括几个列名或者表达式，用逗号隔开，用于指示应该返回哪些数据</li><li>from子句包含提供数据的表或视图名称</li><li>where子句用于给出查询条件</li><li>聚合函数对数据进行汇总计算，使用having进行筛选</li><li>order by子句决定结果集的排列顺序</li></ol><h1 id="查询执行顺序"><a href="#查询执行顺序" class="headerlink" title="查询执行顺序"></a>查询执行顺序</h1><ol><li>FROM：查询首先回根据<code>select</code>语句的<code>from</code>子句组装初始数据集</li><li>WHERE：筛选阶段实际上是根据<code>where</code>子句进行筛选</li><li>聚合：SQL语句对数据集执行聚合运算</li><li>ORDER BY：根据<code>from</code>子句和<code>where</code>子句筛选出满足条件的行后，按照<code>order by</code>子句指定方式排序</li><li>谓词：可以只显示前几行或只返回指定行</li></ol><h1 id="使用SELECT…WHERE查询数据"><a href="#使用SELECT…WHERE查询数据" class="headerlink" title="使用SELECT…WHERE查询数据"></a>使用SELECT…WHERE查询数据</h1><h2 id="使用通配符-查询所有列"><a href="#使用通配符-查询所有列" class="headerlink" title="使用通配符*查询所有列"></a>使用通配符<code>*</code>查询所有列</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="查询指定的列"><a href="#查询指定的列" class="headerlink" title="查询指定的列"></a>查询指定的列</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,AGE <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="使用as给列或表指定别名"><a href="#使用as给列或表指定别名" class="headerlink" title="使用as给列或表指定别名"></a>使用<code>as</code>给列或表指定别名</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> <span class="keyword">AS</span> 姓名,AGE <span class="keyword">AS</span> 性别 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">AS</span> 学生表</span><br></pre></td></tr></table></figure><p>其中AS可以直接省略，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span> 姓名,AGE 性别 <span class="keyword">FROM</span> dbo.STUDENT 学生表</span><br></pre></td></tr></table></figure><h2 id="where使用"><a href="#where使用" class="headerlink" title="where使用"></a><code>where</code>使用</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span>=<span class="string">'李筱思'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&gt;<span class="number">16</span></span><br></pre></td></tr></table></figure><p><em>注：字符类型和时间类型的数据需要加引号标识</em></p><h1 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查找学生姓名以'李'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名以'李'或以'赵'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'[李赵]%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名不以'李'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名不以'李'或以'赵'开头的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'[^李赵]%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查找学生姓名以'李'开头，名字只有一个字符的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'[李]_'</span></span><br></pre></td></tr></table></figure><h1 id="OR-AND逻辑运算"><a href="#OR-AND逻辑运算" class="headerlink" title="OR/AND逻辑运算"></a>OR/AND逻辑运算</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询姓名以'李'开头或年龄是13岁的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span> <span class="keyword">OR</span> AGE=<span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名以'李'开头，或年龄是13岁性别为女的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> <span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span> <span class="keyword">OR</span> (AGE=<span class="number">13</span> <span class="keyword">AND</span> SEX=<span class="string">'女'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询姓名以'李'开头且性别为女,或年龄13岁且性别为女的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> (<span class="keyword">NAME</span> <span class="keyword">LIKE</span> <span class="string">'李%'</span> <span class="keyword">AND</span> SEX=<span class="string">'女'</span>) <span class="keyword">OR</span> (AGE=<span class="number">13</span> <span class="keyword">AND</span> SEX=<span class="string">'女'</span>)</span><br></pre></td></tr></table></figure><h1 id="BETWEEN…AND"><a href="#BETWEEN…AND" class="headerlink" title="BETWEEN…AND"></a>BETWEEN…AND</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄在11到13范围内的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不在11到13范围内的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="number">11</span> <span class="keyword">AND</span> <span class="number">13</span></span><br></pre></td></tr></table></figure><p><em>注：BETWEEN…AND是包括边界的</em></p><h1 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询年龄为10岁或15岁的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">15</span>)</span><br><span class="line"><span class="comment">-- 其实这里跟使用OR是一个效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询年龄不为10岁或15岁的学生</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="number">10</span>,<span class="number">15</span>)</span><br></pre></td></tr></table></figure><h1 id="IS-NULL"><a href="#IS-NULL" class="headerlink" title="IS NULL"></a>IS NULL</h1><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询地址为空的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> ADDRESS <span class="keyword">IS</span> <span class="literal">NULL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询地址不为空的学生信息</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">WHERE</span> ADDRESS <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br></pre></td></tr></table></figure><h1 id="ORDER-BY"><a href="#ORDER-BY" class="headerlink" title="ORDER BY"></a>ORDER BY</h1><p><code>ORDER BY ... DESC/ASC</code>：降序排序/升序排序，默认是<code>ASC</code><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询所有学生，按年龄降序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询所有学生，按年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>同时对多个字段排序：若以多个字段排序时，以第一个排序的字段为主，当第一个字段出现相等值时对第二个字段排序</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 同时对学生性别、年龄排序</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> SEX <span class="keyword">DESC</span>,AGE <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><h1 id="排名函数RANK"><a href="#排名函数RANK" class="headerlink" title="排名函数RANK"></a>排名函数RANK</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RANK() OVER(PARTITION BY 表达式 ORDER BY 表达式)</span><br></pre></td></tr></table></figure><p><em>注：针对分区内的每行数据排名，若排序字符按值相等，则排名相同，PARTITION BY子句可选</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照学生年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,<span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) <span class="keyword">AS</span> 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,<span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名，对结果集按照年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> *,<span class="keyword">RANK</span>() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h1 id="排名函数ROW-NUMBER"><a href="#排名函数ROW-NUMBER" class="headerlink" title="排名函数ROW_NUMBER"></a>排名函数ROW_NUMBER</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROW_NUMBER() OVER(PARTITION BY 表达式 ORDER BY 表达式)</span><br></pre></td></tr></table></figure><p><em>注：对分区内的每行数据排名，若排序字段值相等，则排名累计，PARTITION BY子句可选</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照学生年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) <span class="keyword">AS</span> 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名</span></span><br><span class="line"><span class="keyword">SELECT</span> *,ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按照性别分组，在分组内按照年龄降序排名，对结果集按照年龄升序排序</span></span><br><span class="line"><span class="keyword">SELECT</span> *,ROW_NUMBER() <span class="keyword">OVER</span>(<span class="keyword">PARTITION</span> <span class="keyword">BY</span> SEX <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">DESC</span>) 排名 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h1 id="过滤重复数据"><a href="#过滤重复数据" class="headerlink" title="过滤重复数据"></a>过滤重复数据</h1><p><code>DISTINCT</code>消除重复项</p><p><code>DISTINCT</code>关键字可以从<code>SELECT</code>语句的结果中消除重复的行，如果没有指定<code>DISTINCT</code>，将返回所有行，包括重复的行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> ADDRESS <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="判断对象-表-存储过程-视图等-是否存在"><a href="#判断对象-表-存储过程-视图等-是否存在" class="headerlink" title="判断对象(表/存储过程/视图等)是否存在"></a>判断对象(表/存储过程/视图等)是否存在</h1><h2 id="判断表是否存在方式1"><a href="#判断表是否存在方式1" class="headerlink" title="判断表是否存在方式1"></a>判断表是否存在方式1</h2><p>使用<code>SYS.OBJECTS</code>测试，在数据库中创建的每个用户定义的架构作用域内的对象在该表中对应一行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IF EXISTS(<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> sys.objects <span class="keyword">WHERE</span> <span class="keyword">name</span>=<span class="string">'STUDENT'</span>)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>/PROC dbo.STUDENT</span><br></pre></td></tr></table></figure><h2 id="判断表是否存在方式2"><a href="#判断表是否存在方式2" class="headerlink" title="判断表是否存在方式2"></a>判断表是否存在方式2</h2><p>使用<code>OBJECT_ID</code>测试，<code>OBJECT_ID(OBJECT_NAME.[OBJECT_TYPE])</code>返回架构范围内数据库对象的唯一标识。</p><p><code>OBJECT_TYPE</code>：U表示用户自定义表，P表示SQL存储过程，V表示视图</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IF(OBJECT_ID('STUDENT','U/P/V') IS NOT NULL)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span>/PROC dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="SELECT…INTO"><a href="#SELECT…INTO" class="headerlink" title="SELECT…INTO"></a>SELECT…INTO</h1><p>使用<code>SELECT...INTO</code>创建表并复制表中数据，源表中定义的索引、约束和触发器不会转移到新表中，也不能在<code>SELECT...INTO</code>语句中指定它们</p><p>如果定义表的<code>SELECT</code>语句包含一个联接，而该联接将导致<code>IDENTITY</code>属性不能转移到新表</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建表并复制表数据</span></span><br><span class="line"><span class="comment">-- 先判断表是否存在，存在则删除，然后再用SELECT...INTO</span></span><br><span class="line">IF(OBJECT_ID('STUDENT_CP','U') IS NOT NULL)</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> dbo.STUDENT_CP</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> STUDENT_CP <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="INSERT…SELECT"><a href="#INSERT…SELECT" class="headerlink" title="INSERT…SELECT"></a>INSERT…SELECT</h1><p>使用<code>INSERT...SELECT</code>将数据从一个表插入另一个表</p><p>基本语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO 目标表...INSERT INTO 源表</span><br></pre></td></tr></table></figure><p><em>注：目标表必须存在</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先判断表是否存在，存在则删除，然后再创建一张表，再往表里写源表查询出来的数据</span></span><br><span class="line">IF OBJECT_ID('STUDENT_INSERT','U') IS NOT NULL</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> STUDENT_INSERT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT_INSERT</span><br><span class="line">(</span><br><span class="line">姓名 <span class="built_in">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">性别 <span class="built_in">CHAR</span>(<span class="number">2</span>),</span><br><span class="line">年龄 <span class="built_in">INT</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT_INSERT <span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT</span><br></pre></td></tr></table></figure><h1 id="MERGE-INTO"><a href="#MERGE-INTO" class="headerlink" title="MERGE..INTO"></a>MERGE..INTO</h1><p>根据与源表的联接的结果，对目标表执行插入、更新或删除操作。例如：根据在另一个表中找到的差异在一个表中插入、更新或删除行，可以对两个表进行同步</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 合并两张学生表的学生信息，当学生姓名相同时更新目标表的学生信息，当目标表没有该学生时插入学生信息</span></span><br><span class="line"><span class="comment">-- 目标表=STUDENT  源表=STUDENT_INSERT</span></span><br><span class="line"><span class="comment">-- 以下操作描述：</span></span><br><span class="line">    <span class="comment">-- 以STUDENT_INSERT为准，如果STUDENT里的哪条数据跟STUDENT_INSERT里哪条数据的NAME相同，则将STUDENT里这条数据的年龄更新成STUDENT_INSERT里这条数据的年龄</span></span><br><span class="line">    <span class="comment">-- 如果STUDENT_INSERT里有数据的姓名是STUDENT里没有的，则向STUDENT里插入这条数据</span></span><br><span class="line"><span class="keyword">MERGE</span> <span class="keyword">INTO</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">USING</span> dbo.STUDENT_INSERT</span><br><span class="line"><span class="keyword">ON</span> dbo.STUDENT.NAME=dbo.STUDENT_INSERT.姓名</span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> <span class="keyword">UPDATE</span> <span class="keyword">SET</span> AGE=dbo.STUDENT_INSERT.年龄 <span class="comment">--匹配上则更新年龄</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="keyword">NOT</span> <span class="keyword">MATCHED</span> <span class="keyword">THEN</span> <span class="keyword">INSERT</span> (<span class="keyword">NAME</span>,SEX,AGE) <span class="keyword">VALUES</span>(dbo.STUDENT_INSERT.姓名,dbo.STUDENT_INSERT.性别,dbo.STUDENT_INSERT.年龄); <span class="comment">--没匹配上则插入</span></span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h1 id="TOP"><a href="#TOP" class="headerlink" title="TOP"></a>TOP</h1><p><code>TOP</code>限制返回结果集的行数，当将<code>TOP</code>与<code>ORDER BY</code>子句结合使用时，结果集限制为前N个已排序行，否则，它将以未定义的顺序返回前N个行</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询学生表中前3行数据</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">3</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 对学生表按年龄排序返回前3行数据</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">3</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE</span><br><span class="line"></span><br><span class="line"><span class="comment">-- TOP N WITH TIES 返回结果集前N条记录，以及排序字段值与第N条记录相等的记录，TOP N WITH TIES必须与ORDER BY一同使用</span></span><br><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">3</span> <span class="keyword">WITH</span> <span class="keyword">TIES</span> * <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE</span><br></pre></td></tr></table></figure><h2 id="使用TOP限制删除的行数"><a href="#使用TOP限制删除的行数" class="headerlink" title="使用TOP限制删除的行数"></a>使用TOP限制删除的行数</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除年龄小于15岁的任意一个学生数据</span></span><br><span class="line"><span class="keyword">DELETE</span> TOP(<span class="number">1</span>) <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&lt;<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除年龄小于15岁年龄最小的一个学生</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE <span class="keyword">IN</span> (<span class="keyword">SELECT</span> TOP <span class="number">1</span> AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&lt;<span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span>)</span><br></pre></td></tr></table></figure><h2 id="使用TOP限制更新的行数"><a href="#使用TOP限制更新的行数" class="headerlink" title="使用TOP限制更新的行数"></a>使用TOP限制更新的行数</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 更新年龄小于15岁的任意一个学生的年龄</span></span><br><span class="line"><span class="keyword">UPDATE</span> TOP(<span class="number">1</span>) dbo.STUDENT <span class="keyword">SET</span> AGE=AGE+<span class="number">10</span> <span class="keyword">WHERE</span> AGE&lt;<span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新年龄小于15岁年龄最小的一位学生的年龄</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT <span class="keyword">SET</span> AGE=AGE+<span class="number">10</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> TOP <span class="number">1</span> <span class="keyword">ID</span> <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> AGE&lt;<span class="number">15</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span>) TB_TOP <span class="keyword">WHERE</span> TB_TOP.ID=dbo.STUDENT.ID</span><br></pre></td></tr></table></figure><h2 id="使用TOP限制插入行数"><a href="#使用TOP限制插入行数" class="headerlink" title="使用TOP限制插入行数"></a>使用TOP限制插入行数</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 向新创建的表中插入任意两条学生数据</span></span><br><span class="line">    <span class="comment">-- 先创建STUDENT02表</span></span><br><span class="line">    <span class="comment">-- 在插入数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> STUDENT02 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">2</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> TOP(<span class="number">2</span>) <span class="keyword">INTO</span> STUDENT02</span><br><span class="line"><span class="keyword">OUTPUT</span> Inserted.NAME,Inserted.SEX,Inserted.AGE</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向创建的新表中插入年龄最小的两条学生数据</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> STUDENT03 <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="number">1</span>=<span class="number">2</span></span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> STUDENT03</span><br><span class="line"><span class="keyword">OUTPUT</span> Inserted.NAME,Inserted.SEX,Inserted.AGE</span><br><span class="line"><span class="keyword">SELECT</span> TOP(<span class="number">2</span>) <span class="keyword">NAME</span>,SEX,AGE <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">ORDER</span> <span class="keyword">BY</span> AGE <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p><em>注：Inserted是一张系统的临时表，将要插入的数据都会在这个表里有记录，OUTPUT就是将这些要插入的数据显示出来</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#select%e8%af%ad%e5%8f%a5%e8%af%ad%e6%b3%95&quot;&gt;SELECT语句语法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9f%a5%e8%af%a2%e6%89%a7%e8%a1%8c%e9%a1%
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习04--临时表的使用</title>
    <link href="http://www.dimsum.fun/2020/05/20/28.TSqlReview04/"/>
    <id>http://www.dimsum.fun/2020/05/20/28.TSqlReview04/</id>
    <published>2020-05-20T04:07:00.000Z</published>
    <updated>2020-05-20T11:09:09.094Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e7%b1%bb%e5%9e%8b">临时表的类型</a><ul><li><a href="#%e6%9c%ac%e5%9c%b0%e4%b8%b4%e6%97%b6%e8%a1%a8">本地临时表</a></li><li><a href="#%e5%85%a8%e5%b1%80%e4%b8%b4%e6%97%b6%e8%a1%a8">全局临时表</a></li></ul></li><li><a href="#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e5%88%9b%e5%bb%ba">临时表的创建</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e6%96%b9%e5%bc%8f1%e4%b8%8d%e5%9f%ba%e4%ba%8e%e5%8e%9f%e5%a7%8b%e8%a1%a8">创建方式1(不基于原始表)</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%96%b9%e5%bc%8f2%e5%9f%ba%e4%ba%8e%e5%8e%9f%e5%a7%8b%e8%a1%a8">创建方式2(基于原始表)</a></li></ul></li><li><a href="#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e5%a2%9e%e5%88%a0%e6%94%b9%e6%9f%a5">临时表的增删改查</a></li></ul><h1 id="临时表的类型"><a href="#临时表的类型" class="headerlink" title="临时表的类型"></a>临时表的类型</h1><h2 id="本地临时表"><a href="#本地临时表" class="headerlink" title="本地临时表"></a>本地临时表</h2><p>本地临时表仅在当前会话中可见，本地临时表的名称前面有一个数字符号(#table_name)，本地临时表在当前会话结束时都会被自动删除</p><h2 id="全局临时表"><a href="#全局临时表" class="headerlink" title="全局临时表"></a>全局临时表</h2><p>全局临时表在所有会话中都可见，全局临时表的名称前面有两个数字符号(##table_name)，全局临时表在创建此表的会话结束且其他所有任务停止对其引用时会被动删除</p><h1 id="临时表的创建"><a href="#临时表的创建" class="headerlink" title="临时表的创建"></a>临时表的创建</h1><h2 id="创建方式1-不基于原始表"><a href="#创建方式1-不基于原始表" class="headerlink" title="创建方式1(不基于原始表)"></a>创建方式1(不基于原始表)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#临时表名/##临时表名</span></span><br><span class="line">(字段 数据类型)</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">USE SCHOOL</span><br><span class="line">GO</span><br><span class="line">CREATE TABLE #t1</span><br><span class="line">(</span><br><span class="line">id INT,</span><br><span class="line">name VARCHAR(20)</span><br><span class="line">)</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><h2 id="创建方式2-基于原始表"><a href="#创建方式2-基于原始表" class="headerlink" title="创建方式2(基于原始表)"></a>创建方式2(基于原始表)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">into</span> <span class="comment">#临时表名/##临时表名 from 原始表</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">INTO</span> <span class="comment">#student FROM dbo.STUDENT</span></span><br></pre></td></tr></table></figure><h1 id="临时表的增删改查"><a href="#临时表的增删改查" class="headerlink" title="临时表的增删改查"></a>临时表的增删改查</h1><p>与普通表的增删改查一致</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%b4%e6%97%b6%e8%a1%a8%e7%9a%84%e7%b1%bb%e5%9e%8b&quot;&gt;临时表的类型&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9c%ac%e5%9c%b0%e4%b8%b4%e6%97%b6
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习03--数据操作语言DML</title>
    <link href="http://www.dimsum.fun/2020/05/20/27.TsqlReview03/"/>
    <id>http://www.dimsum.fun/2020/05/20/27.TsqlReview03/</id>
    <published>2020-05-20T03:48:00.000Z</published>
    <updated>2020-05-20T11:09:09.094Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%bb%8e%e8%a1%a8%e6%a3%80%e7%b4%a2%e6%95%b0%e6%8d%ae">从表检索数据</a><ul><li><a href="#%e6%9f%a5%e8%af%a2%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%89%80%e6%9c%89%e5%88%97%e6%80%a7%e8%83%bd%e4%bd%8e">查询表中的所有列(性能低)</a></li><li><a href="#%e6%9f%a5%e8%af%a2%e8%a1%a8%e4%b8%ad%e7%9a%84%e5%87%a0%e4%b8%aa%e5%ad%97%e6%ae%b5%e6%80%a7%e8%83%bd%e9%ab%98">查询表中的几个字段(性能高)</a></li></ul></li><li><a href="#%e5%90%91%e8%a1%a8%e4%b8%ad%e6%8f%92%e5%85%a5%e6%95%b0%e6%8d%ae">向表中插入数据</a></li><li><a href="#%e4%bf%ae%e6%94%b9%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae">修改表中的数据</a></li><li><a href="#%e5%88%a0%e9%99%a4%e8%a1%a8%e4%b8%ad%e7%9a%84%e6%95%b0%e6%8d%ae">删除表中的数据</a><ul><li><a href="#%e5%88%a0%e9%99%a4%e8%a1%a8%e4%b8%ad%e9%83%a8%e5%88%86%e6%95%b0%e6%8d%ae">删除表中部分数据</a></li><li><a href="#%e5%88%a0%e9%99%a4%e8%a1%a8%e4%b8%ad%e5%85%a8%e9%83%a8%e6%95%b0%e6%8d%ae">删除表中全部数据</a><ul><li><a href="#%e4%bd%bf%e7%94%a8delete">使用<code>delete</code></a></li><li><a href="#%e4%bd%bf%e7%94%a8truncate">使用<code>truncate</code></a></li></ul></li></ul></li></ul><h1 id="从表检索数据"><a href="#从表检索数据" class="headerlink" title="从表检索数据"></a>从表检索数据</h1><h2 id="查询表中的所有列-性能低"><a href="#查询表中的所有列-性能低" class="headerlink" title="查询表中的所有列(性能低)"></a>查询表中的所有列(性能低)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="查询表中的几个字段-性能高"><a href="#查询表中的几个字段-性能高" class="headerlink" title="查询表中的几个字段(性能高)"></a>查询表中的几个字段(性能高)</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span> ... 字段<span class="number">3</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NAME</span>,SEX <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="向表中插入数据"><a href="#向表中插入数据" class="headerlink" title="向表中插入数据"></a>向表中插入数据</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名</span><br><span class="line">(字段<span class="number">1</span>,字段<span class="number">2</span>,...,字段N)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(值<span class="number">1</span>,值<span class="number">2</span>,...,值N),</span><br><span class="line">(值<span class="number">1</span>,值<span class="number">2</span>,...,值N)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><em>注：N最大为1024</em><br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">INSERT</span> dbo.STUDENT</span><br><span class="line">(<span class="keyword">NAME</span>,SEX,AGE)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">'张小三'</span>,<span class="string">'男'</span>,<span class="string">'14'</span>),</span><br><span class="line">(<span class="string">'李小四'</span>,<span class="string">'女'</span>,<span class="string">'12'</span>)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="修改表中的数据"><a href="#修改表中的数据" class="headerlink" title="修改表中的数据"></a>修改表中的数据</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">update</span> 表名</span><br><span class="line"><span class="keyword">set</span> </span><br><span class="line">字段<span class="number">1</span>=<span class="string">'修改后的值'</span>,</span><br><span class="line">字段<span class="number">2</span>=<span class="string">'修改后的值'</span>,</span><br><span class="line">...</span><br><span class="line"><span class="keyword">where</span> 条件</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">UPDATE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line"><span class="keyword">NAME</span>=<span class="string">'李筱思'</span>,</span><br><span class="line">AGE=<span class="string">'16'</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">2</span></span><br></pre></td></tr></table></figure><h1 id="删除表中的数据"><a href="#删除表中的数据" class="headerlink" title="删除表中的数据"></a>删除表中的数据</h1><h2 id="删除表中部分数据"><a href="#删除表中部分数据" class="headerlink" title="删除表中部分数据"></a>删除表中部分数据</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">where</span> 条件</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.STUDENT <span class="keyword">WHERE</span> <span class="keyword">ID</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="删除表中全部数据"><a href="#删除表中全部数据" class="headerlink" title="删除表中全部数据"></a>删除表中全部数据</h2><h3 id="使用delete"><a href="#使用delete" class="headerlink" title="使用delete"></a>使用<code>delete</code></h3><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h3 id="使用truncate"><a href="#使用truncate" class="headerlink" title="使用truncate"></a>使用<code>truncate</code></h3><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><p><em>注：<code>truncate table 表名</code>与<code>delete from 表名</code>效果相同，删除表中的所有记录，但是<code>truncate</code>速度快使用的系统资源和事务日志资源更少</em></p><p><em>删除表中全部数据，但是表的框架还在，即各个字段都还存在，只是表中没有记录而已，要删除整张表，得使用<code>drop table 表名</code></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%8e%e8%a1%a8%e6%a3%80%e7%b4%a2%e6%95%b0%e6%8d%ae&quot;&gt;从表检索数据&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%9f%a5%e8%af%a2%e8%a1%a8%e4%b8%ad
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习02--数据表操作</title>
    <link href="http://www.dimsum.fun/2020/05/20/26.TSqlReview02/"/>
    <id>http://www.dimsum.fun/2020/05/20/26.TSqlReview02/</id>
    <published>2020-05-20T02:21:00.000Z</published>
    <updated>2020-05-20T11:09:09.093Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5">数据库相关概念</a></li><li><a href="#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b%e7%b1%bb%e5%88%ab">数据类型类别</a></li><li><a href="#%e6%a0%87%e8%af%86%e7%ac%a6">标识符</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%a1%a8%e7%9a%84%e8%a7%84%e5%88%99">创建表的规则</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e5%88%9b%e5%bb%ba%e8%a1%a8">使用T-SQL创建表</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e4%bf%ae%e6%94%b9%e8%a1%a8%e5%88%97%e5%b1%9e%e6%80%a7">使用T-SQL修改表列属性</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%b7%bb%e5%8a%a0%e5%88%a0%e9%99%a4%e8%a1%a8%e5%88%97">使用T-SQL添加删除表列</a><ul><li><a href="#%e6%b7%bb%e5%8a%a0%e5%88%97">添加列</a></li><li><a href="#%e5%88%a0%e9%99%a4%e5%88%97">删除列</a></li></ul></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e4%bf%ae%e6%94%b9%e8%a1%a8%e5%90%8d">使用T-SQL修改表名</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e5%88%a0%e9%99%a4%e8%a1%a8">使用T-SQL删除表</a></li></ul><h1 id="数据库相关概念"><a href="#数据库相关概念" class="headerlink" title="数据库相关概念"></a>数据库相关概念</h1><ul><li>数据库就是存放数据的仓库</li><li>数据库由表、关系及操作对象组成</li><li>数据存放在表中</li><li>数据库表由记录组成</li><li>记录由字段组成</li><li>字段由字符或数字等组成</li><li>在创建表时，要考虑数据表的结构问题，也就是涉及确定数据表中各列的数据格式是数值、字符、日期、货币、图像等其他数据格式，这个数据格式就是数据类型</li><li>在SQL Server数据库中，每个列、变量、表达式和参数都有其各自的数据类型。指定对象的数据类型相当于定义了对象的以下特性<ul><li>对象所含的数据类型，如字符、整数或二进制数</li><li>所存储值的长度或它的大小</li><li>小数位数(仅用于数字数据类型)</li></ul></li></ul><h1 id="数据类型类别"><a href="#数据类型类别" class="headerlink" title="数据类型类别"></a>数据类型类别</h1><table><thead><tr><th>描述</th><th>具体类型</th></tr></thead><tbody><tr><td>字符串</td><td>char、varchar、text</td></tr><tr><td>Unicode字符串</td><td>nchar、nvarchar、ntext</td></tr><tr><td>精确数字</td><td>bigint、int、smallint、tinyint、numeric、decimal、money、smallmoney</td></tr><tr><td>日期和时间</td><td>datetime2、datetime、smalldatetime、date、time、datetimeoffset</td></tr><tr><td>近似数字</td><td>float、real</td></tr><tr><td>二进制字符串</td><td>binary、varbinary、image</td></tr><tr><td>其他数据类型</td><td>cursor、timestamp、hierarchyid、uniqueidentifier、xml、sql_variant、table</td></tr></tbody></table><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><ul><li>标识符可以包含字符、符号及数字，不允许有空格</li><li>标识符应尽量短</li><li>标识符要使用有意义的名字</li><li>使用能够区分对象类型的标识符</li><li>保持对象名和用户名唯一性</li></ul><h1 id="创建表的规则"><a href="#创建表的规则" class="headerlink" title="创建表的规则"></a>创建表的规则</h1><ul><li>表和列的名称必须遵守标识符的规定</li><li>列名在表中必须是唯一的</li><li>必须为每列指定数据类型</li><li>每一行代表一条唯一的记录</li></ul><h1 id="使用T-SQL创建表"><a href="#使用T-SQL创建表" class="headerlink" title="使用T-SQL创建表"></a>使用T-SQL创建表</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名</span><br><span class="line">(</span><br><span class="line">    字段<span class="number">1</span> 数据类型 <span class="keyword">identity</span>(标识种子,递增量) 是否为空,</span><br><span class="line">    字符<span class="number">2</span> 数据类型 是否为空,</span><br><span class="line">    ...</span><br><span class="line">    字段N 数据类型 是否为空</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p><em>注：N最大可等于1024</em><br>在数据库中，常用的一个流水编号通常会使用<code>identity</code>字段来进行设置，这种编号的个好处是一定不会重复，而且一定是唯一的，这对<code>table</code>中的唯一值特性很重要，通常用来做客户编号、订单编号等功能。<code>identity</code>用在数据类型后边，并定义初始值和递增量，因为使用<code>identity</code>的字段由数据库维护，所以在<code>insert into</code>该表时，不需要对该字段插入值<br>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> STUDENT</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">BIGINT</span> <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">SEX <span class="built_in">CHAR</span>(<span class="number">2</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">AGE <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL修改表列属性"><a href="#使用T-SQL修改表列属性" class="headerlink" title="使用T-SQL修改表列属性"></a>使用T-SQL修改表列属性</h1><p>当数据库中的表创建完成后，可以根据需要改变表中原先定义的许多选项，以更改表的结构。用户可以增加、删除和修改列，增加、删除和修改约束，更改表名以及改变表的所有者等</p><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">column</span> 字段名 新数据类型 (新长度)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="keyword">NAME</span> <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL添加删除表列"><a href="#使用T-SQL添加删除表列" class="headerlink" title="使用T-SQL添加删除表列"></a>使用T-SQL添加删除表列</h1><h2 id="添加列"><a href="#添加列" class="headerlink" title="添加列"></a>添加列</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span> 字段名<span class="number">1</span> 数据类型 <span class="literal">null</span><span class="comment">--是否可空，默认是空，若要不为空，可以指定为not null</span></span><br><span class="line"><span class="keyword">add</span> 字段名<span class="number">2</span> ... <span class="comment">--可以同时添加多列</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">ADD</span> PHONE <span class="built_in">CHAR</span>(<span class="number">20</span>) <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h2 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> 字段名<span class="number">1</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> 字段名<span class="number">2</span></span><br><span class="line">... <span class="comment">--可以同时删除多列</span></span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> dbo.STUDENT</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">COLUMN</span> PHONE</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL修改表名"><a href="#使用T-SQL修改表名" class="headerlink" title="使用T-SQL修改表名"></a>使用T-SQL修改表名</h1><p>需要使用到系统自带的<code>sp_name</code>存储过程<br>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line">exec sp_rename <span class="string">'旧表名'</span>,<span class="string">'新表名'</span></span><br></pre></td></tr></table></figure><p>示例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line">EXEC sys.sp_rename <span class="string">'STUDENT'</span>,<span class="string">'STUDENT01'</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h1 id="使用T-SQL删除表"><a href="#使用T-SQL删除表" class="headerlink" title="使用T-SQL删除表"></a>使用T-SQL删除表</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> 数据库名</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> SCHOOL</span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> dbo.STUDENT01</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3%e6%a6%82%e5%bf%b5&quot;&gt;数据库相关概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e7%b1%
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>T-SQL复习01--数据库操作</title>
    <link href="http://www.dimsum.fun/2020/05/20/25.TSqlReview01/"/>
    <id>http://www.dimsum.fun/2020/05/20/25.TSqlReview01/</id>
    <published>2020-05-20T01:32:00.000Z</published>
    <updated>2020-05-20T11:09:09.093Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#t-sql">T-SQL</a><ul><li><a href="#ddl%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80">DDL(数据定义语言)</a></li><li><a href="#dml%e6%95%b0%e6%8d%ae%e6%93%8d%e4%bd%9c%e8%af%ad%e8%a8%80">DML(数据操作语言)</a></li><li><a href="#dcl%e6%95%b0%e6%8d%ae%e6%8e%a7%e5%88%b6%e8%af%ad%e8%a8%80">DCL(数据控制语言)</a></li><li><a href="#dql%e6%95%b0%e6%8d%ae%e6%9f%a5%e8%af%a2%e8%af%ad%e8%a8%80">DQL(数据查询语言)</a></li></ul></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e5%88%9b%e5%bb%ba%e6%95%b0%e6%8d%ae%e5%ba%93">使用T-SQL创建数据库</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%96%b0%e5%a2%9e%e8%be%85%e5%8a%a9%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6">使用T-SQL新增辅助数据文件</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%96%b0%e5%a2%9e%e6%97%a5%e5%bf%97%e6%96%87%e4%bb%b6">使用T-SQL新增日志文件</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e4%bf%ae%e6%94%b9%e6%95%b0%e6%8d%ae%e5%ba%93%e6%96%87%e4%bb%b6%e5%b1%9e%e6%80%a7">使用T-SQL修改数据库文件属性</a></li><li><a href="#%e4%bd%bf%e7%94%a8t-sql%e6%93%8d%e4%bd%9c%e6%96%87%e4%bb%b6%e7%bb%84">使用T-SQL操作文件组</a><ul><li><a href="#%e6%b7%bb%e5%8a%a0%e6%96%87%e4%bb%b6%e7%bb%84">添加文件组</a></li><li><a href="#%e6%b7%bb%e5%8a%a0%e6%96%87%e4%bb%b6%e6%8a%8a%e5%ae%83%e6%94%be%e8%bf%9b%e6%96%87%e4%bb%b6%e7%bb%84">添加文件把它放进文件组</a></li><li><a href="#%e8%ae%be%e7%bd%ae%e9%bb%98%e8%ae%a4%e6%96%87%e4%bb%b6%e7%bb%84">设置默认文件组</a></li></ul></li><li><a href="#%e4%bf%ae%e6%94%b9%e6%95%b0%e6%8d%ae%e5%ba%93%e5%90%8d%e7%a7%b0%e5%88%a0%e9%99%a4%e6%95%b0%e6%8d%ae%e5%ba%93">修改数据库名称/删除数据库</a><ul><li><a href="#%e4%bf%ae%e6%94%b9%e6%95%b0%e6%8d%ae%e5%ba%93%e5%90%8d%e7%a7%b0">修改数据库名称</a></li><li><a href="#%e5%88%a0%e9%99%a4%e6%95%b0%e6%8d%ae%e5%ba%93">删除数据库</a></li></ul></li></ul><h1 id="T-SQL"><a href="#T-SQL" class="headerlink" title="T-SQL"></a>T-SQL</h1><h2 id="DDL-数据定义语言"><a href="#DDL-数据定义语言" class="headerlink" title="DDL(数据定义语言)"></a>DDL(数据定义语言)</h2><p>主要针对数据库对象，数据库对象包括表、视图、存储过程、索引等</p><ul><li><code>create</code>(创建)</li><li><code>alter</code>(修改)</li><li><code>drop</code>(删除)<h2 id="DML-数据操作语言"><a href="#DML-数据操作语言" class="headerlink" title="DML(数据操作语言)"></a>DML(数据操作语言)</h2>主要针对对象的内容，对象的内容包括表或视图的记录(数据)</li><li><code>insert</code>(插入)</li><li><code>update</code>(更新)</li><li><code>delete</code>(删除)<h2 id="DCL-数据控制语言"><a href="#DCL-数据控制语言" class="headerlink" title="DCL(数据控制语言)"></a>DCL(数据控制语言)</h2>主要针对用户权限的控制，如数据库的权限和服务器的权限等</li><li><code>revoke</code>(撤销)</li><li><code>deny</code>(拒绝)</li><li><code>grant</code>(同意、授权)<h2 id="DQL-数据查询语言"><a href="#DQL-数据查询语言" class="headerlink" title="DQL(数据查询语言)"></a>DQL(数据查询语言)</h2>就是针对数据查询的</li><li><code>select</code>(查询)</li></ul><h1 id="使用T-SQL创建数据库"><a href="#使用T-SQL创建数据库" class="headerlink" title="使用T-SQL创建数据库"></a>使用T-SQL创建数据库</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">on</span> primary</span><br><span class="line">(</span><br><span class="line">    <span class="comment">--数据文件</span></span><br><span class="line">    <span class="keyword">name</span>=<span class="string">'逻辑名'</span>,</span><br><span class="line">    filename=<span class="string">'文件的存放路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=数据文件的初始大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=数据文件的最大大小,</span><br><span class="line">    filegrowth=文件的增长方式</span><br><span class="line">)</span><br><span class="line"><span class="keyword">log</span> <span class="keyword">on</span></span><br><span class="line">(</span><br><span class="line">    <span class="comment">--日志文件</span></span><br><span class="line">    <span class="keyword">name</span>=逻辑名</span><br><span class="line">    filename=<span class="string">'文件的存放路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=日志文件的初始大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=日志文件的最大大小,</span><br><span class="line">    filegrowth=日志文件的增长方式</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ON</span> PRIMARY</span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL.MDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">10</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">100</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">2</span>MB</span><br><span class="line">)</span><br><span class="line"><span class="keyword">LOG</span> <span class="keyword">ON</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL_LOG'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL_LOG.LDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="keyword">UNLIMITED</span>, <span class="comment">--大小不受限制</span></span><br><span class="line">    FILEGROWTH=<span class="number">10</span>%</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL新增辅助数据文件"><a href="#使用T-SQL新增辅助数据文件" class="headerlink" title="使用T-SQL新增辅助数据文件"></a>使用T-SQL新增辅助数据文件</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span>=<span class="string">'逻辑名'</span>,</span><br><span class="line">    filename=<span class="string">'文件存放的路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=初始大小</span><br><span class="line">    <span class="keyword">maxsize</span>=最大大小,</span><br><span class="line">    filegrowth=增长方式</span><br><span class="line">)</span><br><span class="line"><span class="keyword">go</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL01'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL01.NDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">100</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">3</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL新增日志文件"><a href="#使用T-SQL新增日志文件" class="headerlink" title="使用T-SQL新增日志文件"></a>使用T-SQL新增日志文件</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">log</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span>=逻辑名</span><br><span class="line">    filename=<span class="string">'文件的存放路径'</span>,</span><br><span class="line">    <span class="keyword">size</span>=日志文件的初始大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=日志文件的最大大小,</span><br><span class="line">    filegrowth=日志文件的增长方式</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">LOG</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL_LOG01'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL_LOG01.LDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">80</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">1</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL修改数据库文件属性"><a href="#使用T-SQL修改数据库文件属性" class="headerlink" title="使用T-SQL修改数据库文件属性"></a>使用T-SQL修改数据库文件属性</h1><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">file</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">name</span>=<span class="string">'逻辑名'</span>,</span><br><span class="line">    <span class="keyword">size</span>=修改后的大小,</span><br><span class="line">    <span class="keyword">maxsize</span>=修改后的大小，</span><br><span class="line">    filegrowth=修改后的大小</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">NAME</span>=<span class="string">'SCHOOL_LOG01'</span>,</span><br><span class="line"><span class="keyword">SIZE</span>=<span class="number">18</span>MB,</span><br><span class="line"><span class="keyword">MAXSIZE</span>=<span class="number">88</span>MB,</span><br><span class="line">FILEGROWTH=<span class="number">8</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="使用T-SQL操作文件组"><a href="#使用T-SQL操作文件组" class="headerlink" title="使用T-SQL操作文件组"></a>使用T-SQL操作文件组</h1><h2 id="添加文件组"><a href="#添加文件组" class="headerlink" title="添加文件组"></a>添加文件组</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> filegroup 文件组名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> FILEGROUP FILEGROUP01</span><br></pre></td></tr></table></figure><h2 id="添加文件把它放进文件组"><a href="#添加文件把它放进文件组" class="headerlink" title="添加文件把它放进文件组"></a>添加文件把它放进文件组</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">file</span></span><br><span class="line">(...)</span><br><span class="line"><span class="keyword">to</span> filegroup 文件组名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">FILE</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">NAME</span>=<span class="string">'SCHOOL02'</span>,</span><br><span class="line">    FILENAME=<span class="string">'C:\database\SCHOOL02.NDF'</span>,</span><br><span class="line">    <span class="keyword">SIZE</span>=<span class="number">5</span>MB,</span><br><span class="line">    <span class="keyword">MAXSIZE</span>=<span class="number">50</span>MB,</span><br><span class="line">    FILEGROWTH=<span class="number">1</span>MB</span><br><span class="line">)</span><br><span class="line"><span class="keyword">TO</span> FILEGROUP FILEGROUP01</span><br></pre></td></tr></table></figure><h2 id="设置默认文件组"><a href="#设置默认文件组" class="headerlink" title="设置默认文件组"></a>设置默认文件组</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 数据库名</span><br><span class="line"><span class="keyword">modify</span> filegroup 文件组名 <span class="keyword">default</span></span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">MODIFY</span> FILEGROUP FILEGROUP01 <span class="keyword">DEFAULT</span></span><br></pre></td></tr></table></figure><h1 id="修改数据库名称-删除数据库"><a href="#修改数据库名称-删除数据库" class="headerlink" title="修改数据库名称/删除数据库"></a>修改数据库名称/删除数据库</h1><h2 id="修改数据库名称"><a href="#修改数据库名称" class="headerlink" title="修改数据库名称"></a>修改数据库名称</h2><p>具体语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 原数据库名称</span><br><span class="line"><span class="keyword">modify</span> <span class="keyword">name</span>=新数据库名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> SCHOOL</span><br><span class="line"><span class="keyword">MODIFY</span> <span class="keyword">NAME</span>=SCHOOL_NEW</span><br></pre></td></tr></table></figure><h2 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h2><p><strong>不能删除系统数据库</strong><br>具体语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database 数据库名</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> SCHOOL_NEW</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#t-sql&quot;&gt;T-SQL&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ddl%e6%95%b0%e6%8d%ae%e5%ae%9a%e4%b9%89%e8%af%ad%e8%a8%80&quot;&gt;DDL(数据定义语言)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a
      
    
    </summary>
    
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/categories/SQL-Server/"/>
    
    
      <category term="T-SQL" scheme="http://www.dimsum.fun/tags/T-SQL/"/>
    
      <category term="SQL Server" scheme="http://www.dimsum.fun/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>面试备忘</title>
    <link href="http://www.dimsum.fun/2020/05/14/24.InterviewBackup/"/>
    <id>http://www.dimsum.fun/2020/05/14/24.InterviewBackup/</id>
    <published>2020-05-14T09:51:00.000Z</published>
    <updated>2020-05-27T16:57:02.914Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#aspnet-core">ASP.NET Core</a></li><li><a href="#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3">数据库相关</a></li><li><a href="#%e5%85%b6%e4%bb%96">其他</a></li></ul><p>一些面试题的备忘</p><h1 id="ASP-NET-Core"><a href="#ASP-NET-Core" class="headerlink" title="ASP.NET Core"></a>ASP.NET Core</h1><ol><li><p>服务的注册方式和获取方式</p><p><strong>解答</strong></p><ol><li>使用框架自带的<code>IoC</code>框架是通过<code>Startup</code>的<code>ConfigureService</code>方法里的<code>IServiceCollerction</code>进行注册</li><li>一般通过接口与实现类的方式实现，也可以通过工厂的方式进行注册服务，不推荐直接<code>new</code>服务进行注册，这样<code>IoC</code>框架是不会进行该服务的生命周期管理</li><li>获取方式一般可以通过构造函数、参数的<code>[FromService]</code>、通过<code>BuilderServiceProvider</code>获取<code>serviceProvider</code>对象，在<code>serviceProvider</code>里获取服务</li></ol></li><li><p><code>autofac</code>和自带的<code>IoC</code>框架的区别</p><p><strong>解答</strong></p><ol><li>Autofac新增基于名称的注入、属性注入、AOP</li><li>注册服务的地方是在<code>Startup</code>里新增的<code>ConfigureContainer</code>方法里</li></ol></li><li><p><code>WebAPI</code>的<code>CQRS</code>策略</p></li><li><p><code>JWT</code>的组成和加密方式</p><p><strong>解答</strong></p><ol><li>加密方式.经过base64转码的消息主体.签名</li><li>使用HS256的签名加密方式</li></ol></li><li><p><code>ViewData</code>、<code>ViewBag</code>、<code>TempData</code>的区别</p><p><strong>解答：</strong></p><ol><li><code>ViewBag</code>是在<code>ViewData</code>上面加一层<code>dynamic</code>，如果用同个<code>key</code>，比如<code>ViewBag.Info=&quot;ABC&quot;</code>，在页面其实也可以通过<code>ViewData[&quot;Info&quot;]</code>来获取，同时也以为着<code>ViewBag=&quot;ABC&quot;;ViewData[&quot;info&quot;]=&quot;123&quot;</code>，后面会覆盖前面的；</li><li><code>TempData</code>是存放在<code>session</code>里面，意味着可以跨<code>action</code>来取值，比如<code>ActionA</code>中赋值了<code>TempData[&quot;Info&quot;]=&quot;ABC&quot;</code>，在<code>ActionA</code>对应的<code>ViewA</code>中点击跳转到<code>ActionB</code>，则可以直接在<code>ActionB</code>中通过<code>TempData[&quot;Info&quot;]</code>来取得<code>&quot;ABC&quot;</code></li><li>但是要注意，<code>TempData</code>在被取值之后就会被删除，所以上面的场景如果在<code>ActionA</code>对应的<code>ViewA</code>中把<code>TempData[&quot;Info&quot;]</code>取出来，则在<code>ActionB</code>中就获取不到<code>TempData[&quot;Info&quot;]</code>的值，获取到的是个<code>null</code></li></ol></li><li><p><code>API</code>的版本管理</p><p><strong>解答</strong></p><ol><li>使用URL带版本的方式，在<code>Controller</code>里使用<code>[Route(&#39;&#39;)]</code>来指定版本</li></ol></li><li><p>使用中间件Use/Run/Map的区别</p><p><strong>解答</strong></p><ol><li>通常使用的<code>Use</code></li><li><code>Run</code>起到的是断路器的作用，即不再执行后面的中间件</li><li><code>Map</code>一般是针对特殊的路径使用特殊的中间件管道</li></ol></li><li><p>中间件里面怎么获取服务</p><p><strong>解答</strong></p><ol><li>使用中间件的<code>Invoke</code>方法中的<code>HttpContext</code>对象<code>context.RequestServices.GetService&lt;T&gt;()</code>来获取</li></ol></li><li><p><code>EFCore</code>的<code>TPH</code></p></li><li><p><code>EFCore</code>的<code>lazyload</code></p></li></ol><h1 id="数据库相关"><a href="#数据库相关" class="headerlink" title="数据库相关"></a>数据库相关</h1><ol><li><p><code>delete</code>、<code>truncate</code>的区别</p><p><strong>解答：</strong></p><ol><li><code>delete</code>可以带<code>where</code>，<code>truncate</code>不能带<code>where</code></li><li><code>delete</code>慢，<code>truncate</code>快</li><li><code>delete</code>每删一条数据都会在数据库日志里记录这条记录，<code>truncate</code>只会记录整表做了清除记录，这意味这<code>delete</code>可以被回滚，<code>truncate</code>是不能回滚的</li><li><code>delete</code>会触发<code>delete</code>触发器，<code>truncate</code>是不会触发任何触发器的</li></ol></li></ol><ol start="2"><li><code>view</code>、<code>table</code>的区别</li><li><code>go</code>做了什么，<code>go</code>上面定义的变量<code>go</code>下面能获得到吗？</li><li>定义事务的标准</li><li>连续自增的主键删除掉一个断开了，怎么补回这个断掉的逐渐</li><li><code>select * into A from B</code>、<code>insert into A select * from B</code>的区别</li><li><pre><code class="sql"><span class="keyword">create</span> <span class="keyword">table</span> <span class="comment">#tmp_A(id int)</span><span class="keyword">go</span><span class="keyword">insert</span> <span class="keyword">into</span> <span class="comment">#tmp_A values(1)</span><span class="comment">--select * from #tmp_A</span><span class="keyword">if</span> @@<span class="keyword">error</span>&lt;&gt;<span class="number">0</span> print @@<span class="keyword">error</span><span class="keyword">else</span> print @@rowcount</code></pre>上面的执行结果是什么</li><li>存储过程中<code>@</code>、<code>#</code>、<code>##</code>、<code>CTE</code>的区别</li><li>聚集索引与非聚集所以区别</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ol><li><p><code>.xsd</code>、<code>XML</code>的<code>schemas</code></p></li><li><p><code>json</code>是什么</p></li><li><p><code>rabbitmq</code>中的<code>topic</code>、<code>queue</code>是什么，消息持久化是在哪个位置</p></li><li><p>说一下<code>pub/sub</code>，订阅的时候能获得订阅之前的消息吗？</p></li><li><p><code>Queue</code>、<code>ConQueue</code>的区别</p></li><li><p>从数据结构说一下<code>stack</code>、<code>queue</code>的区别</p></li><li><p>编译的时候<code>Debug模式</code>和<code>Release模式</code>的区别</p><p><strong>解答：</strong></p><ol><li>在<code>Debug</code>模式可以使用<code>#IF DEBUG</code>来跑一些调试模式下的特殊代码，在打包成<code>Release</code>的<code>DLL</code>的时候，<code>#IF DEBUG</code>的代码会被忽略</li></ol></li><li><p>编译时选择<code>Any CPU</code>、<code>x86</code>、<code>x64</code>的区别</p></li><li><p><code>DDD</code>是怎么分层的</p></li><li><p>说一下 聚合根、实体、值对象</p></li><li><p><code>DDD</code>的仓储层是怎么实现的</p></li><li><p><code>async/await</code>会不会堵塞主线程，如果会，那为什么还要用？</p><p><strong>解答</strong></p><ol><li>调用线程在遇到<code>await</code>的时候，会直接返回去做调用后的事情，不会执行<code>await</code>后面的代码</li><li>可以粗暴的认为，在<code>await</code>后面的代码会被包装成一个回调，在<code>await</code>代码执行完成之后，再执行回调代码，其中回调的线程具备多种可能行，可能是执行<code>await</code>代码的线程，也可能是新线程</li><li>反编译查看：首先IL里面是没有<code>async/await</code>的，就是常规代码，代码正常执行的时候，会实例化一个状态机，状态=-1，然后执行Task前面的普通代码，遇到<code>await Task.Run()</code>的时候会启动线程去执行Task，然后判断是否完成，这时候线程刚启动肯定没完成，所以判断为未完成，并将状态重置=0，然后递归调用一下自己，调用之后再次判断是否状态，发现状态=0，则表示调用线程任务完成，返回去做自己原来的事</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#aspnet-core&quot;&gt;ASP.NET Core&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%95%b0%e6%8d%ae%e5%ba%93%e7%9b%b8%e5%85%b3&quot;&gt;数据库相关&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hre
      
    
    </summary>
    
    
      <category term="面试" scheme="http://www.dimsum.fun/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="面试" scheme="http://www.dimsum.fun/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
