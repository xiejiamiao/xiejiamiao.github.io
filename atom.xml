<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dimsum</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://doc.dimsum.com/"/>
  <updated>2020-03-27T07:17:51.807Z</updated>
  <id>http://doc.dimsum.com/</id>
  
  <author>
    <name>Jiamiao.x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://doc.dimsum.com/2020/03/27/hello-world/"/>
    <id>http://doc.dimsum.com/2020/03/27/hello-world/</id>
    <published>2020-03-27T07:17:51.807Z</published>
    <updated>2020-03-27T07:17:51.807Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>.NET Core使用Cap</title>
    <link href="http://doc.dimsum.com/2020/03/27/dotnet-core-cap/"/>
    <id>http://doc.dimsum.com/2020/03/27/dotnet-core-cap/</id>
    <published>2020-03-26T16:00:00.000Z</published>
    <updated>2020-03-28T17:05:59.262Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c">准备工作</a></li><li><a href="#%e9%a1%b9%e7%9b%ae%e8%ae%be%e5%ae%9a">项目设定</a></li><li><a href="#%e5%88%9b%e5%bb%baservicea">创建ServiceA</a></li><li><a href="#%e5%88%9b%e5%bb%baserviceb">创建ServiceB</a></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><code>CAP</code>需要依赖消息队列和数据存储，支持情况如下：<br>消息队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kafka</span><br><span class="line">RabbitMQ</span><br><span class="line">AzureServiceBus</span><br></pre></td></tr></table></figure><p>数据存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SqlServer</span><br><span class="line">MySql</span><br><span class="line">PostgreSql</span><br><span class="line">MongoDB</span><br></pre></td></tr></table></figure><p>两者自行搭配选择即可，其中<code>SqlServer</code>和<code>RabbitMQ</code>在docker中的安装可参照我另一篇备忘<a href="https://xiejiamiao.github.io/2020/03/27/chang-yong-docker/" target="_blank" rel="noopener">开发常用的docker镜像</a></p><h1 id="项目设定"><a href="#项目设定" class="headerlink" title="项目设定"></a>项目设定</h1><ul><li>两个服务，分别为<code>ServiceA</code>,<code>ServiceB</code></li><li><code>SqlServer</code>使用<code>CapDemo</code>数据库，默认<code>sa</code>账号，密码为<code>Today_is_20200328</code>，端口为默认的<code>1433</code>端口</li><li><code>RabbitMQ</code>安装地址为本机，默认端口，账号密码为<code>admin/admin</code></li></ul><h1 id="创建ServiceA"><a href="#创建ServiceA" class="headerlink" title="创建ServiceA"></a>创建ServiceA</h1><ol><li>在<code>Visual Studio 2019</code>中创建空白解决方案，取名为<code>Jiamiao.x.CapDemo</code></li><li>在解决方案中新建<code>Asp.net core</code>项目，名字为<code>Jiamiao.x.CapDemo.ServiceA</code>，<code>.net core</code>版本为<code>3.1</code></li><li><code>nuget</code>安装以下4个包 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DotNetCore.CAP</span><br><span class="line">DotNetCore.CAP.Dashboard</span><br><span class="line">DotNetCore.CAP.RabbitMQ</span><br><span class="line">DotNetCore.CAP.SqlServer</span><br></pre></td></tr></table></figure></li><li>在<code>Startup.cs</code>的<code>ConfigureServices</code>方法中加入以下代码 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">services.AddCap(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseSqlServer(<span class="string">"Password=Today_is_20200328;Persist Security Info=True;User ID=sa;Initial Catalog=CapDemo;Data Source=127.0.0.1"</span>);</span><br><span class="line">    options.UseRabbitMQ(r =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        r.HostName = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        r.UserName = <span class="string">"admin"</span>;</span><br><span class="line">        r.Password = <span class="string">"admin"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    options.UseDashboard();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>此时直接运行项目，如果数据库与消息队列均能正常连接，则会在数据库中生成以下两张表 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cap.Published</span><br><span class="line">cap.Received</span><br></pre></td></tr></table></figure></li><li>在<code>Controllers/WeatherForecastController.cs</code>中编写消息发布代码<br> 6.1 通过构造函数依赖注入<code>ICapPublisher</code>对象<br> 6.2 发布消息只需要调用<code>ICapPublisher</code>对象的<code>PublishAsync</code>或<code>Publish</code>方法，传入参数为队列名和消息值，全部代码如下: <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"Freezing"</span>, <span class="string">"Bracing"</span>, <span class="string">"Chilly"</span>, <span class="string">"Cool"</span>, <span class="string">"Mild"</span>, <span class="string">"Warm"</span>, <span class="string">"Balmy"</span>, <span class="string">"Hot"</span>, <span class="string">"Sweltering"</span>, <span class="string">"Scorching"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ICapPublisher _capPublisher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger,ICapPublisher capPublisher</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">            _capPublisher = capPublisher;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;WeatherForecast&gt;&gt; Get()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _capPublisher.PublishAsync(<span class="string">"jiamiao.x.cap.demo.show.time"</span>, DateTime.Now);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">            &#123;</span><br><span class="line">                Date = DateTime.Now.AddDays(index),</span><br><span class="line">                TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">                Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">            &#125;)</span><br><span class="line">            .ToArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写接收消息代码，接收消息有两种方式，一种在控制器中，即代码写在<code>***Controller.cs</code>中，另一种是在非控制器中，一般为<code>***Service.cs</code>中，以下分两步执行，因为<code>CAP</code>在默认情况下一个服务多个地方进行订阅，只会进行一次接收，除非进行分组(后面介绍)，所以<code>8/9</code>两个步骤在测试时需要注释其中一个，只保留另一个</li><li>编写在控制器中接收消息的代码，直接在控制器中写对应方法，方法参数为发送消息时传入的消息值类型，方法无返回值，再加上方法标签<code>CapSubscribe</code>即可，具体代码如下: <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowTime</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"接受方：SubController.ShowTime   接收到值：<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <strong>做到这步可以进行一次测试，就可以发现访问<code>/WeatherForecast</code>这个接口，会发送一条当前时间的消息出去，同时接收方也会在控制台打印出接收到的消息</strong></li><li>编写服务中接收消息的代码，需要注意接收消息的类需要继承<code>ICapSubscribe</code>接口，同时这里为了方便进行依赖注入，这里我们也自己定义了一个<code>ISubscriberService</code>接口，同时服务需要在<code>Startup.cs</code>的<code>ConfigureServices</code>方法中进行注册<br> 9.1 <code>ISubscriberService.cs</code>代码如下 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubscriberService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ReceivedShowTimeMessage</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 9.2 <code>SubscriberService.cs</code>代码如下 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubscriberService</span>: <span class="title">ISubscriberService</span>, <span class="title">ICapSubscribe</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceivedShowTimeMessage</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"接受方：SubscriberService.ReceivedShowTimeMessage   接收到值：<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 9.3 服务注册代码如下 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;ISubscriberService, SubscriberService&gt;();</span><br></pre></td></tr></table></figure> <strong>注意：这行服务注册代码需要在<code>services.AddCap</code>这个方法之前注册，否则<code>CAP</code>在进行接口扫描的时候找不到对应已经实现了<code>ICapSubscribe</code>接口的实现类，则无法进行订阅者注册</strong><br> <strong>注释掉第8步，进行第9步的测试，效果应该与第8步一致</strong></li><li>有时候一个消息需要多个消费者同时消费，则可以使用<code>Group</code>概念，消息发送代码不变，在标记<code>CapSubscribe</code>的时候，使用<code>Group</code>参数，多个Group订阅同个消息Id，消息则会对应分发到多个Group中，同个Group只能消费一次，即一个Group对一个消息Id订阅多次，也会只接收一次，具体代码如下<br>SubscriberService.cs中新增Group参数<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>,Group = <span class="meta-string">"SubscriberService"</span>)</span>]</span><br></pre></td></tr></table></figure>SubController.cs中新增Group参数<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>,Group = <span class="meta-string">"SubController"</span>)</span>]</span><br></pre></td></tr></table></figure></li><li>测试Group功能，将项目跑起来，此时再访问发送消息的api，会在控制台中打印出两条消息接收记录</li></ol><h1 id="创建ServiceB"><a href="#创建ServiceB" class="headerlink" title="创建ServiceB"></a>创建ServiceB</h1><p>ServiceB使用<code>EFCore</code>来进行配置，找<code>ServiceA</code>步骤2创建<code>Jiamiao.x.CapDemo.ServiceB</code>项目，因为<code>.Net Core 3.1</code>没有自带<code>EFCore</code>，所以这里除了<code>CAP</code>的4个包之外，还需要nuget安装<code>EFCore</code>的两个包，汇总起来需要nuget安装的包如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DotNetCore.CAP</span><br><span class="line">DotNetCore.CAP.Dashboard</span><br><span class="line">DotNetCore.CAP.RabbitMQ</span><br><span class="line">DotNetCore.CAP.SqlServer</span><br><span class="line">Microsoft.EntityFrameworkCore</span><br><span class="line">Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><br>创建<code>ServiceDbContext.cs</code>文件，代码如下<br>    <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceB.Infrastructure</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceDbContext</span>: <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceDbContext</span>(<span class="params">DbContextOptions&lt;ServiceDbContext&gt; options</span>):<span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在<code>Startup.cs</code>中配置<code>EFCore</code>和<code>CAP</code>，具体代码如下：<br>    <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;ServiceDbContext&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseSqlServer(</span><br><span class="line">        <span class="string">"Password=Today_is_20200328;Persist Security Info=True;User ID=sa;Initial Catalog=CapDemo;Data Source=127.0.0.1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">services.AddCap(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseEntityFramework&lt;ServiceDbContext&gt;();</span><br><span class="line">    options.UseRabbitMQ(r =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        r.HostName = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        r.UserName = <span class="string">"admin"</span>;</span><br><span class="line">        r.Password = <span class="string">"admin"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    options.UseDashboard();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>后续操作与<code>ServiceA</code>类似，需要注意：<strong>多个站点订阅同个消息Id，消息会往多个站点进行发送</strong></p><blockquote><p>附上CAP的Github地址:<a href="https://github.com/dotnetcore/CAP" target="_blank" rel="noopener">https://github.com/dotnetcore/CAP</a></p></blockquote><p><em>还有一些配合EF的操作还没来得及写，有空再说吧</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c&quot;&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%a1%b9%e7%9b%ae%e8%ae%be%e5%ae%9a&quot;&gt;项目设定&lt;/a&gt;&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term=".NET" scheme="http://doc.dimsum.com/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="http://doc.dimsum.com/tags/NET-Core/"/>
    
      <category term="CAP" scheme="http://doc.dimsum.com/tags/CAP/"/>
    
      <category term="MicroServices" scheme="http://doc.dimsum.com/tags/MicroServices/"/>
    
  </entry>
  
  <entry>
    <title>开发常用的docker镜像</title>
    <link href="http://doc.dimsum.com/2020/03/27/chang-yong-docker/"/>
    <id>http://doc.dimsum.com/2020/03/27/chang-yong-docker/</id>
    <published>2020-03-26T16:00:00.000Z</published>
    <updated>2020-03-28T16:58:35.771Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#redis">Redis</a></li><li><a href="#elasticsearch%e9%9b%86%e7%be%a4">Elasticsearch(集群)</a></li><li><a href="#rabbitmq">RabbitMq</a></li><li><a href="#sqlserver-2017">SqlServer 2017</a></li></ul><p>主要用于开发阶段，不涉及生产环境配置，无权限自行添加<code>sudo</code></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ol><li>获取镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure></li><li>运行Redis<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 -d redis:lastes redis-server</span><br></pre></td></tr></table></figure></li></ol><h1 id="Elasticsearch-集群"><a href="#Elasticsearch-集群" class="headerlink" title="Elasticsearch(集群)"></a>Elasticsearch(集群)</h1><ol start="0"><li>说明：<ul><li>这里这里使用的是Elasticsearch 7.3.0版本</li><li>集群一共有3个Container，一个Master，两个Slave</li><li>配置文件中的<code>192.168.2.58</code>为对应节点的IP地址</li><li>具体配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Elasticsearch集群</span><br><span class="line">    |------ Master</span><br><span class="line">        |--- 端口：9500</span><br><span class="line">        |--- TCP端口：9300</span><br><span class="line">        |--- 配置文件目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;master&#x2F;elasticsearch.yml</span><br><span class="line">        |--- 共享卷目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;master&#x2F;data</span><br><span class="line">    |------ Slave1</span><br><span class="line">        |--- 端口：9600</span><br><span class="line">        |--- TCP端口：9301</span><br><span class="line">        |--- 配置文件目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave1&#x2F;elasticsearch.yml</span><br><span class="line">        |--- 共享卷目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave1&#x2F;data</span><br><span class="line">    |------ Slave2</span><br><span class="line">        |--- 端口：9700</span><br><span class="line">        |--- TCP端口：9302</span><br><span class="line">        |--- 配置文件目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave2&#x2F;elasticsearch.yml</span><br><span class="line">        |--- 共享卷目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave2&#x2F;data</span><br></pre></td></tr></table></figure></li></ul></li><li>获取镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li><li>在宿主机创建各个节点的<code>elasticsearch.yml</code>配置文件，具体内容如下:<ul><li>Master节点，配置文件路径：<code>~/var/elasticsearch/config/master/elasticsearch.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置支持Elasticsearch-Head</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># 设置集群Master配置信息</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myEsCluster</span></span><br><span class="line"><span class="comment"># 节点的名字，一般为Master或者Slave</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># 节点是否为Master，设置为true的话，说明此节点为Master节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置网络，如果是本机的话就是127.0.0.1，其他服务器配置对应的IP地址即可(0.0.0.0支持外网访问)</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 设置对外服务的Http端口，默认为 9200，可以修改默认设置</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9500</span></span><br><span class="line"><span class="comment"># 设置节点间交互的TCP端口，默认是9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment"># 手动指定可以成为Master的所有节点的Name或者IP，这些配置将会在第一次选举中进行计算</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["master"]</span></span><br><span class="line"><span class="comment"># 集群发现节点信息，一般为其他节点IP加交互端口，这里一般填主机IP</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["192.168.2.58:9301",</span> <span class="string">"192.168.2.58:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></li><li>Slave1节点，配置文件路径：<code>~/var/elasticsearch/config/slave1/elasticsearch.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群Slave配置信息</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myEsCluster</span></span><br><span class="line"><span class="comment"># 节点的名字，一般为Master或者Slave</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave1</span></span><br><span class="line"><span class="comment"># 节点是否为Master，设置为true的话，说明此节点为master节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置对外服务的Http端口，默认为 9200，可以修改默认设置</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9600</span></span><br><span class="line"><span class="comment"># 设置节点间交互的TCP端口，默认是9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"><span class="comment"># 设置网络，如果是本机的话就是127.0.0.1，其他服务器配置对应的IP地址即可(0.0.0.0支持外网访问)</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 集群发现节点信息，一般为其他节点IP加交互端口，这里一般填主机IP</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["192.168.2.58:9300",</span> <span class="string">"192.168.2.58:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></li><li>Slave2节点，配置文件路径：<code>~/var/elasticsearch/config/slave2/elasticsearch.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群Slave配置信息</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myEsCluster</span></span><br><span class="line"><span class="comment"># 节点的名字，一般为Master或者Slave</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave2</span></span><br><span class="line"><span class="comment"># 节点是否为Master，设置为true的话，说明此节点为master节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置对外服务的Http端口，默认为 9200，可以修改默认设置</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9700</span></span><br><span class="line"><span class="comment"># 设置节点间交互的TCP端口，默认是9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"><span class="comment"># 设置网络，如果是本机的话就是127.0.0.1，其他服务器配置对应的IP地址即可(0.0.0.0支持外网访问)</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 集群发现节点信息，一般为其他节点IP加交互端口，这里一般填主机IP</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["192.168.2.58:9300",</span> <span class="string">"192.168.2.58:9301"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></li></ul></li><li>创建3个节点的<code>data</code>文件夹 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;master&#x2F;data</span><br><span class="line">~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave1&#x2F;data</span><br><span class="line">~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave2&#x2F;data</span><br></pre></td></tr></table></figure></li><li>运行节点<ul><li>运行Master节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -v ~/var/elasticsearch/config/master/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v ~/var/elasticsearch/config/master/data:/usr/share/elasticsearch/data --name esMaster -p 9500:9500 -p 9300:9300 elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li><li>运行Slave1节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -v ~/var/elasticsearch/config/slave1/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v ~/var/elasticsearch/config/slave1/data:/usr/share/elasticsearch/data --name esSlave1 -p 9600:9600 -p 9301:9301 elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li><li>运行Slave2节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -v ~/var/elasticsearch/config/slave2/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v ~/var/elasticsearch/config/slave2/data:/usr/share/elasticsearch/data --name esSlave2 -p 9700:9700 -p 9302:9302 elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li></ul></li><li>检查运行状态<ul><li>运行<code>docker ps</code>查看正在运行的Container，确保以上3个容器正常运行</li><li>访问<code>http://127.0.0.1:9500/_cat/nodes?v</code>查看是否有3个节点信息，如果节点运行正常，应该有如下信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip         heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.17.0.2           32          96  70    3.03    0.82     0.28 di        -      slave1</span><br><span class="line">172.17.0.3           30          96  70    3.03    0.82     0.28 di        -      slave2</span><br><span class="line">172.17.0.4           33          96  70    3.03    0.82     0.28 dim       *      master</span><br></pre></td></tr></table></figure></li></ul></li><li>安装<code>Elasticsearch-Head</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es-head -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>运行成功后浏览器访问链接:<code>http://127.0.0.1:9100</code>，将里面的连接地址修改为:<code>http://localhost:9500</code>，保存即可看到3个节点的集群信息</li><li>安装<code>IK</code>分词软件<ul><li>这部分操作3个节点均需要操作一边</li><li>ElasticSearch版本为7.3.0，对应IK分词版本为7.3,下载链接<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.3.0/elasticsearch-analysis-ik-7.3.0.zip" target="_blank" rel="noopener">IK分词</a></li><li>具体操作就是将下载下来的包放在各个节点的共享卷里，然后进入ES容器内命令行，解压并将文件拷贝到plugins文件夹中，重启容器</li></ul></li></ol><h1 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h1><ol><li>获取镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure></li><li>运行镜像，设置用户名密码(admin/admin)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:managemen</span><br></pre></td></tr></table></figure></li><li>进入管理界面 <code>http://localhost:15672</code></li></ol><h1 id="SqlServer-2017"><a href="#SqlServer-2017" class="headerlink" title="SqlServer 2017"></a>SqlServer 2017</h1><ol><li>获取镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure></li><li>运行镜像，设置<code>SA</code>密码为<code>Today_is_20200328</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">"ACCEPT_EULA=Y"</span> -e <span class="string">"SA_PASSWORD=Today_is_20200328"</span> -p 1433:1433 --name mssql -d mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#redis&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elasticsearch%e9%9b%86%e7%be%a4&quot;&gt;Elasticsearch(集群)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rabbitmq&quot;&gt;R
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://doc.dimsum.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://doc.dimsum.com/tags/docker/"/>
    
      <category term="elasticsearch" scheme="http://doc.dimsum.com/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
