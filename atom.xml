<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dimsum</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dimsum.fun/"/>
  <updated>2020-04-02T17:11:23.324Z</updated>
  <id>http://www.dimsum.fun/</id>
  
  <author>
    <name>Jiamiao.x</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.NET Core开发实战课程备忘(14) -- 异常处理中间件：区分真异常与逻辑一场</title>
    <link href="http://www.dimsum.fun/2020/04/02/14.ExceptionDemo/"/>
    <id>http://www.dimsum.fun/2020/04/02/14.ExceptionDemo/</id>
    <published>2020-04-02T14:17:00.000Z</published>
    <updated>2020-04-02T17:11:23.324Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%a4%84%e7%90%86%e5%bc%82%e5%b8%b8%e7%9a%84%e6%96%b9%e5%bc%8f">处理异常的方式</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e6%b3%a8%e9%87%8a%e6%8e%89%e7%b3%bb%e7%bb%9f%e8%87%aa%e5%b8%a6%e7%9a%84%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e4%b8%ad%e9%97%b4%e4%bb%b6">注释掉系统自带的异常处理中间件</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84%e5%bc%82%e5%b8%b8%e7%b1%bb">创建自定义的异常类</a><ul><li><a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e5%88%9b%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e7%9a%84%e5%bc%82%e5%b8%b8%e7%b1%bb">为什么要创建自定义的异常类</a></li><li><a href="#%e8%87%aa%e5%ae%9a%e4%b9%89%e5%bc%82%e5%b8%b8%e7%b1%bb">自定义异常类</a></li></ul></li><li><a href="#%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e9%a1%b5%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">异常处理页代码实现</a></li><li><a href="#%e5%bc%82%e5%b8%b8%e5%a4%84%e7%90%86%e5%8c%bf%e5%90%8d%e5%a7%94%e6%89%98%e6%96%b9%e6%b3%95%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">异常处理匿名委托方法代码实现</a></li><li><a href="#iexceptionfilter%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0"><code>IExceptionFilter</code>代码实现</a></li><li><a href="#exceptionfilterattribute%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0"><code>ExceptionFilterAttribute</code>代码实现</a></li></ul></li><li><a href="#%e6%80%bb%e7%bb%93">总结</a></li></ul><h1 id="处理异常的方式"><a href="#处理异常的方式" class="headerlink" title="处理异常的方式"></a>处理异常的方式</h1><ul><li>异常处理页</li><li>异常处理匿名委托方法</li><li><code>IExceptionFilter</code></li><li><code>ExceptionFilterAttribute</code></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ExceptionDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="注释掉系统自带的异常处理中间件"><a href="#注释掉系统自带的异常处理中间件" class="headerlink" title="注释掉系统自带的异常处理中间件"></a>注释掉系统自带的异常处理中间件</h2><p>在<code>Startup.Configure</code>中有<code>app.UseDeveloperExceptionPage();</code>这个中间件，这个就是<code>ASP.NET Core</code>自带的一个异常处理页，但是这个页面错误信息太多，只适合开发时对开发人员进行提示，不适合放到生产环境，所以这里注释掉这个中间件</p><h2 id="创建自定义的异常类"><a href="#创建自定义的异常类" class="headerlink" title="创建自定义的异常类"></a>创建自定义的异常类</h2><h3 id="为什么要创建自定义的异常类"><a href="#为什么要创建自定义的异常类" class="headerlink" title="为什么要创建自定义的异常类"></a>为什么要创建自定义的异常类</h3><p>通常情况下我们系统里面的异常与我们业务逻辑里的异常是不同的，业务逻辑上的判断异常，比如输入的参数不合法、订单状态不符合条件，当前账户余额不足这样的错误信息，我们有两种处理方式，一种处理方式是对不同的逻辑输出不同的业务对象，还有一种方式就是对于这种业务逻辑输出一个异常，用异常来承载我们的逻辑的特殊分支，那这个时候<strong>我们就需要识别出哪些是我们的业务异常，哪些是我们不确定的未知异常</strong>，比如网络突发的无法连接、MySql的闪断之类的</p><p>那这里怎么识别出哪些是业务异常，哪些是未知异常？</p><p>首先通过定义一个接口，接口里有错误码和错误信息，当我们有一个业务出现异常，我们可以人为的抛出一个已经实现了这个接口的自定义异常类。然后在异常处理过程中，我们尝试将捕获到的异常转为我们定义的异常接口，如果能转成功，说明这个异常是我们认为抛出的业务异常，否则为系统抛出的未知异常</p><h3 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h3><p>在项目根目录创建文件夹<code>Exceptions</code>，所有异常的自定义类都放在这里</p><p>创建<code>IKnownException</code>接口，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IKnownException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">string</span> Message &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> ErrorCode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">object</span>[] ErrorData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建<code>KnownException</code>类，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">KnownException</span>:<span class="title">IKnownException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">KnownException</span>(<span class="params"><span class="keyword">object</span>[] errorData, <span class="keyword">int</span> errorCode, <span class="keyword">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ErrorData = errorData;</span><br><span class="line">            ErrorCode = errorCode;</span><br><span class="line">            Message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">string</span> Message &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ErrorCode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span>[] ErrorData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> IKnownException UnKnown = <span class="keyword">new</span> KnownException(errorData: <span class="keyword">new</span> <span class="keyword">object</span>[] &#123; &#125;, errorCode: <span class="number">9999</span>, message: <span class="string">"未知错误"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IKnownException <span class="title">FromKnownException</span>(<span class="params">IKnownException exception</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> KnownException(errorData: exception.ErrorData, errorCode: exception.ErrorCode, message: exception.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试用的<code>InvalidParameterException</code>类，用来模拟参数错误的异常，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">InvalidParameterException</span>: <span class="title">Exception</span>,<span class="title">IKnownException</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InvalidParameterException</span>(<span class="params"><span class="keyword">int</span> errorCode, <span class="keyword">string</span> message, <span class="keyword">params</span> <span class="keyword">object</span>[] errorData</span>) : <span class="title">base</span>(<span class="params">message</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            ErrorCode = errorCode;</span><br><span class="line">            ErrorData = errorData;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> ErrorCode &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">object</span>[] ErrorData &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理页代码实现"><a href="#异常处理页代码实现" class="headerlink" title="异常处理页代码实现"></a>异常处理页代码实现</h2><p>创建处理页面控制器<code>ErrorController</code>，在<code>Index</code>方法中获取到当前请求上下文的异常信息，并尝试进行转成<code>IKnownException</code>，如果转成功则表示为业务逻辑异常，如果失败则表示为未知异常，未知异常则通过<code>KnownException</code>的静态方法生成一个特定的未知异常对象，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ExceptionDemo.Exceptions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ErrorController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;ErrorController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ErrorController</span>(<span class="params">ILogger&lt;ErrorController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">Route(<span class="meta-string">"/error"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IActionResult <span class="title">Index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> exceptionHandlerPathFeature = HttpContext.Features.Get&lt;IExceptionHandlerPathFeature&gt;();</span><br><span class="line">            <span class="keyword">var</span> ex = exceptionHandlerPathFeature?.Error;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> knownException = ex <span class="keyword">as</span> IKnownException;</span><br><span class="line">            <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                 _logger.LogError(ex,ex.Message);</span><br><span class="line">                 knownException = KnownException.UnKnown;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> View(knownException);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的试图<code>Index.cshtml</code>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@model ExceptionDemo.Exceptions.IKnownException</span><br><span class="line">@&#123;</span><br><span class="line">    Layout = null;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>错误码：@Model.ErrorCode<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>错误信息：@Model.Message<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>回到<code>Startup</code>，对<code>ConfigureServices</code>和<code>Configure</code>两个方法做出调整，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseExceptionHandler(<span class="string">"/error"</span>);</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换到<code>WeatherForecastController</code>，在这里来主动抛出异常，将<code>Get</code>方法修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="number">65</span>, <span class="string">"参数有误"</span>, <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;() &#123;<span class="string">"exception info 1"</span>,<span class="string">"exception info 2"</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/weatherforecast</code>，可以看到返回了以下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">错误码：65</span><br><span class="line"></span><br><span class="line">错误信息：参数有误</span><br></pre></td></tr></table></figure><p>将<code>WeatherForecastController.Get</code>里的异常换成一个普通的异常，在重新运行代码，可以看到页面会变成<code>未知错误</code>的提示，同时控制台打印出来的日志是完全的异常日志</p><h2 id="异常处理匿名委托方法代码实现"><a href="#异常处理匿名委托方法代码实现" class="headerlink" title="异常处理匿名委托方法代码实现"></a>异常处理匿名委托方法代码实现</h2><p>将<code>Startup.Configure</code>方法中的<code>app.UseExceptionHandler(&quot;/error&quot;);</code>注释掉，原位置新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">app.UseExceptionHandler(errApp =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    errApp.Run(<span class="keyword">async</span> context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> exceptionHandlerPathFeature = context.Features.Get&lt;IExceptionHandlerPathFeature&gt;();</span><br><span class="line">        <span class="keyword">var</span> knownException = exceptionHandlerPathFeature.Error <span class="keyword">as</span> IKnownException;</span><br><span class="line">        <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> logger = context.RequestServices.GetService&lt;ILogger&lt;Startup&gt;&gt;();</span><br><span class="line">            logger.LogError(exceptionHandlerPathFeature.Error, exceptionHandlerPathFeature.Error.Message);</span><br><span class="line">            knownException = KnownException.UnKnown;</span><br><span class="line">            context.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">            context.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> jsonOptions = context.RequestServices.GetService&lt;IOptions&lt;JsonOptions&gt;&gt;();</span><br><span class="line">        context.Response.ContentType = <span class="string">"application/json; charset=utf-8"</span>;</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(JsonSerializer.Serialize(knownException, jsonOptions.Value.JsonSerializerOptions));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里的操作与异常处理页逻辑差不多，只是不再返回视图，而是返回<code>json</code>，同时设定好业务逻辑异常返回200状态码，未知异常返回500状态码(这样做的好处后面说明)，运行代码，访问<code>/weatherforecast</code>，通过修改抛出异常，可看到对应的返回结果</p><h2 id="IExceptionFilter代码实现"><a href="#IExceptionFilter代码实现" class="headerlink" title="IExceptionFilter代码实现"></a><code>IExceptionFilter</code>代码实现</h2><p>在<code>Exceptions</code>文件夹新建<code>MyExceptionFilter.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyExceptionFilter</span>:<span class="title">IExceptionFilter</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> knownException = context.Exception <span class="keyword">as</span> IKnownException;</span><br><span class="line">            <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> logger = context.HttpContext.RequestServices.GetService&lt;ILogger&lt;MyExceptionFilter&gt;&gt;();</span><br><span class="line">                logger.LogError(context.Exception,context.Exception.Message);</span><br><span class="line">                knownException = KnownException.UnKnown;</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Result = <span class="keyword">new</span> JsonResult(knownException)</span><br><span class="line">            &#123;</span><br><span class="line">                ContentType = <span class="string">"application/json; charset=utf-8"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对异常的处理逻辑与异常处理匿名委托方法一样</p><p>修改<code>Startup</code>的<code>ConfigureServices</code>、<code>Configure</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews(options =&gt; &#123; options.Filters.Add&lt;MyExceptionFilter&gt;(); &#125;).AddJsonOptions(</span><br><span class="line">        options =&gt; &#123; options.JsonSerializerOptions.Encoder = JavaScriptEncoder.UnsafeRelaxedJsonEscaping; &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line"></span><br><span class="line">    app.UseRouting();</span><br><span class="line"></span><br><span class="line">    app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/weatherforecast</code>，通过修改抛出异常，可看到对应的返回结果</p><h2 id="ExceptionFilterAttribute代码实现"><a href="#ExceptionFilterAttribute代码实现" class="headerlink" title="ExceptionFilterAttribute代码实现"></a><code>ExceptionFilterAttribute</code>代码实现</h2><p>在<code>Exceptions</code>中新建<code>MyExceptionFilterAttribute.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc.Filters;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Exceptions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyExceptionFilterAttribute</span> : <span class="title">ExceptionFilterAttribute</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnException</span>(<span class="params">ExceptionContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> knownException = context.Exception <span class="keyword">as</span> IKnownException;</span><br><span class="line">            <span class="keyword">if</span> (knownException == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> logger = context.HttpContext.RequestServices.GetService&lt;ILogger&lt;MyExceptionFilterAttribute&gt;&gt;();</span><br><span class="line">                logger.LogError(context.Exception, context.Exception.Message);</span><br><span class="line">                knownException = KnownException.UnKnown;</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status500InternalServerError;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                knownException = KnownException.FromKnownException(knownException);</span><br><span class="line">                context.HttpContext.Response.StatusCode = StatusCodes.Status200OK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            context.Result = <span class="keyword">new</span> JsonResult(knownException)</span><br><span class="line">            &#123;</span><br><span class="line">                ContentType = <span class="string">"application/json; charset=utf-8"</span></span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>Startup</code>的<code>ConfigureServices</code>、<code>Configure</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>WeatherForecastController</code>中添加类特性，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> ExceptionDemo.Exceptions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ExceptionDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line">    [<span class="meta">MyExceptionFilter</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"Freezing"</span>, <span class="string">"Bracing"</span>, <span class="string">"Chilly"</span>, <span class="string">"Cool"</span>, <span class="string">"Mild"</span>, <span class="string">"Warm"</span>, <span class="string">"Balmy"</span>, <span class="string">"Hot"</span>, <span class="string">"Sweltering"</span>, <span class="string">"Scorching"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IEnumerable&lt;WeatherForecast&gt; <span class="title">Get</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidParameterException(<span class="number">65</span>, <span class="string">"参数有误！！！"</span>, <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;() &#123;<span class="string">"exception info 1"</span>,<span class="string">"exception info 2"</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/weatherforecast</code>，通过修改抛出异常，可看到对应的返回结果</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>用特定的异常类或接口表示业务逻辑异常</li><li>为业务逻辑异常定义全局错误码</li><li>为未知异常定义特定的输出信息和错误码，不应该输出系统内部的异常堆栈</li><li>对已知的业务逻辑异常相应<code>HTTP 200</code>，这样对监控系统友好，不会区分不开真异常和逻辑异常</li><li>对于未预见的异常相应<code>HTTP 500</code></li><li>为所有异常记录详细的日志</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%a4%84%e7%90%86%e5%bc%82%e5%b8%b8%e7%9a%84%e6%96%b9%e5%bc%8f&quot;&gt;处理异常的方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%a3%e7%a0%81%e5%ae%
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(13) -- 中间件：掌握请求处理过程的关键</title>
    <link href="http://www.dimsum.fun/2020/04/02/13.Middleware_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/13.Middleware_document/</id>
    <published>2020-04-02T10:12:00.000Z</published>
    <updated>2020-04-02T17:11:23.323Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1">核心对象</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e7%9b%b4%e6%8e%a5%e6%b3%a8%e5%85%a5%e5%a7%94%e6%89%98">直接注入委托</a></li><li><a href="#%e5%af%b9%e7%89%b9%e5%ae%9a%e8%b7%af%e5%be%84%e6%b3%a8%e5%86%8c%e7%89%b9%e5%ae%9a%e4%b8%ad%e9%97%b4%e4%bb%b6">对特定路径注册特定中间件</a></li><li><a href="#%e5%af%b9%e7%89%b9%e5%ae%9a%e8%b7%af%e5%be%84%e6%b3%a8%e5%86%8c%e4%b8%ad%e9%97%b4%e4%bb%b6%e5%8d%87%e7%ba%a7%e7%89%88">对特定路径注册中间件升级版</a></li><li><a href="#%e4%bd%bf%e7%94%a8%e6%89%a9%e5%b1%95%e6%96%b9%e6%b3%95%e6%9d%a5%e6%b3%a8%e5%86%8c%e4%b8%ad%e9%97%b4%e4%bb%b6%e6%9c%80%e4%bd%b3%e5%a7%bf%e5%8a%bf">使用扩展方法来注册中间件(最佳姿势)</a></li></ul></li></ul><h1 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h1><ul><li><code>IApplicationBuilder</code>：让我们注册我们自己的中间件</li><li><code>RequestDelegate</code>：我们处理整个请求的委托</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>MiddlewareDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="直接注入委托"><a href="#直接注入委托" class="headerlink" title="直接注入委托"></a>直接注入委托</h2><p><code>Startup.Configure</code>方法里，在<code>app.UseHttpsRedirection()</code>中间件之前添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Hello world -- my middleware in delegate"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行代码访问<code>/WeatherForecast</code>，可以看到原本的json后面会添加<code>Hello world -- my middleware in delegate</code>这句话</p><h2 id="对特定路径注册特定中间件"><a href="#对特定路径注册特定中间件" class="headerlink" title="对特定路径注册特定中间件"></a>对特定路径注册特定中间件</h2><p>注释掉上面的代码，在原处新增以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.Map(<span class="string">"/abc"</span>, builder =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    builder.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Hello world abc -- from map middleware"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行代码访问<code>/WeatherForecast</code>，结果与初始项目运行一致，访问<code>/abc</code>，页面会返回<code>Hello world abc -- from map middleware</code></p><h2 id="对特定路径注册中间件升级版"><a href="#对特定路径注册中间件升级版" class="headerlink" title="对特定路径注册中间件升级版"></a>对特定路径注册中间件升级版</h2><p>当这个特定路径的判断比较复杂，可以使用<code>MapWhen</code>来注册，注释掉上一步代码，在原处新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.MapWhen(context =&gt; &#123; <span class="keyword">return</span> context.Request.Query.Keys.Contains(<span class="string">"abc"</span>); &#125;, builder =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    builder.Use(<span class="keyword">async</span> (context, next) =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> next();</span><br><span class="line">        <span class="keyword">await</span> context.Response.WriteAsync(<span class="string">"Hello world query abc -- from mapWhen middleware"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这里表示当url参数里包含<code>abc</code>这个函数，则触发指定的中间件，运行代码，运行代码访问<code>/WeatherForecast</code>，结果与初始项目运行一致，访问<code>/WeatherForecast?abc=aaa</code>，会在原有的返回结果后面添加<code>Hello world query abc -- from mapWhen middleware</code></p><h2 id="使用扩展方法来注册中间件-最佳姿势"><a href="#使用扩展方法来注册中间件-最佳姿势" class="headerlink" title="使用扩展方法来注册中间件(最佳姿势)"></a>使用扩展方法来注册中间件(最佳姿势)</h2><p>自定义中间件是按约定来调用的，即中间件里需要包含一个<code>InvokeAsync</code>方法，方法参数为<code>HttpContext</code>，通常中间件不直接对外暴露，所以类的访问修饰符通常是默认的<code>internal</code>，然后通过<code>IApplicationBuilder</code>的扩展方法向外暴露</p><p>在根目录创建文件夹<code>Middlewares/MyMiddleware</code>，在目录下创建两个文件<code>MyMiddleware.cs</code>和<code>MyMiddlewareExtension.cs</code>，具体代码如下：</p><p><code>MyMiddleware.cs</code>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MiddlewareDemo.Middlewares.MyMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyMiddleware</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> RequestDelegate _next;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;MyMiddleware&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyMiddleware</span>(<span class="params">RequestDelegate next,ILogger&lt;MyMiddleware&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _next = next;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task <span class="title">InvokeAsync</span>(<span class="params">HttpContext context</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">using</span> (_logger.BeginScope(<span class="string">"TraceIdentifier:&#123;TraceIdentifier&#125;"</span>,context.TraceIdentifier))</span><br><span class="line">            &#123;</span><br><span class="line">                _logger.LogDebug(<span class="string">"开始执行MyMiddleware中间件"</span>);</span><br><span class="line">                <span class="keyword">await</span> _next(context);</span><br><span class="line">                _logger.LogDebug(<span class="string">"执行MyMiddleware中间件结束"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MyMiddlewareExtension.cs</code>代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MiddlewareDemo.Middlewares.MyMiddleware</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyMiddlewareExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IApplicationBuilder <span class="title">UseMyMiddleware</span>(<span class="params"><span class="keyword">this</span> IApplicationBuilder app</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> app.UseMiddleware&lt;MyMiddleware&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为这里使用了日志作用域，所以还需要到<code>appsettings.json</code>里修改以下日志配置，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Trace"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"IncludeScopes"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"MiddlewareDemo.Middlewares.MyMiddleware.MyMiddleware"</span>: <span class="string">"Trace"</span></span><br><span class="line">      &#125; </span><br><span class="line">    &#125; </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回到<code>Startup.Configure</code>，注释掉前面的测试代码，在原处新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseMyMiddleware();</span><br></pre></td></tr></table></figure><p>运行项目，访问<code>/WeatherForecast</code>，可以看到控制台打印出了对应的日志</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a0%b8%e5%bf%83%e5%af%b9%e8%b1%a1&quot;&gt;核心对象&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&quot;&gt;代码实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(12) -- 结构化日志组件Serilog：记录对查询分析友好的日志</title>
    <link href="http://www.dimsum.fun/2020/04/02/12.LoggingSerilog_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/12.LoggingSerilog_document/</id>
    <published>2020-04-02T06:12:00.000Z</published>
    <updated>2020-04-02T17:12:26.749Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e7%bb%93%e6%9e%84%e5%8c%96%e6%97%a5%e5%bf%97%e7%9a%84%e5%a5%bd%e5%a4%84">结构化日志的好处</a></li><li><a href="#%e4%b8%bb%e8%a6%81%e5%9c%ba%e6%99%af">主要场景</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e7%94%a8serilog%e6%9b%bf%e6%8d%a2%e8%87%aa%e5%b8%a6%e7%9a%84%e6%97%a5%e5%bf%97%e6%a1%86%e6%9e%b6">用Serilog替换自带的日志框架</a></li><li><a href="#%e4%bf%ae%e6%94%b9appsettingsjson%e6%96%87%e4%bb%b6">修改<code>appsettings.json</code>文件</a></li><li><a href="#%e8%be%93%e5%87%ba%e6%97%a5%e5%bf%97">输出日志</a></li></ul></li></ul><h1 id="结构化日志的好处"><a href="#结构化日志的好处" class="headerlink" title="结构化日志的好处"></a>结构化日志的好处</h1><ul><li>易于检索</li><li>易于分析统计</li></ul><h1 id="主要场景"><a href="#主要场景" class="headerlink" title="主要场景"></a>主要场景</h1><ul><li>实现日志告警</li><li>实现上下文的关联</li><li>实现与追踪系统集成</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>LoggingSerilogDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，因为使用的日志结构化组件为<code>Serilog</code>，所以需要引入以下的包:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serilog.AspNetCore</span><br></pre></td></tr></table></figure><h2 id="用Serilog替换自带的日志框架"><a href="#用Serilog替换自带的日志框架" class="headerlink" title="用Serilog替换自带的日志框架"></a>用Serilog替换自带的日志框架</h2><p>修改<code>Program</code>类，让Serilog替换掉<code>ASP.NET Core</code>自带的日志框架，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"><span class="keyword">using</span> Serilog;</span><br><span class="line"><span class="keyword">using</span> Serilog.Formatting.Compact;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSerilogDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125; = <span class="keyword">new</span> ConfigurationBuilder()</span><br><span class="line">            .SetBasePath(Directory.GetCurrentDirectory())</span><br><span class="line">            .AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .AddJsonFile(<span class="string">$"appsettings<span class="subst">&#123;Environment.GetEnvironmentVariable(<span class="string">"ASPNETCORE_ENVIRONMENT"</span>) ?? <span class="string">"Production"</span>&#125;</span>.json"</span>, optional: <span class="literal">true</span>, reloadOnChange: <span class="literal">true</span>)</span><br><span class="line">            .AddEnvironmentVariables()</span><br><span class="line">            .Build();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Log.Logger = <span class="keyword">new</span> LoggerConfiguration()</span><br><span class="line">                .ReadFrom.Configuration(Configuration)</span><br><span class="line">                .MinimumLevel.Debug()</span><br><span class="line">                .Enrich.FromLogContext()</span><br><span class="line">                .WriteTo.Console(<span class="keyword">new</span> RenderedCompactJsonFormatter())</span><br><span class="line">                .WriteTo.File(formatter: <span class="keyword">new</span> CompactJsonFormatter(), <span class="string">"logs\\log.txt"</span>, rollingInterval: RollingInterval.Day)</span><br><span class="line">                .CreateLogger();</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                Log.Information(<span class="string">"Starting web host"</span>);</span><br><span class="line">                CreateHostBuilder(args).Build().Run();</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Log.Fatal(ex,<span class="string">"Host terminated unexpectedly"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Log.CloseAndFlush();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt; &#123; webBuilder.UseStartup&lt;Startup&gt;(); &#125;)</span><br><span class="line">                .UseSerilog(dispose: <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解析：</p><ol><li>新建<code>Configuration</code>静态属性，直接读取<code>appsettings.json</code>的配置</li><li><code>new LoggerConfiguration</code>是创建一个<code>Serilog</code>的<code>logger</code>对象，调的各种方法是进行日志配置</li><li><code>CreateHostBuilder</code>的时候用<code>try...catch</code>包住是确保应用程序从开启到结束都有日志输出，包括启动失败，最后<code>Log.CloseAndFlush()</code>表示应用程序结束时会释放日志资源</li><li><code>UseSerilog</code>表示正式引入<code>Serilog</code>组件，<code>dispose:true</code>表示应用程序关闭之后会自动释放日志资源</li></ol><h2 id="修改appsettings-json文件"><a href="#修改appsettings-json文件" class="headerlink" title="修改appsettings.json文件"></a>修改<code>appsettings.json</code>文件</h2><p>在<code>appsettings.json</code>文件中新增<code>Serilog</code>节点，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"Serilog"</span>: &#123;</span><br><span class="line">    <span class="attr">"MinimumLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Override"</span>: &#123;</span><br><span class="line">        <span class="attr">"Microsoft"</span>: <span class="string">"Information"</span>,</span><br><span class="line">        <span class="attr">"System"</span>: <span class="string">"Information"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输出日志"><a href="#输出日志" class="headerlink" title="输出日志"></a>输出日志</h2><p>在<code>WeatherForecastController.Get</code>方法中新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_logger.LogInformation(<span class="string">"This is information log"</span>);</span><br></pre></td></tr></table></figure><p>运行项目，可以看到控制台打印出了结构化的日志，同时在项目根目录也有一个<code>logs</code>文件夹，进入文件夹可以看到日志文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%bb%93%e6%9e%84%e5%8c%96%e6%97%a5%e5%bf%97%e7%9a%84%e5%a5%bd%e5%a4%84&quot;&gt;结构化日志的好处&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%bb%e8%a6
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(11) -- 日志框架：聊聊记日志的最佳姿势</title>
    <link href="http://www.dimsum.fun/2020/04/02/11.LoggingSimple_document/"/>
    <id>http://www.dimsum.fun/2020/04/02/11.LoggingSimple_document/</id>
    <published>2020-04-02T03:12:00.000Z</published>
    <updated>2020-04-02T08:49:15.050Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a><ul><li><a href="#%e4%be%9d%e8%b5%96%e5%8c%85">依赖包</a></li><li><a href="#%e6%97%a5%e5%bf%97%e7%ba%a7%e5%88%ab">日志级别</a></li><li><a href="#%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95%e5%99%a8">日志记录器</a></li></ul></li><li><a href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b">代码示例</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e6%89%8b%e5%8a%a8%e5%88%9b%e5%bb%ba%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95%e5%99%a8">手动创建日志记录器</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6appsettingsjson">创建配置文件<code>appsettings.json</code></a></li><li><a href="#%e4%be%9d%e8%b5%96%e6%b3%a8%e5%85%a5%e5%88%9b%e5%bb%ba%e6%97%a5%e5%bf%97%e8%ae%b0%e5%bd%95%e5%99%a8">依赖注入创建日志记录器</a></li></ul></li><li><a href="#%e5%85%b3%e4%ba%8e%e6%97%a5%e5%bf%97%e4%bd%9c%e7%94%a8%e5%9f%9f">关于日志作用域</a><ul><li><a href="#%e6%97%a5%e5%bf%97%e4%bd%9c%e7%94%a8%e5%9f%9f%e7%9a%84%e4%bd%bf%e7%94%a8%e5%9c%ba%e6%99%af">日志作用域的使用场景</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e6%bc%94%e7%a4%ba">代码演示</a></li></ul></li><li><a href="#%e6%b3%a8%e6%84%8f">注意</a></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="依赖包"><a href="#依赖包" class="headerlink" title="依赖包"></a>依赖包</h2><p>对于输出到控制台的日志框架，主要依赖包有以下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Logging</span><br><span class="line">Microsoft.Extensions.Logging.Console</span><br><span class="line">Microsoft.Extensions.Logging.Debug</span><br><span class="line">Microsoft.Extensions.Logging.TraceSource</span><br></pre></td></tr></table></figure><h2 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h2><p><code>.NET Core</code>中日志级别分<code>7</code>个级别，从低到高具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Trace -&gt; Debug -&gt; Information -&gt; Warning -&gt; Error -&gt; Critical -&gt; None</span><br></pre></td></tr></table></figure><p>在配置中如果配置指定级别，则指定级别及以上的日志会被记录，低于指定级别的日志不会被记录，举例：配置项中指定级别为<code>Warning</code>，则只会记录<code>Warning</code>、<code>Error</code>、<code>Critical</code>这些日志，<code>Trace</code>、<code>Debug</code>、<code>Information</code>是不会记录下来，缺省默认配置为<code>Information</code>，如果指定为<code>None</code>级别则以为着不会有日志记录</p><h2 id="日志记录器"><a href="#日志记录器" class="headerlink" title="日志记录器"></a>日志记录器</h2><p>记录日志的级别是属于某个日志记录器的，通过<code>ILoggerFactory</code>的对象方法<code>CreateLogger</code>创建一个日志记录器，传入参数就是这个日志记录去的名字，在配置相中对应配置该日志记录器的日志级别，即可指定要哪个日志记录器需要记录到哪些级别的日志</p><p>通常正常开发比较少去自己创建日志记录器，都是通过构造函数获取依赖注入的对象<code>ILogger&lt;T&gt;</code>，这样获取到的日志记录器的名字为<code>项目名.类型名称</code>，按照这个规律就可以自行配置各个日志记录器的日志记录级别，下面会有代码示例</p><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>LoggingSimpleDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下五个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration.Json</span><br><span class="line">Microsoft.Extensions.Logging</span><br><span class="line">Microsoft.Extensions.Logging.Console</span><br><span class="line">Microsoft.Extensions.Logging.Debug</span><br><span class="line">Microsoft.Extensions.Logging.TraceSource</span><br></pre></td></tr></table></figure><p>这里引用<code>Microsoft.Extensions.Configuration.Json</code>这个包是因为记录日志的记录要从配置项中读取</p><h2 id="手动创建日志记录器"><a href="#手动创建日志记录器" class="headerlink" title="手动创建日志记录器"></a>手动创建日志记录器</h2><p>修改<code>Program.Main</code>，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = configurationBuilder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            serviceCollection.AddSingleton&lt;IConfigurationRoot&gt;(p =&gt; configurationRoot);</span><br><span class="line">            serviceCollection.AddLogging(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConfiguration(configurationRoot.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> loggerFactory = serviceProvider.GetService&lt;ILoggerFactory&gt;();</span><br><span class="line">            <span class="keyword">var</span> loggerA = loggerFactory.CreateLogger(<span class="string">"LoggerA"</span>);         </span><br><span class="line">            loggerA.LogDebug(<span class="number">2001</span>,<span class="string">"This is LoggerA -- logDebug"</span>);</span><br><span class="line">            loggerA.LogInformation(<span class="string">"This is LoggerA -- logInformation"</span>);</span><br><span class="line">            loggerA.LogError(<span class="keyword">new</span> Exception(<span class="string">"LoggerA Error"</span>),<span class="string">"This is LoggerA -- LogError"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>Main</code>方法中前三行代码是读取<code>appsettings.json</code>的配置项</li><li><code>new ServiceCollection()</code>是创建一个服务容器，然后将上面读到的服务注册到服务容器中去，有服务容器来管理配置项服务生命周期</li><li><code>serviceCollection.AddLogging()</code>是添加日志服务到服务容器中，<code>builder.AddConfiguration()</code>指的是日志使用的是配置框架里<code>Logging</code>的配置项，<code>builder.AddConsole()</code>是添加一个名字为<code>Console</code>的控制台日志到日志工厂中去</li><li><code>serviceCollection.BuildServiceProvider()</code>是生成一个服务容器实例</li><li><code>serviceProvider.GetService&lt;ILoggerFactory&gt;()</code>是从服务容器中获取一个<code>ILoggerFactory</code>的日志工厂对象</li><li><code>loggerFactory.CreateLogger(&quot;LoggerA&quot;)</code>是创建一个名字为<code>LoggerA</code>的日志记录器</li><li><code>LogDebug</code>、<code>LogInformation</code>、<code>LogError</code>则是记录对应级别的日志</li></ol><h2 id="创建配置文件appsettings-json"><a href="#创建配置文件appsettings-json" class="headerlink" title="创建配置文件appsettings.json"></a>创建配置文件<code>appsettings.json</code></h2><p>创建文件<code>appsettings.json</code>，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"LoggerA"</span>: <span class="string">"Trace"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>appsettings.json</code>拷贝到输出目录(可参照<code>文件配置提供程序</code>里的操作)，运行项目，可以看到控制台打出以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dbug: LoggerA[2001]</span><br><span class="line">      This is LoggerA -- logDebug</span><br><span class="line">info: LoggerA[0]</span><br><span class="line">      This is LoggerA -- logInformation</span><br><span class="line">fail: LoggerA[0]</span><br><span class="line">      This is LoggerA -- LogError</span><br><span class="line">System.Exception: LoggerA Error</span><br></pre></td></tr></table></figure><p>可以自行调整<code>appsettings.json</code>里的<code>LoggerA</code>配置来尝试不同级别的日志记录</p><h2 id="依赖注入创建日志记录器"><a href="#依赖注入创建日志记录器" class="headerlink" title="依赖注入创建日志记录器"></a>依赖注入创建日志记录器</h2><p>创建测试服务类<code>OrderService</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;OrderService&gt; _logger;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>(<span class="params">ILogger&lt;OrderService&gt; logger</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger.LogInformation(<span class="string">"Show Time &#123;time&#125;"</span>,DateTime.Now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Program.Main</code>方法中将<code>OrderService</code>注册进服务容器中，并获取出服务实例，调用<code>Show</code>方法，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = configurationBuilder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            serviceCollection.AddSingleton&lt;IConfigurationRoot&gt;(p =&gt; configurationRoot);</span><br><span class="line">            serviceCollection.AddTransient&lt;OrderService&gt;();</span><br><span class="line">            serviceCollection.AddLogging(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConfiguration(configurationRoot.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> loggerFactory = serviceProvider.GetService&lt;ILoggerFactory&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> loggerA = loggerFactory.CreateLogger(<span class="string">"LoggerA"</span>);</span><br><span class="line">            </span><br><span class="line">            loggerA.LogDebug(<span class="number">2001</span>,<span class="string">"This is LoggerA -- logDebug"</span>);</span><br><span class="line">            loggerA.LogInformation(<span class="string">"This is LoggerA -- logInformation"</span>);</span><br><span class="line">            loggerA.LogError(<span class="keyword">new</span> Exception(<span class="string">"LoggerA Error"</span>),<span class="string">"This is LoggerA -- LogError"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> orderService = serviceProvider.GetService&lt;OrderService&gt;();</span><br><span class="line">            orderService.Show();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>appsettings.json</code>，具体内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"LoggerA"</span>: <span class="string">"Trace"</span>,</span><br><span class="line">        <span class="attr">"LoggingSimpleDemo.OrderService"</span>: <span class="string">"Trace"</span> </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，可以看到控制台输出日志信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dbug: LoggerA[2001]</span><br><span class="line">      This is LoggerA -- logDebug</span><br><span class="line">info: LoggerA[0]</span><br><span class="line">      This is LoggerA -- logInformation</span><br><span class="line">fail: LoggerA[0]</span><br><span class="line">      This is LoggerA -- LogError</span><br><span class="line">System.Exception: LoggerA Error</span><br><span class="line">info: LoggingSimpleDemo.OrderService[0]</span><br><span class="line">      Show Time 04&#x2F;02&#x2F;2020 12:06:46</span><br></pre></td></tr></table></figure><p>也可以自行调整<code>appsettings.json</code>里的配置来尝试不同级别的日志记录</p><h1 id="关于日志作用域"><a href="#关于日志作用域" class="headerlink" title="关于日志作用域"></a>关于日志作用域</h1><h2 id="日志作用域的使用场景"><a href="#日志作用域的使用场景" class="headerlink" title="日志作用域的使用场景"></a>日志作用域的使用场景</h2><ul><li>一个事务包含多条操作时</li><li>复杂流程的日志关联时</li><li>调用链追踪与请求处理过程对应时</li></ul><h2 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h2><p>将上面获取日志记录器的代码注释掉，手动获取一个<code>Program</code>的日志记录器，然后创建日志作用域，具体代码如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">LoggingSimpleDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> configurationBuilder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            configurationBuilder.AddJsonFile(<span class="string">"appsettings.json"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = configurationBuilder.Build();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceCollection = <span class="keyword">new</span> ServiceCollection();</span><br><span class="line">            serviceCollection.AddSingleton&lt;IConfigurationRoot&gt;(p =&gt; configurationRoot);</span><br><span class="line">            serviceCollection.AddTransient&lt;OrderService&gt;();</span><br><span class="line">            serviceCollection.AddLogging(builder =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                builder.AddConfiguration(configurationRoot.GetSection(<span class="string">"Logging"</span>));</span><br><span class="line">                builder.AddConsole();</span><br><span class="line">                builder.AddDebug();</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> serviceProvider = serviceCollection.BuildServiceProvider();</span><br><span class="line">            <span class="keyword">var</span> loggerFactory = serviceProvider.GetService&lt;ILoggerFactory&gt;();</span><br><span class="line">            <span class="keyword">var</span> logger = loggerFactory.CreateLogger&lt;Program&gt;();</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> scope = logger.BeginScope(<span class="string">"scopeId=&#123;scopeId&#125;"</span>,Guid.NewGuid()))</span><br><span class="line">            &#123;</span><br><span class="line">                logger.LogTrace(<span class="string">"This is Trace in scope"</span>);</span><br><span class="line">                logger.LogInformation(<span class="string">"This is Information in scope"</span>);</span><br><span class="line">                logger.LogWarning(<span class="string">"This is Warning in scope"</span>);</span><br><span class="line">                logger.LogError(<span class="string">"This is Error in scope"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>appsettings.json</code>中添加<code>IncludeScopes</code>属性，具体代码如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"Console"</span>: &#123;</span><br><span class="line">      <span class="attr">"IncludeScopes"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">        <span class="attr">"LoggerA"</span>: <span class="string">"Trace"</span>,</span><br><span class="line">        <span class="attr">"LoggingSimpleDemo.OrderService"</span>: <span class="string">"Trace"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，可以看到控制台打印出类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">info: LoggingSimpleDemo.Program[0]</span><br><span class="line">      &#x3D;&gt; scopeId&#x3D;40c5bb84-584d-4a4c-a56b-f3b66214e1ac</span><br><span class="line">      This is Information in scope</span><br><span class="line">warn: LoggingSimpleDemo.Program[0]</span><br><span class="line">      &#x3D;&gt; scopeId&#x3D;40c5bb84-584d-4a4c-a56b-f3b66214e1ac</span><br><span class="line">      This is Warning in scope</span><br><span class="line">fail: LoggingSimpleDemo.Program[0]</span><br><span class="line">      &#x3D;&gt; scopeId&#x3D;40c5bb84-584d-4a4c-a56b-f3b66214e1ac</span><br><span class="line">      This is Error in scope</span><br></pre></td></tr></table></figure><p><strong>在<code>ASP.NET Core</code></strong>项目中，要启用日志作用域，一样只需要在配置文件中新增<code>IncludeScopes</code>属性即可</p><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>日志记录要避免敏感信息，如密码、密钥等</li><li>日志记录的时候最好用占位符的方式传参数，可以节省不必要的字符串拼接</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a6%82%e5%bf%b5&quot;&gt;概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%be%9d%e8%b5%96%e5%8c%85&quot;&gt;依赖包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%97%a5%e5%bf%97%e
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>特基础教程系列</title>
    <link href="http://www.dimsum.fun/2020/04/01/StepByStep/"/>
    <id>http://www.dimsum.fun/2020/04/01/StepByStep/</id>
    <published>2020-04-01T14:18:00.000Z</published>
    <updated>2020-04-01T16:49:32.267Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#visual-studio-code">Visual Studio Code</a><ul><li><a href="#%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85">下载安装</a></li><li><a href="#%e5%85%b3%e4%ba%8e%e5%ae%89%e8%a3%85%e6%89%a9%e5%b1%95%e6%8f%92%e4%bb%b6">关于安装扩展插件</a></li><li><a href="#%e5%85%b3%e4%ba%8e%e6%b1%89%e5%8c%96">关于汉化</a></li></ul></li><li><a href="#%e5%b9%b3%e6%97%b6%e5%86%99%e9%9d%99%e6%80%81%e9%a1%b5%e6%b5%81%e7%a8%8b">平时写静态页流程</a></li><li><a href="#todo%e5%b8%b8%e7%94%a8%e7%9a%84vscode%e6%8f%92%e4%bb%b6">todo:常用的<code>vscode</code>插件</a></li><li><a href="#todo%e5%b8%b8%e7%94%a8%e7%9a%84vscode%e4%bb%a3%e7%a0%81%e6%ae%b5">todo:常用的<code>vscode</code>代码段</a></li></ul><h1 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>下载地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">https://code.visualstudio.com/</a>，下载之后双击安装即可</p><h2 id="关于安装扩展插件"><a href="#关于安装扩展插件" class="headerlink" title="关于安装扩展插件"></a>关于安装扩展插件</h2><p>如下图，点击左边的插件tab，输入插件名称进行搜索，然后点击<code>install</code>即可进行安装<br><img src="https://i.loli.net/2020/04/01/ONqmZth8iAbfECX.png" alt="微信截图_20200401235919.png"></p><h2 id="关于汉化"><a href="#关于汉化" class="headerlink" title="关于汉化"></a>关于汉化</h2><p><code>vscode</code>的汉化包使用的也是通过插件的形式来安装，搜索<code>chinese</code>，找到<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>这个插件进行安装，安装完重启即可</p><h1 id="平时写静态页流程"><a href="#平时写静态页流程" class="headerlink" title="平时写静态页流程"></a>平时写静态页流程</h1><ol><li><p>一般我会在电脑指定一个盘创建一个文件夹，指定这个文件夹存放自己的源码，无论个人电脑还是公司电脑，比如<code>G</code>盘里创建了<code>repo</code>的文件夹作为我统一管理源码的文件夹</p></li><li><p>通常自己写代码会分两种级别，一种是为了学习测试而写的demo，一种是比较有一定业务逻辑需求的小项目，所以一般会在<code>repo</code>文件夹下再创建两个文件夹，分别为<code>jiamiao.x.demo</code>和<code>jiamiao.x.project</code></p></li><li><p>注意一点，<strong>无论是在写<code>demo</code>还是写<code>project</code>，都不要出现类似<code>demo1</code>、<code>demo2</code>、<code>project1</code>、<code>project2</code>这种没意义的名字</strong>，以下以我写一段表单<code>demo</code>为例子：</p></li><li><p>在<code>G:/repo/jiamiao.x.demo</code>的文件夹中创建文件夹<code>form_demo</code>，然后再<code>form_demo</code>文件夹上右键，点击<code>通过Code打开</code></p></li><li><p>打开之后可以看到左边有文件夹的目录，当前现在是一片空白，如下图：</p><p><img src="https://i.loli.net/2020/04/02/TjLXCdGEiIoOxSR.png" alt="微信截图_20200402002810.png"></p></li><li><p>接下来在<code>vscode</code>中操作，在<code>FORM_DEMO</code>下方空白处右键，点击<code>新建文件</code>，输入<code>index.html</code>回车，可以看到创建了<code>index.html</code>文件，在右边的编辑区则可以进行编码，只要文件扩展名<code>.html</code>正确，则可以代码高亮和智能提示</p></li><li><p>当静态页需要引用图片、样式、脚本等，可以在<code>FORM_DEMO</code>下方空白处右键，点击<code>新建文件夹</code>，对应输入<code>image/style/script</code>等名字之后回车即可</p></li><li><p>写完页面之后，可以右键<code>index.html</code>文件，点击<code>Open In Default Browser</code>(需要安装插件<code>Open in Browser</code>)，直接打开浏览器来查看页面效果，如下图：</p><p><img src="https://i.loli.net/2020/04/02/kaPc2qStsbyi3DI.png" alt="dcfc42a87e4a4804531ffe3de29fd60.png"></p></li></ol><h1 id="todo-常用的vscode插件"><a href="#todo-常用的vscode插件" class="headerlink" title="todo:常用的vscode插件"></a>todo:常用的<code>vscode</code>插件</h1><h1 id="todo-常用的vscode代码段"><a href="#todo-常用的vscode代码段" class="headerlink" title="todo:常用的vscode代码段"></a>todo:常用的<code>vscode</code>代码段</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#visual-studio-code&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%8b%e8%bd%bd%e5%ae%89%e8%a3%85&quot;&gt;下载安装&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="StepByStep" scheme="http://www.dimsum.fun/categories/StepByStep/"/>
    
    
      <category term="Visual Studio Code" scheme="http://www.dimsum.fun/tags/Visual-Studio-Code/"/>
    
      <category term="特基础" scheme="http://www.dimsum.fun/tags/%E7%89%B9%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(17) -- 路由与终结点：如何规划好你的Web API</title>
    <link href="http://www.dimsum.fun/2020/04/01/17.Routing_document/"/>
    <id>http://www.dimsum.fun/2020/04/01/17.Routing_document/</id>
    <published>2020-04-01T08:02:00.000Z</published>
    <updated>2020-04-03T08:32:55.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="路由注册方式"><a href="#路由注册方式" class="headerlink" title="路由注册方式"></a>路由注册方式</h1><ul><li>路由模板的方式</li><li>RouteAttribute方式</li></ul><h1 id="路由约束"><a href="#路由约束" class="headerlink" title="路由约束"></a>路由约束</h1><ul><li>类型约束</li><li>范围约束</li><li>正则表达式</li><li>是否必选</li><li>自定义<code>IRouteConstraint</code></li></ul><h1 id="Url生成"><a href="#Url生成" class="headerlink" title="Url生成"></a>Url生成</h1><ul><li><code>LinkGenerator</code></li><li><code>IUrlHelper</code></li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>RoutingDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code>，为了方便演示，这里配置了<code>swagger</code>的组件，需要引入以下的包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Swashbuckle.AspNetCore</span><br></pre></td></tr></table></figure><p>然后右键项目名称-&gt;属性-&gt;生成-&gt;输出，勾选上<code>XML文档文件</code></p><p>回到<code>Startup.ConfigureServices</code>方法，在<code>services.AddControllers();</code>后面新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">services.AddSwaggerGen(c =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    c.SwaggerDoc(<span class="string">"v1"</span>, <span class="keyword">new</span> OpenApiInfo() &#123;Title = <span class="string">"My API"</span>, Version = <span class="string">"v1"</span>&#125;);</span><br><span class="line">    <span class="keyword">var</span> xmlFile = <span class="string">$"<span class="subst">&#123;Assembly.GetExecutingAssembly().GetName().Name&#125;</span>.xml"</span>;</span><br><span class="line">    <span class="keyword">var</span> xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);</span><br><span class="line">    c.IncludeXmlComments(xmlPath);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>在<code>Startup.Configure</code>的<code>if(env.IsDevelopment()){...}</code>这个<code>if</code>判断后面，新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app.UseSwagger();</span><br><span class="line">app.UseSwaggerUI(c =&gt; &#123; c.SwaggerEndpoint(<span class="string">"/swagger/v1/swagger.json"</span>, <span class="string">"My API V1"</span>); &#125;);</span><br></pre></td></tr></table></figure><h2 id="添加测试控制器"><a href="#添加测试控制器" class="headerlink" title="添加测试控制器"></a>添加测试控制器</h2><p>新增控制器<code>OrderController</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RoutingDemo.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 订单控制器</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"api/[controller]/[action]"</span>)</span>]</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 订单是否存在</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>必须可以转为long<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        <span class="comment">//[HttpGet("&#123;id:MyRouteConstraint&#125;")]</span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;id:isLong&#125;"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">OrderExist</span>(<span class="params">[FromRoute]<span class="keyword">string</span> id</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 订单最大数量</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="id"&gt;</span>最大20<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="linkGenerator"&gt;</span><span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;id:max(20)&#125;"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Max</span>(<span class="params"><span class="keyword">long</span> id, [FromServices] LinkGenerator linkGenerator</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> a = linkGenerator.GetPathByAction(<span class="string">"Reque"</span>, <span class="string">"Order"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;para name="ss"&gt;</span>必填<span class="doctag">&lt;/para&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;name:required&#125;"</span>)</span>]</span><br><span class="line">        [<span class="meta">Obsolete</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Reque</span>(<span class="params"><span class="keyword">string</span> name</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> </span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="number"&gt;</span>以三个数字开始<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;returns&gt;</span><span class="doctag">&lt;/returns&gt;</span></span></span><br><span class="line">        [<span class="meta">HttpGet(<span class="meta-string">"&#123;number:regex(^\\d&#123;&#123;3&#125;&#125;$)&#125;"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Number</span>(<span class="params"><span class="keyword">string</span> number</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义路由约束"><a href="#自定义路由约束" class="headerlink" title="自定义路由约束"></a>自定义路由约束</h2><p>在项目根目录新增<code>Constraint</code>文件夹，在文件夹里新增<code>MyRouteConstraint.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Http;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Routing;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RoutingDemo.Constraint</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyRouteConstraint</span>:<span class="title">IRouteConstraint</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">Match</span>(<span class="params">HttpContext httpContext, IRouter route, <span class="keyword">string</span> routeKey, RouteValueDictionary values,</span></span></span><br><span class="line"><span class="function"><span class="params">            RouteDirection routeDirection</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">if</span> (RouteDirection.IncomingRequest == routeDirection)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> v = values[routeKey];</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">long</span>.TryParse(v.ToString(), <span class="keyword">out</span> <span class="keyword">var</span> <span class="keyword">value</span>))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将自定义路由约束注册到框架中，在<code>Startup.ConfigureServices</code>方法里追加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddRouting(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.ConstraintMap.Add(<span class="string">"isLong"</span>, <span class="keyword">typeof</span>(MyRouteConstraint));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/swagger</code>，即可以看到路由配置的情况</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Restful不是必须的</li><li>约定好API的表达契约</li><li>将API约束在特定的目录下，如<code>/api/</code></li><li>使用<code>ObsoleteAttribute</code>标记即将废弃的API</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;路由注册方式&quot;&gt;&lt;a href=&quot;#路由注册方式&quot; class=&quot;headerlink&quot; title=&quot;路由注册方式&quot;&gt;&lt;/a&gt;路由注册方式&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;路由模板的方式&lt;/li&gt;
&lt;li&gt;RouteAttribute方式&lt;/li&gt;
&lt;/ul&gt;
&lt;h1
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(10) -- 选项框架：服务组件集成配置的最佳实现</title>
    <link href="http://www.dimsum.fun/2020/04/01/10.Option_document/"/>
    <id>http://www.dimsum.fun/2020/04/01/10.Option_document/</id>
    <published>2020-04-01T05:13:13.000Z</published>
    <updated>2020-04-01T09:04:58.074Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e9%80%89%e9%a1%b9%e6%a1%86%e6%9e%b6%e7%89%b9%e6%80%a7">选项框架特性</a></li><li><a href="#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%99">设计原则</a></li><li><a href="#%e5%bb%ba%e8%ae%ae">建议</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e6%9c%8d%e5%8a%a1%e4%b8%8e%e6%b5%8b%e8%af%95%e6%9c%8d%e5%8a%a1%e5%af%b9%e5%ba%94%e7%9a%84%e9%80%89%e9%a1%b9">创建测试服务与测试服务对应的选项</a></li><li><a href="#%e4%bf%ae%e6%94%b9appsettingsjson">修改<code>appsettings.json</code></a></li><li><a href="#%e6%b3%a8%e5%86%8c%e6%9c%8d%e5%8a%a1%e5%92%8c%e9%80%89%e9%a1%b9">注册服务和选项</a></li><li><a href="#%e8%8e%b7%e5%8f%96%e6%9c%8d%e5%8a%a1%e8%bf%9b%e8%a1%8c%e6%b5%8b%e8%af%95">获取服务进行测试</a></li></ul></li><li><a href="#%e9%80%89%e9%a1%b9%e6%a1%86%e6%9e%b6%e7%83%ad%e6%9b%b4%e6%96%b0">选项框架热更新</a><ul><li><a href="#%e5%85%b3%e9%94%ae%e7%b1%bb%e5%9e%8b">关键类型</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b">代码示例</a><ul><li><a href="#ioptionssnapshot"><code>IOptionsSnapshot</code></a></li><li><a href="#ioptionsmonitor"><code>IOptionsMonitor</code></a></li><li><a href="#ioptionsmonitor%e7%9b%91%e5%90%ac%e9%85%8d%e7%bd%ae%e5%8f%98%e5%8a%a8"><code>IOptionsMonitor</code>监听配置变动</a></li></ul></li></ul></li><li><a href="#%e4%bc%98%e5%8c%96%e4%bb%a3%e7%a0%81%e7%bb%93%e6%9e%84">优化代码结构</a></li><li><a href="#%e5%8a%a8%e6%80%81%e4%bf%ae%e6%94%b9%e9%80%89%e9%a1%b9%e5%80%bc">动态修改选项值</a></li></ul><h1 id="选项框架特性"><a href="#选项框架特性" class="headerlink" title="选项框架特性"></a>选项框架特性</h1><ul><li>支持单例模式读取配置</li><li>支持快照</li><li>支持配置变更通知</li><li>支持运行时动态修改选项值</li></ul><h1 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h1><ul><li>接口分离原则(ISP)，我们的类不应该依赖它不使用的配置</li><li>关注点分离(SoC)，不同组件、服务、类之间的配置不应相互依赖或耦合</li></ul><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ul><li>为我们的服务设计<code>XXXOptions</code></li><li>使用<code>IOptions&lt;XXXOptions&gt;</code>、<code>IOptionsSnapshot&lt;XXXOptions&gt;</code>、<code>IOptionsMonitor&lt;XXXOptions&gt;</code>作为服务构造函数的参数</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>创建名为<code>OptionsDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="创建测试服务与测试服务对应的选项"><a href="#创建测试服务与测试服务对应的选项" class="headerlink" title="创建测试服务与测试服务对应的选项"></a>创建测试服务与测试服务对应的选项</h2><p>创建<code>OrderService.cs</code>为了方便测试，这里将<code>IOrderService</code>、<code>OrderService</code>、<code>OrderServiceOption</code>都放在<code>OrderService.cs</code>文件中，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Options;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OptionsDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">ShowMaxOrderCount</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span>:<span class="title">IOrderService</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> IOptions&lt;OrderServiceOptions&gt; _options;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>(<span class="params">IOptions&lt;OrderServiceOptions&gt; options</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _options = options;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ShowMaxOrderCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> _options.Value.MaxOrderCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderServiceOptions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> MaxOrderCount &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125; = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="修改appsettings-json"><a href="#修改appsettings-json" class="headerlink" title="修改appsettings.json"></a>修改<code>appsettings.json</code></h2><p>将项目中的<code>appsettings.json</code>的内容修改如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Logging"</span>: &#123;</span><br><span class="line">    <span class="attr">"LogLevel"</span>: &#123;</span><br><span class="line">      <span class="attr">"Default"</span>: <span class="string">"Information"</span>,</span><br><span class="line">      <span class="attr">"Microsoft"</span>: <span class="string">"Warning"</span>,</span><br><span class="line">      <span class="attr">"Microsoft.Hosting.Lifetime"</span>: <span class="string">"Information"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"AllowedHosts"</span>: <span class="string">"*"</span>,</span><br><span class="line">  <span class="attr">"OrderService"</span>: &#123;</span><br><span class="line">    <span class="attr">"MaxOrderCount"</span>: <span class="number">400</span></span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注册服务和选项"><a href="#注册服务和选项" class="headerlink" title="注册服务和选项"></a>注册服务和选项</h2><p>在<code>Startup.ConfigureServices</code>中添加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">services.Configure&lt;OrderServiceOptions&gt;(Configuration.GetSection(<span class="string">"OrderService"</span>));</span><br><span class="line">services.AddScoped&lt;IOrderService, OrderService&gt;();</span><br></pre></td></tr></table></figure><h2 id="获取服务进行测试"><a href="#获取服务进行测试" class="headerlink" title="获取服务进行测试"></a>获取服务进行测试</h2><p>修改<code>WeatherForecastController.Get</code>方法，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Get</span>(<span class="params">[FromServices]IOrderService orderService</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"orderService.ShowMaxOrderCount:<span class="subst">&#123;orderService.ShowMaxOrderCount()&#125;</span>"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，可以访问<code>/WeatherForecast</code>，可以看到控制台打印出以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">orderService.ShowMaxOrderCount:400</span><br></pre></td></tr></table></figure><p>这里如果在项目运行时修改<code>appsettings.json</code>里配置项的值，重新访问<code>/WeatherForecast</code>地址，会发现控制台打印出来的值不会变，还依旧是400，这里就需要使用到下面的热更新。</p><h1 id="选项框架热更新"><a href="#选项框架热更新" class="headerlink" title="选项框架热更新"></a>选项框架热更新</h1><h2 id="关键类型"><a href="#关键类型" class="headerlink" title="关键类型"></a>关键类型</h2><ul><li>单例服务(Singleton)使用<code>IOptionsMonitor&lt;out TOptions&gt;</code></li><li>范围作用域类型(Scope)使用<code>IOptionsSnapshot&lt;out TOptions&gt;</code></li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="IOptionsSnapshot"><a href="#IOptionsSnapshot" class="headerlink" title="IOptionsSnapshot"></a><code>IOptionsSnapshot</code></h3><p>上个示例对<code>OrderService</code>注册的是<code>Scope</code>服务，所以这里先测试<code>Scope</code>对应的<code>IOptionsSnapshot</code>，将<code>OrderService</code>构造函数获取服务的类型修改为<code>IOptionsSnapshot&lt;OrderServiceOptions&gt;</code>，最终修改后<code>OrderService</code>类的代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span>:<span class="title">IOrderService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOptionsSnapshot&lt;OrderServiceOptions&gt; _options;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>(<span class="params">IOptionsSnapshot&lt;OrderServiceOptions&gt; options</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _options = options;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ShowMaxOrderCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _options.Value.MaxOrderCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/WeatherForecast</code>，发现现在打印出来的是<code>appsettings.json</code>现有的值，对该配置项进行修改，保存之后重新访问<code>/WeatherForecast</code>，可以发现获取到的是新的值</p><h3 id="IOptionsMonitor"><a href="#IOptionsMonitor" class="headerlink" title="IOptionsMonitor"></a><code>IOptionsMonitor</code></h3><p>将<code>OrderService</code>构造函数获取服务的类型修改为<code>IOptionsMonitor&lt;OrderServiceOptions&gt;</code>，最终修改后<code>OrderService</code>类的代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span>:<span class="title">IOrderService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOptionsMonitor&lt;OrderServiceOptions&gt; _options;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>(<span class="params">IOptionsMonitor&lt;OrderServiceOptions&gt; options</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _options = options;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ShowMaxOrderCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _options.CurrentValue.MaxOrderCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Startup.ConfigureServices</code>方法中将<code>OrderService</code>注册为单例模式，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IOrderService, OrderService&gt;();</span><br></pre></td></tr></table></figure><p>运行代码，访问<code>/WeatherForecast</code>，发现现在打印出来的是<code>appsettings.json</code>现有的值，对该配置项进行修改，保存之后重新访问<code>/WeatherForecast</code>，可以发现获取到的是新的值</p><h3 id="IOptionsMonitor监听配置变动"><a href="#IOptionsMonitor监听配置变动" class="headerlink" title="IOptionsMonitor监听配置变动"></a><code>IOptionsMonitor</code>监听配置变动</h3><p>通过<code>IOptionsMonitor</code>对象的<code>OnChange</code>方法来注册配置变动操作，只需要在获取对象后注册相应操作即可，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderService</span>:<span class="title">IOrderService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IOptionsMonitor&lt;OrderServiceOptions&gt; _options;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderService</span>(<span class="params">IOptionsMonitor&lt;OrderServiceOptions&gt; options</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _options = options;</span><br><span class="line">        <span class="keyword">this</span>._options.OnChange(changedOptions =&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"配置发生了变化,新值为:<span class="subst">&#123;changedOptions.MaxOrderCount&#125;</span>"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ShowMaxOrderCount</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> _options.CurrentValue.MaxOrderCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，修改<code>appsettings.json</code>的值，就可以看到控制台打印出类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">配置发生了变化,新值为:100</span><br></pre></td></tr></table></figure><h1 id="优化代码结构"><a href="#优化代码结构" class="headerlink" title="优化代码结构"></a>优化代码结构</h1><p>在开发中经常会出现服务与选项一起注册的情况，为了优化代码结构，一般会为统一将一个服务的注册放到<code>IServiceCollection</code>的扩展方法中去。创建<code>OrderServiceExtensions.cs</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OptionsDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">OrderServiceExtensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddOrderService</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.Configure&lt;OrderServiceOptions&gt;(configuration.GetSection(<span class="string">"OrderService"</span>));</span><br><span class="line">            services.AddSingleton&lt;IOrderService, OrderService&gt;();</span><br><span class="line">            <span class="keyword">return</span> services;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>Startup.ConfigureServices</code>修改后代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    services.AddOrderService(Configuration);</span><br><span class="line">    services.AddControllers();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行之后可发现效果与上面一致</p><h1 id="动态修改选项值"><a href="#动态修改选项值" class="headerlink" title="动态修改选项值"></a>动态修改选项值</h1><p>在注入选项之后，可动态对选项的值进行操作，这里以为<code>MaxOrderCount</code>的值增加<code>100</code>为例，修改<code>OrderServiceExtensions</code>，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">OptionsDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">OrderServiceExtensions</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IServiceCollection <span class="title">AddOrderService</span>(<span class="params"><span class="keyword">this</span> IServiceCollection services, IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.Configure&lt;OrderServiceOptions&gt;(configuration.GetSection(<span class="string">"OrderService"</span>));</span><br><span class="line">            services.PostConfigure&lt;OrderServiceOptions&gt;(options =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                options.MaxOrderCount += <span class="number">100</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            services.AddSingleton&lt;IOrderService, OrderService&gt;();</span><br><span class="line">            <span class="keyword">return</span> services;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，可发现获得到的值比<code>appsettings.json</code>里的值增加<code>100</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%80%89%e9%a1%b9%e6%a1%86%e6%9e%b6%e7%89%b9%e6%80%a7&quot;&gt;选项框架特性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%ae%be%e8%ae%a1%e5%8e%9f%e5%88%9
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(16) -- 文件提供程序：让你可以将文件放在任何地方</title>
    <link href="http://www.dimsum.fun/2020/04/01/16.FileProvider_document/"/>
    <id>http://www.dimsum.fun/2020/04/01/16.FileProvider_document/</id>
    <published>2020-04-01T04:30:00.000Z</published>
    <updated>2020-04-03T08:32:55.160Z</updated>
    
    <content type="html"><![CDATA[<h1 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h1><ul><li><code>IFileProvider</code>：用来访问各种各样文件的提供程序的接口，通过这样抽象的定义，让我们与具体的文件的读取代码进行隔离，这样的好处是我们可以从不同的地方读取文件，不仅仅是本地物理文件，也可以是嵌入式文件，甚至是云端上面的其他API提供的文件</li><li><code>IFileInfo</code></li><li><code>IDirectoryContents</code></li></ul><h1 id="内置文件提供程序"><a href="#内置文件提供程序" class="headerlink" title="内置文件提供程序"></a>内置文件提供程序</h1><ul><li><code>PhysicalFileProvider</code>：物理文件的提供程序</li><li><code>EmbeddedFileProvider</code>：嵌入式的提供程序</li><li><code>CompositeFileProvider</code>：组合文件的提供程序，当我们由多个数据源来提供文件的手，可以将这些源合并为一个目录</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>FileProviderDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下四个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.FileProviders.Abstractions</span><br><span class="line">Microsoft.Extensions.FileProviders.Composite</span><br><span class="line">Microsoft.Extensions.FileProviders.Embedded</span><br><span class="line">Microsoft.Extensions.FileProviders.Physical</span><br></pre></td></tr></table></figure><h2 id="创建PhysicalFileProvider"><a href="#创建PhysicalFileProvider" class="headerlink" title="创建PhysicalFileProvider"></a>创建<code>PhysicalFileProvider</code></h2><p>在<code>Program.Main</code>方法中新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> phyProvider = <span class="keyword">new</span> PhysicalFileProvider(AppDomain.CurrentDomain.BaseDirectory);</span><br><span class="line"><span class="keyword">var</span> contents = phyProvider.GetDirectoryContents(<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> contents)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item.Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，可以看到控制台打印出类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FileProviderDemo.runtimeconfig.dev.json</span><br><span class="line">FileProviderDemo.runtimeconfig.json</span><br><span class="line">Microsoft.Extensions.FileProviders.Abstractions.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Composite.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Embedded.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Physical.dll</span><br><span class="line">Microsoft.Extensions.FileSystemGlobbing.dll</span><br><span class="line">Microsoft.Extensions.Primitives.dll</span><br></pre></td></tr></table></figure><h2 id="创建EmbeddedFileProvider"><a href="#创建EmbeddedFileProvider" class="headerlink" title="创建EmbeddedFileProvider"></a>创建<code>EmbeddedFileProvider</code></h2><p>在项目根目录创建一个<code>emb.html</code>的文件，右键<code>emb.html</code>文件-&gt;属性-&gt;生成操作选择为<code>嵌入的资源</code>，然后在上面的测试代码后面追加以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> embProvider = <span class="keyword">new</span> EmbeddedFileProvider(<span class="keyword">typeof</span>(Program).Assembly);</span><br><span class="line"><span class="keyword">var</span> html = embProvider.GetFileInfo(<span class="string">"emb.html"</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$"获取到嵌入式文件:<span class="subst">&#123;html.Exists&#125;</span>"</span>);</span><br></pre></td></tr></table></figure><p>运行代码可以看到除了上一步打印的信息外，还有打印出了以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取到嵌入式文件:True</span><br></pre></td></tr></table></figure><h2 id="创建CompositeFileProvider"><a href="#创建CompositeFileProvider" class="headerlink" title="创建CompositeFileProvider"></a>创建<code>CompositeFileProvider</code></h2><p>继续上面的测试代码后面新增以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine(<span class="string">"=====↓CompositeFileProvider↓====="</span>);</span><br><span class="line"><span class="keyword">var</span> compositeProvider = <span class="keyword">new</span> CompositeFileProvider(phyProvider, embProvider);</span><br><span class="line"><span class="keyword">var</span> comContent = compositeProvider.GetDirectoryContents(<span class="string">"/"</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> comContent)</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(item.Name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码可以看到除了前两步打印的信息外，还打印了以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;↓CompositeFileProvider↓&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">FileProviderDemo.deps.json</span><br><span class="line">FileProviderDemo.dll</span><br><span class="line">FileProviderDemo.exe</span><br><span class="line">FileProviderDemo.pdb</span><br><span class="line">FileProviderDemo.runtimeconfig.dev.json</span><br><span class="line">FileProviderDemo.runtimeconfig.json</span><br><span class="line">Microsoft.Extensions.FileProviders.Abstractions.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Composite.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Embedded.dll</span><br><span class="line">Microsoft.Extensions.FileProviders.Physical.dll</span><br><span class="line">Microsoft.Extensions.FileSystemGlobbing.dll</span><br><span class="line">Microsoft.Extensions.Primitives.dll</span><br><span class="line">emb.html</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;核心类型&quot;&gt;&lt;a href=&quot;#核心类型&quot; class=&quot;headerlink&quot; title=&quot;核心类型&quot;&gt;&lt;/a&gt;核心类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;IFileProvider&lt;/code&gt;：用来访问各种各样文件的提供程序的接口，通过这样抽象的定义，
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(9) -- 自定义配置数据源：低成本实现定制配置方案</title>
    <link href="http://www.dimsum.fun/2020/04/01/9.ConfigurationCustom_document/"/>
    <id>http://www.dimsum.fun/2020/04/01/9.ConfigurationCustom_document/</id>
    <published>2020-04-01T04:12:12.000Z</published>
    <updated>2020-04-01T09:04:52.857Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%8b%93%e5%b1%95%e6%ad%a5%e9%aa%a4">拓展步骤</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e6%95%b0%e6%8d%ae%e6%ba%90provider">创建自定义数据源<code>Provider</code></a></li><li><a href="#%e5%88%9b%e5%bb%ba%e8%87%aa%e5%ae%9a%e4%b9%89%e6%95%b0%e6%8d%ae%e6%ba%90source">创建自定义数据源<code>Source</code></a></li><li><a href="#%e5%88%9b%e5%bb%baiconfigurationbuilder%e6%89%a9%e5%b1%95%e6%96%b9%e6%b3%95">创建<code>IConfigurationBuilder</code>扩展方法</a></li><li><a href="#%e5%bc%95%e7%94%a8%e8%87%aa%e5%ae%9a%e4%b9%89%e9%85%8d%e7%bd%ae%e6%ba%90%e5%b9%b6%e7%9b%91%e5%90%ac%e9%85%8d%e7%bd%ae%e6%ba%90%e5%8f%98%e5%8c%96">引用自定义配置源并监听配置源变化</a></li></ul></li></ul><h1 id="拓展步骤"><a href="#拓展步骤" class="headerlink" title="拓展步骤"></a>拓展步骤</h1><ul><li>实现<code>IConfigurationSource</code></li><li>实现<code>IConfigurationProvider</code></li><li>实现<code>AddXXX</code>扩展方法</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ConfigurationCustomDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下两个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration</span><br><span class="line">Microsoft.Extensions.Configuration.Abstractions</span><br></pre></td></tr></table></figure><h2 id="创建自定义数据源Provider"><a href="#创建自定义数据源Provider" class="headerlink" title="创建自定义数据源Provider"></a>创建自定义数据源<code>Provider</code></h2><p>创建<code>MyConfigurationProvider</code>，继承<code>ConfigurationProvider</code>这个抽象类，调用基类的<code>OnReload</code>方法能触发重新加载配置，这里因为要自动修改和触发配置，所以这个类里用了<code>Timer</code>对象来模拟配置变化的操作，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Timers;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationCustomDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyConfigurationProvider</span>:<span class="title">ConfigurationProvider</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> Timer timer;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyConfigurationProvider</span>(<span class="params"></span>):<span class="title">base</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            timer = <span class="keyword">new</span> Timer();</span><br><span class="line">            timer.Elapsed += Timer_Elapsed;</span><br><span class="line">            timer.Interval = <span class="number">3000</span>;</span><br><span class="line">            timer.Start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Timer_Elapsed</span>(<span class="params"><span class="keyword">object</span> sender, ElapsedEventArgs e</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Load(<span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">Load</span>(<span class="params"><span class="keyword">bool</span> reload</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Data[<span class="string">"lastTime"</span>] = DateTime.Now.ToString();</span><br><span class="line">            <span class="keyword">if</span> (reload)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">base</span>.OnReload();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建自定义数据源Source"><a href="#创建自定义数据源Source" class="headerlink" title="创建自定义数据源Source"></a>创建自定义数据源<code>Source</code></h2><p>创建<code>MyConfigurationSource</code>，实现<code>IConfigurationSource</code>接口，在<code>Build</code>方法直接返回上面创建的<code>Provider</code>，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationCustomDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">internal</span> <span class="keyword">class</span> <span class="title">MyConfigurationSource</span>:<span class="title">IConfigurationSource</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> IConfigurationProvider <span class="title">Build</span>(<span class="params">IConfigurationBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyConfigurationProvider();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建IConfigurationBuilder扩展方法"><a href="#创建IConfigurationBuilder扩展方法" class="headerlink" title="创建IConfigurationBuilder扩展方法"></a>创建<code>IConfigurationBuilder</code>扩展方法</h2><p>可以看到上面两个类的都是用<code>internal</code>的访问修饰符，这是因为一般在<code>Provider</code>和<code>Source</code>都是通过拓展方法来调用，而不会将自己直接暴露被调用者，所以接下来要创建一个<code>IConfigurationBuilder</code>的扩展方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationCustomDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">MyConfigurationBuilderExtension</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IConfigurationBuilder <span class="title">AddMyConfiguration</span>(<span class="params"><span class="keyword">this</span> IConfigurationBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            builder.Add(<span class="keyword">new</span> MyConfigurationSource());</span><br><span class="line">            <span class="keyword">return</span> builder;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="引用自定义配置源并监听配置源变化"><a href="#引用自定义配置源并监听配置源变化" class="headerlink" title="引用自定义配置源并监听配置源变化"></a>引用自定义配置源并监听配置源变化</h2><p><code>Program.Main</code>方法修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Primitives;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationCustomDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            builder.AddMyConfiguration();</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line"></span><br><span class="line">            ChangeToken.OnChange(() =&gt; configurationRoot.GetReloadToken(), () =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">var</span> lastTime = configurationRoot[<span class="string">"lastTime"</span>];</span><br><span class="line">                Console.WriteLine(<span class="string">$"lastTime=<span class="subst">&#123;lastTime&#125;</span>"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"======"</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码，可以看到控制台3秒钟打印一次当前时间的效果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%8b%93%e5%b1%95%e6%ad%a5%e9%aa%a4&quot;&gt;拓展步骤&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0&quot;&gt;代码实现&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(8) -- 文件配置提供程序：自由选择配置的格式</title>
    <link href="http://www.dimsum.fun/2020/04/01/8.ConfigurationFile_document/"/>
    <id>http://www.dimsum.fun/2020/04/01/8.ConfigurationFile_document/</id>
    <published>2020-04-01T03:11:11.000Z</published>
    <updated>2020-04-01T09:04:48.264Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e6%8f%90%e4%be%9b%e7%a8%8b%e5%ba%8f">文件配置提供程序</a></li><li><a href="#%e7%89%b9%e6%80%a7">特性</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b">代码示例</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e9%85%8d%e7%bd%ae%e9%a1%b9appsettingjson">创建测试配置项<code>appSetting.json</code></a></li><li><a href="#%e8%8e%b7%e5%8f%96appsettingjson%e9%87%8c%e7%9a%84%e9%85%8d%e7%bd%ae">获取<code>appSetting.json</code>里的配置</a></li><li><a href="#%e8%8e%b7%e5%8f%96ini%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6">获取<code>ini</code>配置文件</a></li></ul></li></ul><h1 id="文件配置提供程序"><a href="#文件配置提供程序" class="headerlink" title="文件配置提供程序"></a>文件配置提供程序</h1><p>读取不同文件格式或从不同位置读取配置</p><ul><li>Microsoft.Extensions.Configuration.Ini</li><li>Microsoft.Extensions.Configuration.Json</li><li>Microsoft.Extensions.Configuration.UserSecrets</li><li>Microsoft.Extensions.Configuration.Xml</li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>指定文件可选、必选</li><li>指定是否监视文件的变更</li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ConfigurationFileDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下四个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration.Ini</span><br><span class="line">Microsoft.Extensions.Configuration.Json</span><br><span class="line">Microsoft.Extensions.Configuration.UserSecrets</span><br><span class="line">Microsoft.Extensions.Configuration.Xml</span><br></pre></td></tr></table></figure><p>这里不用引用<code>Microsoft.Extensions.Configuration</code>和<code>Microsoft.Extensions.Configuration.Abstractions</code>两个基础包，是因为其他包已经包含了两个基础包</p><h2 id="创建测试配置项appSetting-json"><a href="#创建测试配置项appSetting-json" class="headerlink" title="创建测试配置项appSetting.json"></a>创建测试配置项<code>appSetting.json</code></h2><p>在项目根目录创建<code>appSetting.json</code>文件，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">  <span class="attr">"Key2"</span>: <span class="string">"value2"</span>,</span><br><span class="line">  <span class="attr">"Key3"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"Key4"</span>: <span class="number">10</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>Visual Studio 2019</code>中通过右键<code>appSetting.json</code>文件-&gt;属性-复制到输出目录选择<code>如果较新则复制</code></li><li>在<code>Visual Studio Code</code>中通过修改<code>ConfigurationFileDemo.csproj</code>文件，新增文件输出到配置，具体代码如下：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Project</span> <span class="attr">Sdk</span>=<span class="string">"Microsoft.NET.Sdk"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">OutputType</span>&gt;</span>Exe<span class="tag">&lt;/<span class="name">OutputType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TargetFramework</span>&gt;</span>netcoreapp3.1<span class="tag">&lt;/<span class="name">TargetFramework</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.Extensions.Configuration.Ini"</span> <span class="attr">Version</span>=<span class="string">"3.1.3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.Extensions.Configuration.Json"</span> <span class="attr">Version</span>=<span class="string">"3.1.3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.Extensions.Configuration.UserSecrets"</span> <span class="attr">Version</span>=<span class="string">"3.1.3"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">PackageReference</span> <span class="attr">Include</span>=<span class="string">"Microsoft.Extensions.Configuration.Xml"</span> <span class="attr">Version</span>=<span class="string">"3.1.3"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">None</span> <span class="attr">Update</span>=<span class="string">"appSetting.json"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">CopyToOutputDirectory</span>&gt;</span>PreserveNewest<span class="tag">&lt;/<span class="name">CopyToOutputDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">None</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ItemGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取appSetting-json里的配置"><a href="#获取appSetting-json里的配置" class="headerlink" title="获取appSetting.json里的配置"></a>获取<code>appSetting.json</code>里的配置</h2>修改<code>Program.Main</code>方法，内容如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationFileDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            builder.AddJsonFile(<span class="string">"appSetting.json"</span>,optional:<span class="literal">false</span>,reloadOnChange:<span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line">            Console.WriteLine(<span class="string">"开始了。。输入随意字符串返回配置项，直接回车推出"</span>);</span><br><span class="line">            <span class="keyword">var</span> isStop = Console.ReadLine();</span><br><span class="line">            <span class="keyword">while</span> (!<span class="keyword">string</span>.IsNullOrEmpty(isStop))</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">$"Key1=<span class="subst">&#123;configurationRoot[<span class="string">"Key1"</span>]&#125;</span>"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$"Key2=<span class="subst">&#123;configurationRoot[<span class="string">"Key2"</span>]&#125;</span>"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$"Key3=<span class="subst">&#123;configurationRoot[<span class="string">"Key3"</span>]&#125;</span>"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">$"Key4=<span class="subst">&#123;configurationRoot[<span class="string">"Key4"</span>]&#125;</span>"</span>);</span><br><span class="line">                Console.WriteLine(<span class="string">"=====分割线====="</span>);</span><br><span class="line">                isStop = Console.ReadLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>optional：表示文件是否可选，false=没文件会报错，true=可以没有文件</li></ul><p>reloadOnChange：表示监视配置文件的变动，配置文件变动会进行重新读取</p><p>运行代码，然后在控制台随意输入字符串回车，可以看到以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Key1&#x3D;value1</span><br><span class="line">Key2&#x3D;value2</span><br><span class="line">Key3&#x3D;False</span><br><span class="line">Key4&#x3D;10</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>进入项目根目录/bin/Debug/netcoreapp3.1里，找到<code>appSetting.json</code>文件，修改里面的配置值，再回到控制台输入随意字符串回车，可以看到打印出来的值已经有所变化</p><h2 id="获取ini配置文件"><a href="#获取ini配置文件" class="headerlink" title="获取ini配置文件"></a>获取<code>ini</code>配置文件</h2><p>在项目根目录创建<code>appSetting.ini</code>文件，内容如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Key4</span>=Hello world</span><br><span class="line"><span class="attr">Key5</span>=value5</span><br></pre></td></tr></table></figure><p>类似<code>appSetting.json</code>那样配置拷贝到输出目录，修改<code>Program.Main</code>方法，在<code>AddJsonFile</code>方法下面新增添加<code>ini</code>配置源的调用，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">builder.AddIniFile(<span class="string">"appSetting.ini"</span>, optional: <span class="literal">false</span>, reloadOnChange: <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>运行代码，然后在控制台输入随意字符串回车，可以看到以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Key1&#x3D;value1</span><br><span class="line">Key2&#x3D;value2</span><br><span class="line">Key3&#x3D;False</span><br><span class="line">Key4&#x3D;Hello world</span><br><span class="line">Key5&#x3D;value5</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;分割线&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>可以看到<code>ini</code>文件里的配置已经加载进去了，同时<strong>后面加载的配置项如果与前面已经加载的配置项名称一致，会覆盖掉前面加载的配置项</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%96%87%e4%bb%b6%e9%85%8d%e7%bd%ae%e6%8f%90%e4%be%9b%e7%a8%8b%e5%ba%8f&quot;&gt;文件配置提供程序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e7%89%b9%e6%80
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(15) -- 静态文件中间件：前后端分离开发合并部署骚操作</title>
    <link href="http://www.dimsum.fun/2020/04/01/15.StaticFiles_document/"/>
    <id>http://www.dimsum.fun/2020/04/01/15.StaticFiles_document/</id>
    <published>2020-04-01T02:30:00.000Z</published>
    <updated>2020-04-03T08:32:55.160Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6%e4%b8%ad%e9%97%b4%e4%bb%b6%e7%9a%84%e8%83%bd%e5%8a%9b">静态文件中间件的能力</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e7%94%a8%e7%9a%84%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6">创建测试用的静态文件</a></li><li><a href="#%e9%bb%98%e8%ae%a4%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6%e4%b8%ad%e9%97%b4%e4%bb%b6">默认静态文件中间件</a></li><li><a href="#%e8%ae%be%e7%bd%ae%e9%bb%98%e8%ae%a4%e6%96%87%e4%bb%b6%e4%b8%baindexhtml">设置默认文件为index.html</a></li><li><a href="#%e6%94%af%e6%8c%81%e7%9b%ae%e5%bd%95%e6%b5%8f%e8%a7%88">支持目录浏览</a></li><li><a href="#%e5%a4%9a%e7%9b%ae%e5%bd%95%e6%98%a0%e5%b0%84">多目录映射</a></li></ul></li><li><a href="#%e5%8a%9f%e8%83%bd%e5%ae%9e%e7%8e%b0">功能实现</a></li></ul><h1 id="静态文件中间件的能力"><a href="#静态文件中间件的能力" class="headerlink" title="静态文件中间件的能力"></a>静态文件中间件的能力</h1><ul><li>支持指定相对路径</li><li>支持目录浏览</li><li>支持设置默认文档</li><li>支持多目录映射</li></ul><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>StaticFilesDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="创建测试用的静态文件"><a href="#创建测试用的静态文件" class="headerlink" title="创建测试用的静态文件"></a>创建测试用的静态文件</h2><p>在根目录创建<code>wwwroot</code>文件夹，参照下面结构进行对应文件创建：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wwwroot</span><br><span class="line">    |-- app.js</span><br><span class="line">    |-- index.html</span><br><span class="line">    |-- a</span><br><span class="line">        |-- a.js</span><br><span class="line">        |-- index.html</span><br></pre></td></tr></table></figure><p>具体代码如下：</p><p>/wwwroot/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>静态首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/app.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是静态首页 wwwroot/index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/wwwroot/app.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"这是/index.html"</span>)</span><br></pre></td></tr></table></figure><p>/wwwroot/a/index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"a.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是/a/index.html<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>/wwwroot/a/a.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="string">"这是/a/index.html"</span>)</span><br></pre></td></tr></table></figure><h2 id="默认静态文件中间件"><a href="#默认静态文件中间件" class="headerlink" title="默认静态文件中间件"></a>默认静态文件中间件</h2><p>在<code>Startup.Configure</code>中，将以下代码添加到<code>app.UseHttpsRedirection();</code>下一行</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseStaticFiles();</span><br></pre></td></tr></table></figure><p>运行项目访问<code>https://localhost:5001/index.html</code>和<code>https://localhost:5001/a/index.html</code>可看到静态页面信息</p><h2 id="设置默认文件为index-html"><a href="#设置默认文件为index-html" class="headerlink" title="设置默认文件为index.html"></a>设置默认文件为index.html</h2><p>能起到的效果如下：</p><p><code>https://localhost:5001</code> = <code>https://localhost:5001/index.html</code></p><p><code>https://localhost:5001/a</code> = <code>https://localhost:5001/a/index.html</code></p><p>在<code>app.UseStaticFiles();</code>前面添加以下代码即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseDefaultFiles();</span><br></pre></td></tr></table></figure><p>运行项目访问<code>https://localhost:5001</code>和<code>https://localhost:5001/a</code>可看到静态页面信息</p><h2 id="支持目录浏览"><a href="#支持目录浏览" class="headerlink" title="支持目录浏览"></a>支持目录浏览</h2><p>注释掉默认文件的那个中间件，添加目录浏览的中间件，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.UseDirectoryBrowser();</span><br></pre></td></tr></table></figure><p>然后在<code>Startup.ConfigureServices</code>配置目录浏览的服务，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddDirectoryBrowser();</span><br></pre></td></tr></table></figure><p>运行项目访问<code>https://localhost:5001</code>，可以看到<code>wwwroot</code>的目录结构</p><h2 id="多目录映射"><a href="#多目录映射" class="headerlink" title="多目录映射"></a>多目录映射</h2><p>当文件支持存在放<code>wwwroot</code>这个文件夹的时候，可以使用静态文件中间件的重载来映射其他文件夹，注释掉上一步的代码，将<code>Startup.Configure</code>修改如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">    app.UseStaticFiles(<span class="keyword">new</span> StaticFileOptions()</span><br><span class="line">    &#123;</span><br><span class="line">        FileProvider = <span class="keyword">new</span> PhysicalFileProvider(Path.Combine(Directory.GetCurrentDirectory(), <span class="string">"file"</span>))</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    app.UseRouting();</span><br><span class="line"></span><br><span class="line">    app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录创建<code>file</code>文件夹，在里面创建个<code>file_page.html</code>文件，随便写点东西，运行项目，访问<code>https://localhost:5001/file_page.html</code>，可以看到静态页内容。注意，如果出现同名文件，则先注册的路径优先权更高，如果需要在访问指定文件夹有指定url地址，可以使用<code>StaticFileOptions</code>对象的<code>RequestPath</code>属性，假设这里的<code>RequestPath=&quot;/myfiles&quot;</code>，则说明要想访问<code>file</code>文件夹的内容，路径前面得加上<code>myfiles</code>，例如<code>https://localhost:5001/myfiles/file_page.html</code></p><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>有这样一个需求，接口里所有接口的路由都由<code>api</code>开始，即<code>/api/xxx</code>，静态文件放在默认的<code>wwwroot</code>文件夹中，如果访问的地址不是接口，同时也找不到对应的静态文件，则重写到<code>/index.html</code>页面，具体代码如下：</p><p>修改<code>WeatherForecastController</code>，将原本的<code>[Route(&quot;[controller]&quot;)]</code>修改为<code>[Route(&quot;/api/[controller]&quot;)]</code></p><p>修改<code>Startup.Configure</code>方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseStaticFiles();</span><br><span class="line">    app.MapWhen(context =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> !context.Request.Path.Value.StartsWith(<span class="string">"/api"</span>);</span><br><span class="line">    &#125;, appBuilder =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> option = <span class="keyword">new</span> RewriteOptions();</span><br><span class="line">        option.AddRewrite(regex: <span class="string">".*"</span>, replacement: <span class="string">"/index.html"</span>, skipRemainingRules: <span class="literal">true</span>);</span><br><span class="line">        appBuilder.UseRewriter(option);</span><br><span class="line">        appBuilder.UseStaticFiles();</span><br><span class="line">    &#125;);</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，访问<code>https://localhost:5001/api/WeatherForecast</code>，可以看到正常返回接口信息，访问<code>https://localhost:5001/a/index.html</code>可以看到正常访问到<code>/a/index.html</code>文件内容，访问<code>https://localhost:5001/order/get</code>则会返回<code>/index.html</code>文件内容</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%9d%99%e6%80%81%e6%96%87%e4%bb%b6%e4%b8%ad%e9%97%b4%e4%bb%b6%e7%9a%84%e8%83%bd%e5%8a%9b&quot;&gt;静态文件中间件的能力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(7) -- 环境变量配置提供程序：容器环境下配置注入的最佳途径</title>
    <link href="http://www.dimsum.fun/2020/04/01/7.ConfigurationEnvironmentVariables_Document/"/>
    <id>http://www.dimsum.fun/2020/04/01/7.ConfigurationEnvironmentVariables_Document/</id>
    <published>2020-04-01T02:10:10.000Z</published>
    <updated>2020-04-01T09:04:43.281Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul><li>在<code>Docker</code>中运行</li><li>在<code>Kubernetes</code>中运行</li><li>需要设置<code>ASP.NET Core</code>的一些内置特殊配置时</li></ul><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ul><li>对应配置的分层键，支持用双下划线”<code>--</code>“代替”<code>:</code>“</li><li>支持根据前缀加载</li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ConfigurationEnvironmentVariablesDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下三个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration</span><br><span class="line">Microsoft.Extensions.Configuration.Abstractions</span><br><span class="line">Microsoft.Extensions.Configuration.EnvironmentVariables</span><br></pre></td></tr></table></figure><h2 id="获取环境变量配置"><a href="#获取环境变量配置" class="headerlink" title="获取环境变量配置"></a>获取环境变量配置</h2><p>修改<code>Program.Main</code>方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationEnvironmentVariablesDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            builder.AddEnvironmentVariables();</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line">            Console.WriteLine(<span class="string">$"KEY3=<span class="subst">&#123;configurationRoot[<span class="string">"KEY3"</span>]&#125;</span>"</span>);</span><br><span class="line">            <span class="keyword">var</span> section = configurationRoot.GetSection(<span class="string">"SECTIONA"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"SECTIONA:KEY2=<span class="subst">&#123;section[<span class="string">"KEY2"</span>]&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置测试参数：</p><ul><li>在<code>Visual Studio 2019</code>中，可以右键项目名称-&gt;属性-&gt;调试-&gt;环境变量中添加以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;DIMSUM_KEY1&quot;: &quot;dimsum_value1&quot;,</span><br><span class="line">&quot;KEY3&quot;: &quot;value3&quot;,</span><br><span class="line">&quot;KEY1&quot;: &quot;value1&quot;,</span><br><span class="line">&quot;SECTIONA__KEY2&quot;: &quot;value2&quot;,</span><br><span class="line">&quot;KEY4&quot;: &quot;value4&quot;</span><br></pre></td></tr></table></figure></li><li>在<code>Visual Studio Code</code>中，可以编辑<code>launchSettings.json</code>文件，新增<code>environmentVariables</code>字段，具体代码如下:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">        <span class="attr">"ConfigurationEnvironmentVariablesDemo"</span>: &#123;</span><br><span class="line">        <span class="attr">"commandName"</span>: <span class="string">"Project"</span>,</span><br><span class="line">        <span class="attr">"environmentVariables"</span>: &#123;</span><br><span class="line">            <span class="attr">"DIMSUM_KEY1"</span>: <span class="string">"dimsum_value1"</span>,</span><br><span class="line">            <span class="attr">"KEY3"</span>: <span class="string">"value3"</span>,</span><br><span class="line">            <span class="attr">"KEY1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">            <span class="attr">"SECTIONA__KEY2"</span>: <span class="string">"value2"</span>,</span><br><span class="line">            <span class="attr">"KEY4"</span>: <span class="string">"value4"</span></span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>运行项目，会得到以下信息：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">KEY3&#x3D;value3</span><br><span class="line">SECTIONA:KEY2&#x3D;value2</span><br></pre></td></tr></table></figure></li></ul><h2 id="前缀过滤"><a href="#前缀过滤" class="headerlink" title="前缀过滤"></a>前缀过滤</h2><p>过滤指定前缀的环境变量，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationEnvironmentVariablesDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            builder.AddEnvironmentVariables(<span class="string">"DIMSUM_"</span>);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line">            Console.WriteLine(<span class="string">$"DIMSUM_KEY1=<span class="subst">&#123;configurationRoot[<span class="string">"KEY1"</span>]&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目可以得到以下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DIMSUM_KEY1&#x3D;dimsum_value1</span><br></pre></td></tr></table></figure><p>说明这里获取到的是<code>DIMSUM_KEY1</code>这个配置，而非<code>KEY</code>这个配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;Docker&lt;/code&gt;中运行&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;Kubernetes&lt;/code
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(6) -- 命令行配置提供程序：最简单快捷的配置注入方法</title>
    <link href="http://www.dimsum.fun/2020/03/31/6.ConfigurationCommandLine_document/"/>
    <id>http://www.dimsum.fun/2020/03/31/6.ConfigurationCommandLine_document/</id>
    <published>2020-03-31T07:15:15.000Z</published>
    <updated>2020-04-01T09:04:35.678Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0%e6%94%af%e6%8c%81%e7%9a%84%e6%a0%bc%e5%bc%8f">命令行参数支持的格式</a></li><li><a href="#%e5%91%bd%e4%bb%a4%e6%9b%bf%e6%8d%a2%e6%a8%a1%e5%bc%8f">命令替换模式</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e7%a4%ba%e4%be%8b">代码示例</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e6%b5%8b%e8%af%95%e6%94%af%e6%8c%81%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0%e7%9a%84%e4%b8%89%e7%a7%8d%e6%a0%bc%e5%bc%8f">测试支持命令行参数的三种格式</a></li><li><a href="#%e6%b5%8b%e8%af%95%e5%91%bd%e4%bb%a4%e6%9b%bf%e6%8d%a2">测试命令替换</a></li></ul></li></ul><h1 id="命令行参数支持的格式"><a href="#命令行参数支持的格式" class="headerlink" title="命令行参数支持的格式"></a>命令行参数支持的格式</h1><ul><li>无前缀的<code>key=value</code>模式</li><li>双中横线<code>--key=value</code>或<code>--key value</code>模式</li><li>正斜杠<code>/key=value</code>或<code>/key value</code>模式</li><li>备注：等号分隔符和空格分隔符不能混用*</li></ul><h1 id="命令替换模式"><a href="#命令替换模式" class="headerlink" title="命令替换模式"></a>命令替换模式</h1><ul><li>必须以单横线<code>-</code>或双横线<code>--</code>开头</li><li>映射字典不能包含重复key</li><li>主要作用是命令缩写的作用</li></ul><h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ConfigurationCommandLineDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下三个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration</span><br><span class="line">Microsoft.Extensions.Configuration.Abstractions</span><br><span class="line">Microsoft.Extensions.Configuration.CommandLine</span><br></pre></td></tr></table></figure><h2 id="测试支持命令行参数的三种格式"><a href="#测试支持命令行参数的三种格式" class="headerlink" title="测试支持命令行参数的三种格式"></a>测试支持命令行参数的三种格式</h2><p>修改<code>Program.Main</code>方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationCommandLineDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            builder.AddCommandLine(args);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line">            Console.WriteLine(<span class="string">$"CommandLineKey1:<span class="subst">&#123;configurationRoot[<span class="string">"CommandLineKey1"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"CommandLineKey2:<span class="subst">&#123;configurationRoot[<span class="string">"CommandLineKey2"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"CommandLineKey3:<span class="subst">&#123;configurationRoot[<span class="string">"CommandLineKey3"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置测试参数：</p><ul><li>在<code>Visual Studio 2019</code>中，可以右键项目名称-&gt;属性-&gt;调试-&gt;应用程序参数中输入以下内容：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CommandLineKey1&#x3D;value1 --CommandLineKey2&#x3D;value2 &#x2F;CommandLineKey3&#x3D;value3</span><br></pre></td></tr></table></figure></li><li>在<code>Visual Studio Code</code>中，可以编辑<code>launchSettings.json</code>文件，新增<code>commandLineArgs</code>字段，具体代码如下:<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">        <span class="attr">"ConfigurationCommandLineDemo"</span>: &#123;</span><br><span class="line">        <span class="attr">"commandName"</span>: <span class="string">"Project"</span>,</span><br><span class="line">        <span class="attr">"commandLineArgs"</span>: <span class="string">"CommandLineKey1=value1 --CommandLineKey2=value2 /CommandLineKey3=value3"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>运行项目，可以看到控制台打印出对应的键值对，类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CommandLineKey1:value1</span><br><span class="line">CommandLineKey2:value2</span><br><span class="line">CommandLineKey3:value3</span><br></pre></td></tr></table></figure><h2 id="测试命令替换"><a href="#测试命令替换" class="headerlink" title="测试命令替换"></a>测试命令替换</h2><p>为<code>Program.Main</code>方法添加命令替换映射，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationCommandLineDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            <span class="keyword">var</span> mapper = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;() &#123;&#123;<span class="string">"-k1"</span>, <span class="string">"CommandLineKey1"</span>&#125;&#125;;</span><br><span class="line">            builder.AddCommandLine(args, mapper);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line">            Console.WriteLine(<span class="string">$"CommandLineKey1:<span class="subst">&#123;configurationRoot[<span class="string">"CommandLineKey1"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"CommandLineKey2:<span class="subst">&#123;configurationRoot[<span class="string">"CommandLineKey2"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"CommandLineKey3:<span class="subst">&#123;configurationRoot[<span class="string">"CommandLineKey3"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mapper表示用<code>-k1</code>这个命令可以代替<code>CommandLineKey1</code><br>将应用参数修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CommandLineKey1&#x3D;value1 --CommandLineKey2&#x3D;value2 &#x2F;CommandLineKey3&#x3D;value3 -k1&#x3D;value4</span><br></pre></td></tr></table></figure><p>运行项目会在控制台打印出以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CommandLineKey1:value4</span><br><span class="line">CommandLineKey2:value2</span><br><span class="line">CommandLineKey3:value3</span><br></pre></td></tr></table></figure><p>可以发现<code>CommandLineKey1</code>原本的值<code>value1</code>被后面的<code>-k1</code>的值<code>value4</code>所替换了，说明了替换规则生效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%91%bd%e4%bb%a4%e8%a1%8c%e5%8f%82%e6%95%b0%e6%94%af%e6%8c%81%e7%9a%84%e6%a0%bc%e5%bc%8f&quot;&gt;命令行参数支持的格式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(5) -- 配置框架：让服务无缝适应各种环境</title>
    <link href="http://www.dimsum.fun/2020/03/31/5.Configuration_document/"/>
    <id>http://www.dimsum.fun/2020/03/31/5.Configuration_document/</id>
    <published>2020-03-31T06:14:14.000Z</published>
    <updated>2020-04-01T09:04:29.535Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e6%a6%82%e5%bf%b5">概念</a><ul><li><a href="#%e9%85%8d%e7%bd%ae%e6%a1%86%e6%9e%b6%e7%9a%84%e6%a0%b8%e5%bf%83%e5%8c%85">配置框架的核心包</a></li><li><a href="#%e6%a1%86%e6%9e%b6%e9%85%8d%e7%bd%ae">框架配置</a></li><li><a href="#%e9%85%8d%e7%bd%ae%e6%a1%86%e6%9e%b6%e6%a0%b8%e5%bf%83%e7%b1%bb%e5%9e%8b">配置框架核心类型</a></li><li><a href="#%e9%85%8d%e7%bd%ae%e6%a1%86%e6%9e%b6%e6%89%a9%e5%b1%95%e7%82%b9">配置框架扩展点</a></li></ul></li><li><a href="#%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0">代码实现</a><ul><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e5%ae%8c%e5%96%84%e4%bb%a3%e7%a0%81">完善代码</a></li></ul></li></ul><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="配置框架的核心包"><a href="#配置框架的核心包" class="headerlink" title="配置框架的核心包"></a>配置框架的核心包</h2><p>与依赖注入框架的核心包类似，使用的是接口实现分离的设计模式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration              &#x2F;&#x2F;实现包</span><br><span class="line">Microsoft.Extensions.Configuration.Abstractions &#x2F;&#x2F;抽象包</span><br></pre></td></tr></table></figure><h2 id="框架配置"><a href="#框架配置" class="headerlink" title="框架配置"></a>框架配置</h2><ul><li>以<code>key-value</code>字符串键值对的方式抽象了配置</li><li>支持从各种不同的数据源读取配置，比如从命令行读取、环境变量读取、从文件读取等</li></ul><h2 id="配置框架核心类型"><a href="#配置框架核心类型" class="headerlink" title="配置框架核心类型"></a>配置框架核心类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IConfiguration</span><br><span class="line">IConfigurationRoot</span><br><span class="line">IConfigurationSection</span><br><span class="line">IConfigurationBuilder</span><br></pre></td></tr></table></figure><h2 id="配置框架扩展点"><a href="#配置框架扩展点" class="headerlink" title="配置框架扩展点"></a>配置框架扩展点</h2><p>可以通过拓展点注入我们自己的配置源，也就是我们可以指定任意我们指定的配置源到我们的配置框架中去</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IConfigurationSource</span><br><span class="line">IConfigurationProvider</span><br></pre></td></tr></table></figure><h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建名字为<code>ConfigurationDemo</code>的<code>控制台应用</code>，通过<code>nuget</code>引入以下两个包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.Configuration</span><br><span class="line">Microsoft.Extensions.Configuration.Abstractions</span><br></pre></td></tr></table></figure><h2 id="完善代码"><a href="#完善代码" class="headerlink" title="完善代码"></a>完善代码</h2><p>在<code>Program.cs</code>的<code>Main</code>完善测试代码，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConfigurationDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">var</span> builder = <span class="keyword">new</span> ConfigurationBuilder();</span><br><span class="line">            builder.AddInMemoryCollection(<span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, <span class="keyword">string</span>&gt;()</span><br><span class="line">            &#123;</span><br><span class="line">                &#123;<span class="string">"key1"</span>, <span class="string">"value1"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"key2"</span>, <span class="string">"value2"</span>&#125;,</span><br><span class="line">                &#123;<span class="string">"sectionA:key4"</span>, <span class="string">"value4"</span>&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> configurationRoot = builder.Build();</span><br><span class="line">            Console.WriteLine(<span class="string">$"key1=<span class="subst">&#123;configurationRoot[<span class="string">"key1"</span>]&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"key2=<span class="subst">&#123;configurationRoot[<span class="string">"key2"</span>]&#125;</span>"</span>);</span><br><span class="line">            <span class="keyword">var</span> sectionA = configurationRoot.GetSection(<span class="string">"sectionA"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"sectionA:key4=<span class="subst">&#123;sectionA[<span class="string">"key4"</span>]&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个<code>ConfigurationBuilder</code>对象，添加内存配置源，然后调用<code>Build</code>方法来生成一个<code>IConfigurationRoot</code>对象，通过这个对象可以直接获取配置源的配置项，用<code>:</code>来区分多个层级，通过<code>GetSetion</code>可获取指定层级，可以依次推各个层级的键值对</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e6%a6%82%e5%bf%b5&quot;&gt;概念&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%85%8d%e7%bd%ae%e6%a1%86%e6%9e%b6%e7%9a%84%e6%a0%b8%e5%bf%83%e5%8c%85&quot;&gt;配置
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(4) -- 用Autofac增强容器能力</title>
    <link href="http://www.dimsum.fun/2020/03/31/4.DependencyInjectionAutofac_document/"/>
    <id>http://www.dimsum.fun/2020/03/31/4.DependencyInjectionAutofac_document/</id>
    <published>2020-03-31T05:13:13.000Z</published>
    <updated>2020-04-01T09:04:21.075Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%bc%95%e5%85%a5autofac%e5%a2%9e%e5%bc%ba%e4%bb%80%e4%b9%88%e8%83%bd%e5%8a%9b">引入Autofac增强什么能力</a></li><li><a href="#%e6%a0%b8%e5%bf%83%e6%89%a9%e5%b1%95%e7%82%b9">核心扩展点</a></li><li><a href="#%e9%9b%86%e6%88%90autofac">集成Autofac</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e9%aa%8c%e8%af%81">代码验证</a><ul><li><a href="#%e9%a1%b9%e7%9b%ae%e4%b8%8e%e4%be%9d%e8%b5%96">项目与依赖</a></li><li><a href="#%e5%9c%a8%e4%bb%a3%e7%a0%81%e4%b8%ad%e5%bc%95%e5%85%a5autofac">在代码中引入<code>Autofac</code></a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e6%9c%8d%e5%8a%a1">创建测试服务</a></li><li><a href="#%e8%8e%b7%e5%8f%96autofac%e6%a0%b9%e5%ae%b9%e5%99%a8">获取<code>Autofac</code>根容器</a></li><li><a href="#%e4%b8%80%e8%88%ac%e6%b3%a8%e5%86%8c%e6%9c%8d%e5%8a%a1">一般注册服务</a></li><li><a href="#%e5%9f%ba%e4%ba%8e%e5%90%8d%e5%ad%97%e6%b3%a8%e5%86%8c%e6%9c%8d%e5%8a%a1">基于名字注册服务</a></li><li><a href="#%e5%b1%9e%e6%80%a7%e6%b3%a8%e5%85%a5">属性注入</a></li><li><a href="#aop%e5%88%87%e9%9d%a2%e6%8b%a6%e6%88%aa%e5%99%a8">AOP切面拦截器</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e5%ad%90%e5%ae%b9%e5%99%a8">创建子容器</a></li></ul></li></ul><h1 id="引入Autofac增强什么能力"><a href="#引入Autofac增强什么能力" class="headerlink" title="引入Autofac增强什么能力"></a>引入Autofac增强什么能力</h1><ul><li>基于名称的注入：需要把一个服务按照名称来区分它的不同实现</li><li>属性注入：直接把服务注册到某个类的属性里面去，而不需要定义构造函数</li><li>子容器：类似原生的scope，但是功能更加丰富</li><li>基于动态代理的AOP：当我们需要在服务中注入我们额外的行为的时候</li></ul><h1 id="核心扩展点"><a href="#核心扩展点" class="headerlink" title="核心扩展点"></a>核心扩展点</h1><p><code>IServiceProviderFactory&lt;TContainerBuilder&gt;</code>：第三方的依赖注入容器都是使用这个类来作为拓展点，把自己注入到整个框架里面来，也就是我们在使用依赖注入框架的时候，不需要关注谁家的特性谁家接口时怎么样的，我们直接使用官方核心的定义即可，不需要直接依赖这些框架</p><h1 id="集成Autofac"><a href="#集成Autofac" class="headerlink" title="集成Autofac"></a>集成Autofac</h1><ul><li><code>Autofac.Extensions.DependencyInjection</code></li><li><code>Autofac.Extras.DynamicProxy</code></li></ul><h1 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h1><h2 id="项目与依赖"><a href="#项目与依赖" class="headerlink" title="项目与依赖"></a>项目与依赖</h2><p>创建名字为<code>DependencyInjectionAutofacDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><p>通过<code>nuget</code>引入以下两个包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Autofac.Extensions.DependencyInjection</span><br><span class="line">Autofac.Extras.DynamicProxy</span><br></pre></td></tr></table></figure><h2 id="在代码中引入Autofac"><a href="#在代码中引入Autofac" class="headerlink" title="在代码中引入Autofac"></a>在代码中引入<code>Autofac</code></h2><p>在<code>Program.cs</code>的<code>CreateDefaultBuilder</code>后面添加以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.UseServiceProviderFactory(new AutofacServiceProviderFactory())</span><br></pre></td></tr></table></figure><p><code>UseServiceProviderFactory</code>用来注册第三方容器的入口</p><p>在<code>Startup</code>中新增<code>ConfigureContainer</code>方法，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此<code>Autofac</code>框架引入完毕，下面要创建测试服务类</p><h2 id="创建测试服务"><a href="#创建测试服务" class="headerlink" title="创建测试服务"></a>创建测试服务</h2><p>创建测试服务<code>MyService.cs</code>类，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyInjectionAutofacDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IMyService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ShowCode</span>(<span class="params"></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyService</span> : <span class="title">IMyService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"MyService.ShowCode:<span class="subst">&#123;GetHashCode()&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyServiceV2</span> : <span class="title">IMyService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> MyNameService MyNameService &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowCode</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"MyServiceV2.ShowCode:<span class="subst">&#123;GetHashCode()&#125;</span>,MyNameService是否为空:<span class="subst">&#123;MyNameService==<span class="literal">null</span>&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyNameService</span></span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试拦截器<code>MyInterceptor.cs</code>，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Castle.DynamicProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyInjectionAutofacDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyInterceptor</span>:<span class="title">IInterceptor</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Intercept</span>(<span class="params">IInvocation invocation</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"Intercept before,Method:<span class="subst">&#123;invocation.Method.Name&#125;</span>"</span>);</span><br><span class="line">            invocation.Proceed();</span><br><span class="line">            Console.WriteLine(<span class="string">$"Intercept after,Method:<span class="subst">&#123;invocation.Method.Name&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>IInterceptor 是Autofac面向切面最重要的一个接口，他可以把我们的逻辑注入到方法的切面里面去</li><li><code>invocation.Proceed()</code>是指具体方法的执行，如果这句不执行，就相当于把切面方法拦截了，让具体类的方法不执行</li></ul><h2 id="获取Autofac根容器"><a href="#获取Autofac根容器" class="headerlink" title="获取Autofac根容器"></a>获取<code>Autofac</code>根容器</h2><p>在<code>Startup</code>里新增类型为<code>ILifetimeScope</code>的<code>AutofacContainer</code>属性，然后在<code>Configure</code>方法中为这个属性复制为<code>Autofac</code>的根容器，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Autofac;</span><br><span class="line"><span class="keyword">using</span> Autofac.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Autofac.Extras.DynamicProxy;</span><br><span class="line"><span class="keyword">using</span> DependencyInjectionAutofacDemo.Services;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyInjectionAutofacDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Configuration = configuration;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            services.AddControllers();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> ILifetimeScope AutofacContainer &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="keyword">this</span>.AutofacContainer = app.ApplicationServices.GetAutofacRoot();</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line">            app.UseHttpsRedirection();</span><br><span class="line">            app.UseRouting();</span><br><span class="line">            app.UseAuthorization();</span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapControllers();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一般注册服务"><a href="#一般注册服务" class="headerlink" title="一般注册服务"></a>一般注册服务</h2><p>在<code>ConfigureContainer</code>方法中进行服务注册，然后在<code>Configure</code>方法中获取服务实现对象，调用服务的<code>ShowCode</code>方法，具体代码如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    builder.RegisterType&lt;MyService&gt;().As&lt;IMyService&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> serviceNoName = <span class="keyword">this</span>.AutofacContainer.Resolve&lt;IMyService&gt;();</span><br><span class="line">    serviceNoName.ShowCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Autofac注册服务与<code>ASP.NET Core</code>写法相反，先注册实现类，然后再标记这个实现类为哪种类型</strong></p><p>运行项目会看到控制台打印了<code>MyService</code>对象调用<code>ShowCode</code>方法时候打印的信息，类似信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyService.ShowCode:16336406</span><br></pre></td></tr></table></figure><h2 id="基于名字注册服务"><a href="#基于名字注册服务" class="headerlink" title="基于名字注册服务"></a>基于名字注册服务</h2><p>注释掉上一步的测试代码，一样是在<code>ConfigureContainer</code>方法中进行服务注册，然后在<code>Configure</code>方法中获取服务实现对象，调用服务的<code>ShowCode</code>方法，具体代码如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    builder.RegisterType&lt;MyServiceV2&gt;().Named&lt;IMyService&gt;(<span class="string">"service2"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> service = <span class="keyword">this</span>.AutofacContainer.ResolveNamed&lt;IMyService&gt;(<span class="string">"service2"</span>);</span><br><span class="line">    service.ShowCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目会看到控制台打印了<code>MyServiceV2</code>对象调用<code>ShowCode</code>方法时候打印的信息，类似信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyServiceV2.ShowCode:16336406,MyNameService是否为空:True</span><br></pre></td></tr></table></figure><h2 id="属性注入"><a href="#属性注入" class="headerlink" title="属性注入"></a>属性注入</h2><p>注释掉上一步的测试代码，在<code>ConfigureContainer</code>方法中进行服务注册，注意需要先将属性的服务先进行注册，再进行调用方的服务注册，然后一样再<code>Configure</code>中获取对象，调用<code>ShowCode</code>方法</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    builder.RegisterType&lt;MyNameService&gt;();</span><br><span class="line">    builder.RegisterType&lt;MyServiceV2&gt;().As&lt;IMyService&gt;().PropertiesAutowired();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> service = <span class="keyword">this</span>.AutofacContainer.Resolve&lt;IMyService&gt;();</span><br><span class="line">    service.ShowCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目会看到控制台打印了<code>MyServiceV2</code>对象调用<code>ShowCode</code>方法时候打印的信息，类似信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyServiceV2.ShowCode:10309404,MyNameService是否为空:False</span><br></pre></td></tr></table></figure><p>可以发现<code>MyNameService</code>属性已经不为空了，通过属性注入的操作注入到了服务对象中去，打断点进行调试，可以看出<code>MyNameService</code>类型就是上面注册的类型</p><h2 id="AOP切面拦截器"><a href="#AOP切面拦截器" class="headerlink" title="AOP切面拦截器"></a>AOP切面拦截器</h2><p>注释掉上一步的测试代码，先在<code>ConfigureContainer</code>方法中注册拦截器，然后在服务，并指定拦截器为刚刚所注册的拦截器，并且允许接口拦截器生效，获取服务与上一步操作一致</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    builder.RegisterType&lt;MyInterceptor&gt;();</span><br><span class="line">    builder.RegisterType&lt;MyServiceV2&gt;().As&lt;IMyService&gt;().PropertiesAutowired().InterceptedBy(<span class="keyword">typeof</span>(MyInterceptor)).EnableInterfaceInterceptors();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> service = <span class="keyword">this</span>.AutofacContainer.Resolve&lt;IMyService&gt;();</span><br><span class="line">    service.ShowCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，可以看到控制台在打印出<code>MyServiceV2</code>的<code>ShowCode</code>方法所打印的信息前后，有拦截器打印出来的信息，类似信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intercept before,Method:ShowCode</span><br><span class="line">MyServiceV2.ShowCode:25116876,MyNameService是否为空:True</span><br><span class="line">Intercept after,Method:ShowCode</span><br></pre></td></tr></table></figure><h2 id="创建子容器"><a href="#创建子容器" class="headerlink" title="创建子容器"></a>创建子容器</h2><p>子容器主要适用于将服务注册进指定名字的容器里，这样只有在创建出指定名字的容器才可获取到服务对象，其他容器无法获得该服务对象，具体代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureContainer</span>(<span class="params">ContainerBuilder builder</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    builder.RegisterType&lt;MyNameService&gt;().InstancePerMatchingLifetimeScope(<span class="string">"myScope"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> myScope = <span class="keyword">this</span>.AutofacContainer.BeginLifetimeScope(<span class="string">"myScope"</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> service0 = myScope.Resolve&lt;MyNameService&gt;();</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> scope = myScope.BeginLifetimeScope())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> service1 = scope.Resolve&lt;MyNameService&gt;();</span><br><span class="line">            <span class="keyword">var</span> service2 = scope.Resolve&lt;MyNameService&gt;();</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">$"service0=service1:<span class="subst">&#123;service0==service1&#125;</span>"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">$"service1=service2:<span class="subst">&#123;service1==service2&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行代码可看到对象获取成功，并且获取到的对象在作用域内为同一个对象，类似信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service0&#x3D;service1:True</span><br><span class="line">service1&#x3D;service2:True</span><br></pre></td></tr></table></figure><p>如果这时候不通过创建指定名字的容器来获得服务对象，会发现代码运行直接报错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%bc%95%e5%85%a5autofac%e5%a2%9e%e5%bc%ba%e4%bb%80%e4%b9%88%e8%83%bd%e5%8a%9b&quot;&gt;引入Autofac增强什么能力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(3) -- 作用域与对象释放行为</title>
    <link href="http://www.dimsum.fun/2020/03/31/3.DependencyInjectionScopeAndDisposable_document/"/>
    <id>http://www.dimsum.fun/2020/03/31/3.DependencyInjectionScopeAndDisposable_document/</id>
    <published>2020-03-31T04:12:12.000Z</published>
    <updated>2020-04-01T09:04:14.822Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%ae%9e%e7%8e%b0idisposable%e6%8e%a5%e5%8f%a3%e7%b1%bb%e5%9e%8b%e7%9a%84%e9%87%8a%e6%94%be">实现<code>IDisposable</code>接口类型的释放</a></li><li><a href="#%e5%bb%ba%e8%ae%ae">建议</a></li><li><a href="#%e4%bb%a3%e7%a0%81%e9%aa%8c%e8%af%81">代码验证</a><ul><li><a href="#%e9%a1%b9%e7%9b%ae">项目</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e6%b5%8b%e8%af%95%e6%9c%8d%e5%8a%a1">创建测试服务</a></li><li><a href="#%e6%b5%8b%e8%af%95transient%e6%9c%8d%e5%8a%a1%e7%9a%84%e9%87%8a%e6%94%be%e6%97%b6%e6%9c%ba">测试<code>Transient</code>服务的释放时机</a></li><li><a href="#%e6%b5%8b%e8%af%95scope%e6%9c%8d%e5%8a%a1%e7%9a%84%e9%87%8a%e6%94%be%e6%97%b6%e6%9c%ba">测试<code>Scope</code>服务的释放时机</a></li><li><a href="#%e6%b5%8b%e8%af%95singleton%e6%9c%8d%e5%8a%a1%e7%9a%84%e9%87%8a%e6%94%be%e6%97%b6%e6%9c%ba">测试<code>Singleton</code>服务的释放时机</a></li></ul></li><li><a href="#%e9%81%bf%e5%9d%91">避坑</a><ul><li><a href="#%e8%87%aa%e5%b7%b1new%e6%9c%8d%e5%8a%a1">自己<code>new</code>服务</a></li><li><a href="#%e5%9c%a8%e8%b7%9f%e5%ae%b9%e5%99%a8%e8%8e%b7%e5%8f%96transient%e6%9c%8d%e5%8a%a1">在跟容器获取<code>Transient</code>服务</a></li></ul></li></ul><h1 id="实现IDisposable接口类型的释放"><a href="#实现IDisposable接口类型的释放" class="headerlink" title="实现IDisposable接口类型的释放"></a>实现<code>IDisposable</code>接口类型的释放</h1><ul><li><code>DI</code>只负责释放其创建的对象实例</li><li><code>DI</code>在容器或子容器释放时，释放尤其创建的对象实例</li></ul><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><ul><li>避免在根容器获取实现了<code>IDisposable</code>接口的瞬时服务</li><li>避免手动创建实现了<code>IDisposable</code>对象，应该使用容器来管理其生命周期</li></ul><h1 id="代码验证"><a href="#代码验证" class="headerlink" title="代码验证"></a>代码验证</h1><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>创建名为<code>DependencyInjectionScopeAndDisposableDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="创建测试服务"><a href="#创建测试服务" class="headerlink" title="创建测试服务"></a>创建测试服务</h2><p>创建测试服务类<code>OrderService.cs</code>，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">DependencyInjectionScopeAndDisposableDemo.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderService</span> &#123; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DisposableOrderService</span> : <span class="title">IOrderService</span>, <span class="title">IDisposable</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"DisposableOrderService Disposed:<span class="subst">&#123;<span class="keyword">this</span>.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试Transient服务的释放时机"><a href="#测试Transient服务的释放时机" class="headerlink" title="测试Transient服务的释放时机"></a>测试<code>Transient</code>服务的释放时机</h2><p>在<code>Startup.ConfigureServices</code>里注册一个瞬时服务</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IOrderService, DisposableOrderService&gt;();</span><br></pre></td></tr></table></figure><p>在<code>WeatherForecastController</code>里的<code>Get</code>方法通过方法参数的形式获取两个<code>IOrderService</code>接口对象，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Get</span>(<span class="params">[FromServices] IOrderService orderService1, [FromServices] IOrderService orderService2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"=====接口请求处理结束===="</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存之后运行项目，可以看到在打印接口请求处理结束之后两个对象都被释放掉，类似以下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;接口请求处理结束&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">DisposableOrderService Disposed:64923656</span><br><span class="line">DisposableOrderService Disposed:11404313</span><br></pre></td></tr></table></figure><p>得出的结论是：<strong>transient</strong>对象会在使用后被释放</p><h2 id="测试Scope服务的释放时机"><a href="#测试Scope服务的释放时机" class="headerlink" title="测试Scope服务的释放时机"></a>测试<code>Scope</code>服务的释放时机</h2><p>注释掉上一步注册瞬时服务的代码，重新注册一个<code>scope</code>服务，这里使用工厂模式，只是熟悉以下工厂模式的写法，没特殊意义</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;IOrderService&gt;(serviceProvider =&gt; <span class="keyword">new</span> DisposableOrderService());</span><br></pre></td></tr></table></figure><p>这时运行项目，控制台会打印出一个对象被释放，因为<code>scope</code>服务在当前容器内为单例，下面就这个结论再次测试以下，用using创建一个服务容器出来，看是否能创建出新的服务对象，并且代码运行超过using范围，服务对象是否会被释放。在<code>WeatherForecastController</code>的<code>Get</code>方法新增创建容器和获取服务操作，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Get</span>(<span class="params">[FromServices] IOrderService orderService1, [FromServices] IOrderService orderService2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">"========1=========="</span>);</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> scope = HttpContext.RequestServices.CreateScope())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> service = scope.ServiceProvider.GetService&lt;IOrderService&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    Console.WriteLine(<span class="string">"========2=========="</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"=====接口请求处理结束===="</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>HttpContext.RequestServices.CreateScope()</code>表示从根容器中创建一个子容器出来，<code>scope.ServiceProvider.GetService&lt;IOrderService&gt;()</code>表示从创建出来的子容器获取<code>IOrderService</code>的服务实现对象，运行项目可以得到两个对象被释放的信息，类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;1&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">DisposableOrderService Disposed:5568949</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;2&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;接口请求处理结束&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">DisposableOrderService Disposed:31307802</span><br></pre></td></tr></table></figure><p>得出结论是：<strong>scope</strong>对象会在对象产生的容器被释放的时候同时一起释放</p><h2 id="测试Singleton服务的释放时机"><a href="#测试Singleton服务的释放时机" class="headerlink" title="测试Singleton服务的释放时机"></a>测试<code>Singleton</code>服务的释放时机</h2><p>注释掉上一步注册scope服务的代码，重新注册一个<code>singleton</code>服务，这里一样使用工厂模式</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IOrderService&gt;(serviceProvider =&gt; <span class="keyword">new</span> DisposableOrderService());</span><br></pre></td></tr></table></figure><p>将<code>WeatherForecastController</code>的<code>Get</code>方法修改为以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Get</span>(<span class="params">[FromServices] IOrderService orderService1, [FromServices] IOrderService orderService2,[FromServices] IHostApplicationLifetime hostApplicationLifetime,[FromQuery]<span class="keyword">bool</span> isStop=<span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isStop)</span><br><span class="line">    &#123;</span><br><span class="line">        hostApplicationLifetime.StopApplication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"=====接口请求处理结束===="</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有获取了另一个服务<code>IHostApplicationLifetime</code>，这个服务对象控制了整个应用程序的生命周期，可以调用这个服务对象的<code>StopApplication</code>方法来停止应用程序，即停止整个站点，为了方便测试这里用了<code>isStop</code>这个参数来控制是否停止应用程序</p><p>运行项目，不管怎么刷新<code>/WeatherForecast</code>链接，都不会有对象被释放的信息打印出来，访问<code>/WeatherForecast?isStop=true</code>的时候，会看到应用程序被停止，同时打印出对象被释放的信息，类似以下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Application is shutting down...</span><br><span class="line">DisposableOrderService Disposed:3165221</span><br></pre></td></tr></table></figure><p>得出结论是：<strong>scope对象只会在根容器释放的时候才会被释放，即所有单例模式的对象都会被注册在根容器上面</strong></p><h1 id="避坑"><a href="#避坑" class="headerlink" title="避坑"></a>避坑</h1><h2 id="自己new服务"><a href="#自己new服务" class="headerlink" title="自己new服务"></a>自己<code>new</code>服务</h2><p>开始有个结论：<code>DI</code>只负责释放其创建的对象实例，这里进行验证以下自己new一个对象然后注入到容器中，看看是否能释放。这里注入了一个<code>singleton</code>对象，需注释掉上面做测试的代码，代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var myOrderService &#x3D; new DisposableOrderService();</span><br><span class="line">services.AddSingleton&lt;IOrderService&gt;(myOrderService);</span><br></pre></td></tr></table></figure><p>控制器代码不用改，运行项目，访问<code>/WeatherForecast</code>发现不会有对象被释放，访问<code>/WeatherForecast?isStop=true</code>时，应用程序被停止，但是也一样没有对象被释放的信息，所以这个对象最终还是没被释放</p><h2 id="在跟容器获取Transient服务"><a href="#在跟容器获取Transient服务" class="headerlink" title="在跟容器获取Transient服务"></a>在跟容器获取<code>Transient</code>服务</h2><p>注释掉上面的测试代码，在<code>Startup.ConfigureServices</code>中注册一个瞬时服务，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddTransient&lt;IOrderService, DisposableOrderService&gt;();</span><br></pre></td></tr></table></figure><p>在<code>Startup.Configure</code>中从根容器获取瞬时服务对象，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = app.ApplicationServices.GetService&lt;IOrderService&gt;();</span><br><span class="line">    <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">    &#123;</span><br><span class="line">        app.UseDeveloperExceptionPage();</span><br><span class="line">    &#125;</span><br><span class="line">    app.UseHttpsRedirection();</span><br><span class="line">    app.UseRouting();</span><br><span class="line">    app.UseAuthorization();</span><br><span class="line">    app.UseEndpoints(endpoints =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        endpoints.MapControllers();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将<code>WeatherForecastController</code>的<code>Get</code>方法修改为以下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Get</span>(<span class="params">[FromServices] IHostApplicationLifetime hostApplicationLifetime, [FromQuery]<span class="keyword">bool</span> isStop = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isStop)</span><br><span class="line">    &#123;</span><br><span class="line">        hostApplicationLifetime.StopApplication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">"=====接口请求处理结束===="</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行项目，访问<code>/WeatherForecast</code>接口，发现并不会有对象被释放的信息，在带上<code>isStop=true</code>的参数的时候，应用程序被停止，这时才有对象被释放的信息，类似信息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Application is shutting down...</span><br><span class="line">DisposableOrderService Disposed:41149443</span><br></pre></td></tr></table></figure><p>得出结论：<strong>由于根容器只会在应用程序整个退出时回收，这就意味着即使这是个瞬时服务，但是应用程序不退出，这些对象会一直积累在应用程序内不得释放</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%ae%9e%e7%8e%b0idisposable%e6%8e%a5%e5%8f%a3%e7%b1%bb%e5%9e%8b%e7%9a%84%e9%87%8a%e6%94%be&quot;&gt;实现&lt;code&gt;IDisposable&lt;/code&gt;接
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(2) -- 依赖注入：良好架构的起点</title>
    <link href="http://www.dimsum.fun/2020/03/30/2.DependencyInjection_document/"/>
    <id>http://www.dimsum.fun/2020/03/30/2.DependencyInjection_document/</id>
    <published>2020-03-30T02:12:12.000Z</published>
    <updated>2020-04-01T09:04:05.594Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%bd%bf%e7%94%a8%e4%be%9d%e8%b5%96%e6%b3%a8%e5%85%a5%e6%a1%86%e6%9e%b6ioc%e6%a1%86%e6%9e%b6">为什么要使用依赖注入框架(IoC框架)</a><ul><li><a href="#%e4%be%9d%e8%b5%96%e6%b3%a8%e5%85%a5%e6%a1%86%e6%9e%b6%e7%bb%84%e4%bb%b6%e5%8c%85">依赖注入框架组件包</a></li><li><a href="#%e4%be%9d%e8%b5%96%e6%b3%a8%e5%85%a5%e6%a1%86%e6%9e%b6%e6%a0%b8%e5%bf%83%e7%b1%bb%e5%9e%8b">依赖注入框架核心类型</a></li><li><a href="#%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f">生命周期</a></li></ul></li><li><a href="#%e4%bb%a3%e7%a0%81%e6%bc%94%e7%a4%ba">代码演示</a><ul><li><a href="#%e9%a1%b9%e7%9b%ae">项目</a></li><li><a href="#%e7%a4%ba%e4%be%8b%e6%9c%8d%e5%8a%a1%e7%b1%bb">示例服务类</a></li><li><a href="#%e9%aa%8c%e8%af%81%e4%b8%8d%e5%90%8c%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e7%9a%84%e5%ae%9e%e7%8e%b0">验证不同生命周期的实现</a><ul><li><a href="#%e6%b3%a8%e5%86%8c%e4%b8%8d%e5%90%8c%e7%94%9f%e5%91%bd%e5%91%a8%e6%9c%9f%e7%9a%84%e6%9c%8d%e5%8a%a1">注册不同生命周期的服务</a></li><li><a href="#%e5%9c%a8%e6%96%b9%e6%b3%95%e5%8f%82%e6%95%b0%e4%b8%ad%e8%8e%b7%e5%be%97%e6%9c%8d%e5%8a%a1%e8%bf%9b%e8%a1%8c%e9%aa%8c%e8%af%81">在方法参数中获得服务进行验证</a></li></ul></li><li><a href="#%e5%85%b6%e4%bb%96%e6%96%b9%e5%bc%8f%e6%b3%a8%e5%86%8c%e6%9c%8d%e5%8a%a1%e4%bb%a5%e5%8d%95%e4%be%8b%e6%a8%a1%e5%bc%8f%e4%b8%ba%e4%be%8b">其他方式注册服务(以单例模式为例)</a><ul><li><a href="#%e7%9b%b4%e6%8e%a5new%e5%af%b9%e8%b1%a1">直接new对象</a></li><li><a href="#%e9%80%9a%e8%bf%87%e5%b7%a5%e5%8e%82%e6%a8%a1%e5%bc%8f%e6%b3%a8%e5%86%8c%e5%af%b9%e8%b1%a1">通过工厂模式注册对象</a></li></ul></li><li><a href="#%e5%b0%9d%e8%af%95%e6%b3%a8%e5%86%8c%e6%9c%8d%e5%8a%a1">尝试注册服务</a></li><li><a href="#%e7%a7%bb%e9%99%a4%e5%92%8c%e6%9b%bf%e6%8d%a2%e6%9c%8d%e5%8a%a1">移除和替换服务</a><ul><li><a href="#%e7%a7%bb%e9%99%a4%e6%9c%8d%e5%8a%a1">移除服务</a></li><li><a href="#%e6%9b%bf%e6%8d%a2%e6%9c%8d%e5%8a%a1">替换服务</a></li></ul></li><li><a href="#%e6%b3%9b%e5%9e%8b%e6%9c%8d%e5%8a%a1%e6%b3%a8%e5%86%8c">泛型服务注册</a></li></ul></li><li><a href="#%e6%9c%8d%e5%8a%a1%e5%af%b9%e8%b1%a1%e7%9a%84%e8%8e%b7%e5%8f%96">服务对象的获取</a></li></ul><h1 id="为什么要使用依赖注入框架-IoC框架"><a href="#为什么要使用依赖注入框架-IoC框架" class="headerlink" title="为什么要使用依赖注入框架(IoC框架)"></a>为什么要使用依赖注入框架(IoC框架)</h1><ul><li>借助依赖注入框架，我们可以轻松管理类之间的依赖，帮助我们在构建应用是遵循设计规则，确保代码的可维护性和可拓展性</li><li>ASP.NET Core的整个架构中，依赖注入框架提供了对象创建和生命周期管理的核心能力，各个组件相互写作，也是由依赖注入框架的能力来实现的</li></ul><h2 id="依赖注入框架组件包"><a href="#依赖注入框架组件包" class="headerlink" title="依赖注入框架组件包"></a>依赖注入框架组件包</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Microsoft.Extensions.DependencyInjection.Abstractions &#x2F;&#x2F;抽象包</span><br><span class="line">Microsoft.Extensions.DependencyInjection  &#x2F;&#x2F;具体实现</span><br></pre></td></tr></table></figure><h2 id="依赖注入框架核心类型"><a href="#依赖注入框架核心类型" class="headerlink" title="依赖注入框架核心类型"></a>依赖注入框架核心类型</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">IServiceCollection &#x2F;&#x2F;负责服务的注册</span><br><span class="line">ServiceDescriptor &#x2F;&#x2F;每个服务注册时的信息</span><br><span class="line">IServiceProvider  &#x2F;&#x2F;具体的容器，也是由ServiceCollection Build出来</span><br><span class="line">IServiceScope  &#x2F;&#x2F;表示一个容器的子容器的生命周期</span><br></pre></td></tr></table></figure><h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Singleton  &#x2F;&#x2F;单例：在整个根容器的生命周期内获得的都是同一个单例对象</span><br><span class="line">Scoped     &#x2F;&#x2F;作用域：在我的Scope的生命周期内，如果我的容器释放掉，则意味着我的对象释放掉，在这个生命周期范围内获得到的是一个单例对象</span><br><span class="line">Transient  &#x2F;&#x2F;瞬时：每一次从容器里获取对象时都产生一个新的对象</span><br></pre></td></tr></table></figure><h1 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h1><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>创建名为<code>DependencyInjectionDemo</code>的<code>ASP.NET Core</code>项目，类型为<code>API</code></p><h2 id="示例服务类"><a href="#示例服务类" class="headerlink" title="示例服务类"></a>示例服务类</h2><p>一共有5个示例服务类接口，分别为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">IGenericService&lt;T&gt;</span><br><span class="line">    |-- GenericService&lt;T&gt;   &#x2F;&#x2F;对应实现类</span><br><span class="line">IMyScopeService</span><br><span class="line">    |-- MyScopeService      &#x2F;&#x2F;对应实现类</span><br><span class="line">IMySingletonService</span><br><span class="line">    |-- MySingletonService  &#x2F;&#x2F;对应实现类</span><br><span class="line">IMyTransientService</span><br><span class="line">    |-- MyTransientService  &#x2F;&#x2F;对应实现类</span><br><span class="line">IOrderService</span><br><span class="line">    |-- OrderService        &#x2F;&#x2F;对应实现类</span><br><span class="line">    |-- OrderServiceEX      &#x2F;&#x2F;对应实现类</span><br></pre></td></tr></table></figure><p>因为是示例服务类，所以所有类和服务均没有属性和方法，纯粹为了验证服务注册和服务对象</p><h2 id="验证不同生命周期的实现"><a href="#验证不同生命周期的实现" class="headerlink" title="验证不同生命周期的实现"></a>验证不同生命周期的实现</h2><h3 id="注册不同生命周期的服务"><a href="#注册不同生命周期的服务" class="headerlink" title="注册不同生命周期的服务"></a>注册不同生命周期的服务</h3><p>在<code>Startup.ConfigureServices</code>方法中新增以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册Singleton服务</span></span><br><span class="line">services.AddSingleton&lt;IMySingletonService, MySingletonService&gt;();</span><br><span class="line"><span class="comment">// 注册Scope服务</span></span><br><span class="line">services.AddScoped&lt;IMyScopeService, MyScopeService&gt;();</span><br><span class="line"><span class="comment">// 注册Transient服务</span></span><br><span class="line">services.AddTransient&lt;IMyTransientService, MyTransientService&gt;();</span><br></pre></td></tr></table></figure><h3 id="在方法参数中获得服务进行验证"><a href="#在方法参数中获得服务进行验证" class="headerlink" title="在方法参数中获得服务进行验证"></a>在方法参数中获得服务进行验证</h3><ol><li>修改<code>WeatherForecastController</code>类的<code>Route</code>标识为<code>[Route(&quot;[controller]/[action]&quot;)]</code>，方便进行测试</li><li>在<code>WeatherForecastController</code>新增<code>GetService</code>方法，代码如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetService</span>(<span class="params">[FromServices] IMySingletonService singletonService1,</span></span></span><br><span class="line"><span class="function"><span class="params">    [FromServices] IMySingletonService singletonService2,</span></span></span><br><span class="line"><span class="function"><span class="params">    [FromServices] IMyScopeService scopeService1,</span></span></span><br><span class="line"><span class="function"><span class="params">    [FromServices] IMyScopeService scopeService2,</span></span></span><br><span class="line"><span class="function"><span class="params">    [FromServices] IMyTransientService transientService1,</span></span></span><br><span class="line"><span class="function"><span class="params">    [FromServices] IMyTransientService transientService2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(singletonService1)&#125;</span>:<span class="subst">&#123;singletonService1.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(singletonService2)&#125;</span>:<span class="subst">&#123;singletonService2.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(scopeService1)&#125;</span>:<span class="subst">&#123;scopeService1.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(scopeService2)&#125;</span>:<span class="subst">&#123;scopeService2.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(transientService1)&#125;</span>:<span class="subst">&#123;transientService1.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">$"<span class="subst">&#123;<span class="keyword">nameof</span>(transientService2)&#125;</span>:<span class="subst">&#123;transientService2.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">"=========请求结束========"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行项目，访问<code>/WeatherForecast/GetService</code>，控制台会打印出类似以下信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">singletonService1:23488915</span><br><span class="line">singletonService2:23488915</span><br><span class="line">scopeService1:24854661</span><br><span class="line">scopeService2:24854661</span><br><span class="line">transientService1:38972574</span><br><span class="line">transientService2:14645893</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;请求结束&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>可以看出<code>IMySingletonService</code>的实现对象属于同一个对象，<code>IMyTransientService</code>的实现对象有多个，目前看<code>IMyScopeService</code>的实现对象为同一个，但是再次访问<code>/WeatherForecast/GetService</code>接口，就可以发现<code>IMyScopeService</code>的实现对象为新的对象，而<code>IMySingletonService</code>的实现对象还是上次访问的那个，打印信息如下<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">singletonService1:23488915</span><br><span class="line">singletonService2:23488915</span><br><span class="line">scopeService1:6630602</span><br><span class="line">scopeService2:6630602</span><br><span class="line">transientService1:5024928</span><br><span class="line">transientService2:38414640</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;请求结束&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他方式注册服务-以单例模式为例"><a href="#其他方式注册服务-以单例模式为例" class="headerlink" title="其他方式注册服务(以单例模式为例)"></a>其他方式注册服务(以单例模式为例)</h2><h3 id="直接new对象"><a href="#直接new对象" class="headerlink" title="直接new对象"></a>直接new对象</h3><p>在<code>Startup.ConfigureServices</code>方法中新增以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IOrderService&gt;(<span class="keyword">new</span> OrderService());</span><br></pre></td></tr></table></figure><h3 id="通过工厂模式注册对象"><a href="#通过工厂模式注册对象" class="headerlink" title="通过工厂模式注册对象"></a>通过工厂模式注册对象</h3><p>使用工厂模式注册对象，可以在委托中使用IServiceProvider参数，这也就意味着可以从容器里获取多个对象，然后进行组装，得到我们最终需要的实现实例，可以把工厂类设计的比较复杂，比如说我们的实现类依赖了容器里面的另外一个类的情况，或者我们期望用另外一个类来包装我们原有的实现的时候<br>在<code>Startup.ConfigureServices</code>方法中新增以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton&lt;IOrderService&gt;(serviceProvider =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OrderServiceEx();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="尝试注册服务"><a href="#尝试注册服务" class="headerlink" title="尝试注册服务"></a>尝试注册服务</h2><p>尝试注册服务有两种情况</p><ol><li>当指定接口已有实现类，则不再注册服务，代码如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.TryAddSingleton&lt;IOrderService, OrderServiceEx&gt;();</span><br></pre></td></tr></table></figure></li><li>当指定接口已有实现类，但是已注册的实现类不包含当前指定的实现类，则注册进去，如果已经包含当前的实现类，则不再注册服务，代码如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.TryAddEnumerable(ServiceDescriptor.Singleton&lt;IOrderService,OrderService&gt;());</span><br></pre></td></tr></table></figure>在控制器里验证是否有多个实现类注册，可通过下面的方法验证(需要自行注释或修改Startup里面的服务注册情况)<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">HttpGet</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">GetServiceList</span>(<span class="params">[FromServices] IEnumerable&lt;IOrderService&gt; orderServices</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> orderServices)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$"获取到服务实例：<span class="subst">&#123;item.ToString()&#125;</span>:<span class="subst">&#123;item.GetHashCode()&#125;</span>"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="移除和替换服务"><a href="#移除和替换服务" class="headerlink" title="移除和替换服务"></a>移除和替换服务</h2><h3 id="移除服务"><a href="#移除服务" class="headerlink" title="移除服务"></a>移除服务</h3>指的是直接从容器中移除指定接口的所有实现类，代码如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.RemoveAll&lt;IOrderService&gt;();</span><br></pre></td></tr></table></figure><h3 id="替换服务"><a href="#替换服务" class="headerlink" title="替换服务"></a>替换服务</h3>指的是替换指定接口的实现类，同时也会替换该服务的生命周期，代码如下：<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.Replace(ServiceDescriptor.Singleton&lt;IOrderService, OrderServiceEx&gt;());</span><br></pre></td></tr></table></figure></li></ol><h2 id="泛型服务注册"><a href="#泛型服务注册" class="headerlink" title="泛型服务注册"></a>泛型服务注册</h2><p>即对泛型服务注册，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddSingleton(<span class="keyword">typeof</span>(IGenericService&lt;&gt;), <span class="keyword">typeof</span>(GenericService&lt;&gt;));</span><br></pre></td></tr></table></figure><p>可以通过在控制器的构造函数中获取到服务对象，代码如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger,IOrderService orderService,IGenericService&lt;IOrderService&gt; genericService</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _logger = logger;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过断点查看最终<code>IGenericService</code>的<code>IOrderService</code>为哪个实现类</p><h1 id="服务对象的获取"><a href="#服务对象的获取" class="headerlink" title="服务对象的获取"></a>服务对象的获取</h1><p>通过上面可以看出，服务对象有两种获取方式，一种是通过构造函数直接注入，一种是通过函数参数，使用<code>[FromServices]</code>标签来注入</p><p><strong>一般按照使用情况来确定用哪种方式，如果整个类使用地方比较多，则使用构造函数注入，如果只有某一个方法使用，则一般使用函数参数来注入</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%bd%bf%e7%94%a8%e4%be%9d%e8%b5%96%e6%b3%a8%e5%85%a5%e6%a1%86%e6%9e%b6ioc%e6%a1%86%
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core开发实战课程备忘(1) -- ASP.NET Core的启动流程</title>
    <link href="http://www.dimsum.fun/2020/03/29/1.StartupDemo_document/"/>
    <id>http://www.dimsum.fun/2020/03/29/1.StartupDemo_document/</id>
    <published>2020-03-29T02:11:21.000Z</published>
    <updated>2020-04-01T09:03:58.277Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e8%af%be%e7%a8%8b%e7%9b%ae%e6%a0%87">课程目标</a></li><li><a href="#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae">创建项目</a></li><li><a href="#%e6%b7%bb%e5%8a%a0%e6%97%a5%e5%bf%97%e4%bb%a3%e7%a0%81">添加日志代码</a></li><li><a href="#%e8%bf%90%e8%a1%8c%e7%bb%93%e6%9e%9c">运行结果</a></li><li><a href="#%e7%bb%93%e8%ae%ba">结论</a></li><li><a href="#%e5%8f%a6%e5%a4%96">另外</a></li></ul><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h1><p>主要是掌握<code>ASP.NET Core</code>应用程序启动的流程，同时了解启动过程中哪些方法做了哪些操作</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>创建<code>ASP.NET Core Web</code>项目，项目类型选择<code>API</code>，直接创建即可</p><h1 id="添加日志代码"><a href="#添加日志代码" class="headerlink" title="添加日志代码"></a>添加日志代码</h1><p>本实例不涉及任何业务代码，纯粹只是添加日志查看各个方法的调用流程</p><p>修改<code>Program.cs</code>，以下直接放修改后的代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartupDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CreateHostBuilder(args).Build().Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureWebHostDefaults"</span>);</span><br><span class="line">                    webBuilder.UseStartup&lt;Startup&gt;();</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureServices(service =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureServices"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureAppConfiguration(builder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureAppConfiguration"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureHostConfiguration(builder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureHostConfiguration"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>Startup.cs</code>，以下直接放修改后的代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Configuration;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartupDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Startup</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Startup</span>(<span class="params">IConfiguration configuration</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Startup.Ctor"</span>);</span><br><span class="line">            Configuration = configuration;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> IConfiguration Configuration &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ConfigureServices</span>(<span class="params">IServiceCollection services</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Startup.ConfigureServices"</span>);</span><br><span class="line">            services.AddControllers();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Configure</span>(<span class="params">IApplicationBuilder app, IWebHostEnvironment env</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"Startup.Configure"</span>);</span><br><span class="line">            <span class="keyword">if</span> (env.IsDevelopment())</span><br><span class="line">            &#123;</span><br><span class="line">                app.UseDeveloperExceptionPage();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            app.UseHttpsRedirection();</span><br><span class="line"></span><br><span class="line">            app.UseRouting();</span><br><span class="line"></span><br><span class="line">            app.UseAuthorization();</span><br><span class="line"></span><br><span class="line">            app.UseStaticFiles();</span><br><span class="line"></span><br><span class="line">            app.UseEndpoints(endpoints =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                endpoints.MapControllers();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h1><p>参照上面将代码修改完，直接运行代码，控制台将打印出以下信息 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ConfigureWebHostDefaults</span><br><span class="line">ConfigureHostConfiguration</span><br><span class="line">ConfigureAppConfiguration</span><br><span class="line">Startup.Ctor</span><br><span class="line">Startup.ConfigureServices</span><br><span class="line">ConfigureServices</span><br><span class="line">Startup.Configure</span><br></pre></td></tr></table></figure><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>以下为<code>ASP.NET Core</code>启动运行流程</p><ul><li><code>ConfigureWebHostDefaults</code>：注册了应用程序必要的几个组件，比如说配置的组件、容器的组件等</li><li><code>ConfigureHostConfiguration</code>：配置程序启动时必要的配置，比如说程序启动时所需要监听的端口、需要监听的URL地址等，在这个过程可以嵌入我们自己的配置内容注入到配置的框架中去</li><li><code>ConfigureAppConfiguration</code>：嵌入我们自己的配置文件，供应用程序来读取，这些配置将来会在后续的应用程序执行过程中每个组件读取</li><li><code>ConfigureServices/ConfigureLogging/Startup/Startup.ConfigureServices</code>：这些都是往容器里面来注入我们的应用的组件</li><li><code>Startup.Configure</code>：注入中间件，处理HttpContext整个的请求过程</li></ul><h1 id="另外"><a href="#另外" class="headerlink" title="另外"></a>另外</h1><p>从代码运行来看，<code>Startup.cs</code>这个类可以被整合到<code>Program.cs</code>里的<code>ConfigureWebHostDefaults</code>方法中，<br>可以直接<code>ConfigureWebHostDefaults</code>方法中直接使用<code>webBuilder</code>调用<code>ConfigureServices</code>和<code>Configure</code>两个方法<br>具体可以参考以下代码</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Builder;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Hosting;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.DependencyInjection;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Hosting;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">StartupDemo</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            CreateHostBuilder(args).Build().Run();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IHostBuilder <span class="title">CreateHostBuilder</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span> =&gt;</span><br><span class="line">            Host.CreateDefaultBuilder(args)</span><br><span class="line">                .ConfigureWebHostDefaults(webBuilder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureWebHostDefaults"</span>);</span><br><span class="line">                    webBuilder.ConfigureServices(services =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(<span class="string">"Program.ConfigureServices"</span>);</span><br><span class="line">                        services.AddControllers();</span><br><span class="line">                    &#125;);</span><br><span class="line">                    webBuilder.Configure(app =&gt;</span><br><span class="line">                    &#123;</span><br><span class="line">                        Console.WriteLine(<span class="string">"Program.Configure"</span>);</span><br><span class="line">                        app.UseHttpsRedirection();</span><br><span class="line">                        app.UseRouting();</span><br><span class="line">                        app.UseAuthorization();</span><br><span class="line">                        app.UseStaticFiles();</span><br><span class="line">                        app.UseEndpoints(endpoints =&gt;</span><br><span class="line">                        &#123;</span><br><span class="line">                            endpoints.MapControllers();</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureServices(service =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureServices"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureAppConfiguration(builder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureAppConfiguration"</span>);</span><br><span class="line">                &#125;)</span><br><span class="line">                .ConfigureHostConfiguration(builder =&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">"ConfigureHostConfiguration"</span>);</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>但是为了代码结构更加合理，还是需要用<code>Startup</code>这个类来分离变动比较大的代码</strong></p><p><strong>通常是在Startup.ConfigureServices的方法里做服务注册，一般是Addxxx</strong></p><p><strong>在Startup.Configure决定注册那些中间件到处理过程中去</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e8%af%be%e7%a8%8b%e7%9b%ae%e6%a0%87&quot;&gt;课程目标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%88%9b%e5%bb%ba%e9%a1%b9%e7%9b%ae&quot;&gt;创建项目&lt;/a&gt;&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term=".NET Core开发实战课程备忘" scheme="http://www.dimsum.fun/categories/NET-Core%E5%BC%80%E5%8F%91%E5%AE%9E%E6%88%98%E8%AF%BE%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
    
      <category term="ASP.NET Core" scheme="http://www.dimsum.fun/tags/ASP-NET-Core/"/>
    
      <category term="教程备忘" scheme="http://www.dimsum.fun/tags/%E6%95%99%E7%A8%8B%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>.NET Core使用Cap</title>
    <link href="http://www.dimsum.fun/2020/03/27/dotnet-core-cap/"/>
    <id>http://www.dimsum.fun/2020/03/27/dotnet-core-cap/</id>
    <published>2020-03-27T05:13:13.000Z</published>
    <updated>2020-04-01T09:05:51.498Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c">准备工作</a></li><li><a href="#%e9%a1%b9%e7%9b%ae%e8%ae%be%e5%ae%9a">项目设定</a></li><li><a href="#%e5%88%9b%e5%bb%baservicea">创建ServiceA</a></li><li><a href="#%e5%88%9b%e5%bb%baserviceb">创建ServiceB</a></li></ul><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><code>CAP</code>需要依赖消息队列和数据存储，支持情况如下：<br>消息队列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Kafka</span><br><span class="line">RabbitMQ</span><br><span class="line">AzureServiceBus</span><br></pre></td></tr></table></figure><p>数据存储</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SqlServer</span><br><span class="line">MySql</span><br><span class="line">PostgreSql</span><br><span class="line">MongoDB</span><br></pre></td></tr></table></figure><p>两者自行搭配选择即可，其中<code>SqlServer</code>和<code>RabbitMQ</code>在docker中的安装可参照我另一篇备忘<a href="https://xiejiamiao.github.io/2020/03/27/chang-yong-docker/" target="_blank" rel="noopener">开发常用的docker镜像</a></p><h1 id="项目设定"><a href="#项目设定" class="headerlink" title="项目设定"></a>项目设定</h1><ul><li>两个服务，分别为<code>ServiceA</code>,<code>ServiceB</code></li><li><code>SqlServer</code>使用<code>CapDemo</code>数据库，默认<code>sa</code>账号，密码为<code>Today_is_20200328</code>，端口为默认的<code>1433</code>端口</li><li><code>RabbitMQ</code>安装地址为本机，默认端口，账号密码为<code>admin/admin</code></li></ul><h1 id="创建ServiceA"><a href="#创建ServiceA" class="headerlink" title="创建ServiceA"></a>创建ServiceA</h1><ol><li>在<code>Visual Studio 2019</code>中创建空白解决方案，取名为<code>Jiamiao.x.CapDemo</code></li><li>在解决方案中新建<code>Asp.net core</code>项目，名字为<code>Jiamiao.x.CapDemo.ServiceA</code>，<code>.net core</code>版本为<code>3.1</code></li><li><code>nuget</code>安装以下4个包 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DotNetCore.CAP</span><br><span class="line">DotNetCore.CAP.Dashboard</span><br><span class="line">DotNetCore.CAP.RabbitMQ</span><br><span class="line">DotNetCore.CAP.SqlServer</span><br></pre></td></tr></table></figure></li><li>在<code>Startup.cs</code>的<code>ConfigureServices</code>方法中加入以下代码 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">services.AddCap(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseSqlServer(<span class="string">"Password=Today_is_20200328;Persist Security Info=True;User ID=sa;Initial Catalog=CapDemo;Data Source=127.0.0.1"</span>);</span><br><span class="line">    options.UseRabbitMQ(r =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        r.HostName = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        r.UserName = <span class="string">"admin"</span>;</span><br><span class="line">        r.Password = <span class="string">"admin"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    options.UseDashboard();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>此时直接运行项目，如果数据库与消息队列均能正常连接，则会在数据库中生成以下两张表 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cap.Published</span><br><span class="line">cap.Received</span><br></pre></td></tr></table></figure></li><li>在<code>Controllers/WeatherForecastController.cs</code>中编写消息发布代码<br> 6.1 通过构造函数依赖注入<code>ICapPublisher</code>对象<br> 6.2 发布消息只需要调用<code>ICapPublisher</code>对象的<code>PublishAsync</code>或<code>Publish</code>方法，传入参数为队列名和消息值，全部代码如下: <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"><span class="keyword">using</span> Microsoft.Extensions.Logging;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">ApiController</span>]</span><br><span class="line">    [<span class="meta">Route(<span class="meta-string">"[controller]"</span>)</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WeatherForecastController</span> : <span class="title">ControllerBase</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="keyword">string</span>[] Summaries = <span class="keyword">new</span>[]</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"Freezing"</span>, <span class="string">"Bracing"</span>, <span class="string">"Chilly"</span>, <span class="string">"Cool"</span>, <span class="string">"Mild"</span>, <span class="string">"Warm"</span>, <span class="string">"Balmy"</span>, <span class="string">"Hot"</span>, <span class="string">"Sweltering"</span>, <span class="string">"Scorching"</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ILogger&lt;WeatherForecastController&gt; _logger;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">readonly</span> ICapPublisher _capPublisher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">WeatherForecastController</span>(<span class="params">ILogger&lt;WeatherForecastController&gt; logger,ICapPublisher capPublisher</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            _logger = logger;</span><br><span class="line">            _capPublisher = capPublisher;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        [<span class="meta">HttpGet</span>]</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;WeatherForecast&gt;&gt; Get()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> _capPublisher.PublishAsync(<span class="string">"jiamiao.x.cap.demo.show.time"</span>, DateTime.Now);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> rng = <span class="keyword">new</span> Random();</span><br><span class="line">            <span class="keyword">return</span> Enumerable.Range(<span class="number">1</span>, <span class="number">5</span>).Select(index =&gt; <span class="keyword">new</span> WeatherForecast</span><br><span class="line">            &#123;</span><br><span class="line">                Date = DateTime.Now.AddDays(index),</span><br><span class="line">                TemperatureC = rng.Next(<span class="number">-20</span>, <span class="number">55</span>),</span><br><span class="line">                Summary = Summaries[rng.Next(Summaries.Length)]</span><br><span class="line">            &#125;)</span><br><span class="line">            .ToArray();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>编写接收消息代码，接收消息有两种方式，一种在控制器中，即代码写在<code>***Controller.cs</code>中，另一种是在非控制器中，一般为<code>***Service.cs</code>中，以下分两步执行，因为<code>CAP</code>在默认情况下一个服务多个地方进行订阅，只会进行一次接收，除非进行分组(后面介绍)，所以<code>8/9</code>两个步骤在测试时需要注释其中一个，只保留另一个</li><li>编写在控制器中接收消息的代码，直接在控制器中写对应方法，方法参数为发送消息时传入的消息值类型，方法无返回值，再加上方法标签<code>CapSubscribe</code>即可，具体代码如下: <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Mvc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Controllers</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubController</span> : <span class="title">Controller</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowTime</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"接受方：SubController.ShowTime   接收到值：<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <strong>做到这步可以进行一次测试，就可以发现访问<code>/WeatherForecast</code>这个接口，会发送一条当前时间的消息出去，同时接收方也会在控制台打印出接收到的消息</strong></li><li>编写服务中接收消息的代码，需要注意接收消息的类需要继承<code>ICapSubscribe</code>接口，同时这里为了方便进行依赖注入，这里我们也自己定义了一个<code>ISubscriberService</code>接口，同时服务需要在<code>Startup.cs</code>的<code>ConfigureServices</code>方法中进行注册<br> 9.1 <code>ISubscriberService.cs</code>代码如下 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISubscriberService</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">ReceivedShowTimeMessage</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 9.2 <code>SubscriberService.cs</code>代码如下 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> DotNetCore.CAP;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceA.Services</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SubscriberService</span>: <span class="title">ISubscriberService</span>, <span class="title">ICapSubscribe</span></span><br><span class="line">    &#123;</span><br><span class="line">        [<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>)</span>]</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ReceivedShowTimeMessage</span>(<span class="params">DateTime <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">$"接受方：SubscriberService.ReceivedShowTimeMessage   接收到值：<span class="subst">&#123;<span class="keyword">value</span>&#125;</span>"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> 9.3 服务注册代码如下 <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">services.AddScoped&lt;ISubscriberService, SubscriberService&gt;();</span><br></pre></td></tr></table></figure> <strong>注意：这行服务注册代码需要在<code>services.AddCap</code>这个方法之前注册，否则<code>CAP</code>在进行接口扫描的时候找不到对应已经实现了<code>ICapSubscribe</code>接口的实现类，则无法进行订阅者注册</strong><br> <strong>注释掉第8步，进行第9步的测试，效果应该与第8步一致</strong></li><li>有时候一个消息需要多个消费者同时消费，则可以使用<code>Group</code>概念，消息发送代码不变，在标记<code>CapSubscribe</code>的时候，使用<code>Group</code>参数，多个Group订阅同个消息Id，消息则会对应分发到多个Group中，同个Group只能消费一次，即一个Group对一个消息Id订阅多次，也会只接收一次，具体代码如下<br>SubscriberService.cs中新增Group参数<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>,Group = <span class="meta-string">"SubscriberService"</span>)</span>]</span><br></pre></td></tr></table></figure>SubController.cs中新增Group参数<figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">CapSubscribe(<span class="meta-string">"jiamiao.x.cap.demo.show.time"</span>,Group = <span class="meta-string">"SubController"</span>)</span>]</span><br></pre></td></tr></table></figure></li><li>测试Group功能，将项目跑起来，此时再访问发送消息的api，会在控制台中打印出两条消息接收记录</li></ol><h1 id="创建ServiceB"><a href="#创建ServiceB" class="headerlink" title="创建ServiceB"></a>创建ServiceB</h1><p>ServiceB使用<code>EFCore</code>来进行配置，找<code>ServiceA</code>步骤2创建<code>Jiamiao.x.CapDemo.ServiceB</code>项目，因为<code>.Net Core 3.1</code>没有自带<code>EFCore</code>，所以这里除了<code>CAP</code>的4个包之外，还需要nuget安装<code>EFCore</code>的两个包，汇总起来需要nuget安装的包如下：<br>    <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DotNetCore.CAP</span><br><span class="line">DotNetCore.CAP.Dashboard</span><br><span class="line">DotNetCore.CAP.RabbitMQ</span><br><span class="line">DotNetCore.CAP.SqlServer</span><br><span class="line">Microsoft.EntityFrameworkCore</span><br><span class="line">Microsoft.EntityFrameworkCore.SqlServer</span><br></pre></td></tr></table></figure><br>创建<code>ServiceDbContext.cs</code>文件，代码如下<br>    <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Threading.Tasks;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Jiamiao.x.CapDemo.ServiceB.Infrastructure</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceDbContext</span>: <span class="title">DbContext</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ServiceDbContext</span>(<span class="params">DbContextOptions&lt;ServiceDbContext&gt; options</span>):<span class="title">base</span>(<span class="params">options</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>在<code>Startup.cs</code>中配置<code>EFCore</code>和<code>CAP</code>，具体代码如下：<br>    <figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">services.AddDbContext&lt;ServiceDbContext&gt;(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseSqlServer(</span><br><span class="line">        <span class="string">"Password=Today_is_20200328;Persist Security Info=True;User ID=sa;Initial Catalog=CapDemo;Data Source=127.0.0.1"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">services.AddCap(options =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    options.UseEntityFramework&lt;ServiceDbContext&gt;();</span><br><span class="line">    options.UseRabbitMQ(r =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        r.HostName = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">        r.UserName = <span class="string">"admin"</span>;</span><br><span class="line">        r.Password = <span class="string">"admin"</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    options.UseDashboard();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br>后续操作与<code>ServiceA</code>类似，需要注意：<strong>多个站点订阅同个消息Id，消息会往多个站点进行发送</strong></p><blockquote><p>附上CAP的Github地址:<a href="https://github.com/dotnetcore/CAP" target="_blank" rel="noopener">https://github.com/dotnetcore/CAP</a></p></blockquote><p><em>还有一些配合EF的操作还没来得及写，有空再说吧</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#%e5%87%86%e5%a4%87%e5%b7%a5%e4%bd%9c&quot;&gt;准备工作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#%e9%a1%b9%e7%9b%ae%e8%ae%be%e5%ae%9a&quot;&gt;项目设定&lt;/a&gt;&lt;/li&gt;
&lt;li
      
    
    </summary>
    
    
      <category term=".NET" scheme="http://www.dimsum.fun/categories/NET/"/>
    
    
      <category term=".NET Core" scheme="http://www.dimsum.fun/tags/NET-Core/"/>
    
      <category term="CAP" scheme="http://www.dimsum.fun/tags/CAP/"/>
    
      <category term="MicroServices" scheme="http://www.dimsum.fun/tags/MicroServices/"/>
    
  </entry>
  
  <entry>
    <title>开发常用的docker镜像</title>
    <link href="http://www.dimsum.fun/2020/03/27/chang-yong-docker/"/>
    <id>http://www.dimsum.fun/2020/03/27/chang-yong-docker/</id>
    <published>2020-03-27T04:12:12.000Z</published>
    <updated>2020-04-01T09:05:19.348Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#redis">Redis</a></li><li><a href="#elasticsearch%e9%9b%86%e7%be%a4">Elasticsearch(集群)</a></li><li><a href="#rabbitmq">RabbitMq</a></li><li><a href="#sqlserver-2017">SqlServer 2017</a></li></ul><p>主要用于开发阶段，不涉及生产环境配置，无权限自行添加<code>sudo</code></p><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><ol><li>获取镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis</span><br></pre></td></tr></table></figure></li><li>运行Redis<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 -d redis:lastes redis-server</span><br></pre></td></tr></table></figure></li></ol><h1 id="Elasticsearch-集群"><a href="#Elasticsearch-集群" class="headerlink" title="Elasticsearch(集群)"></a>Elasticsearch(集群)</h1><ol start="0"><li>说明：<ul><li>这里这里使用的是Elasticsearch 7.3.0版本</li><li>集群一共有3个Container，一个Master，两个Slave</li><li>配置文件中的<code>192.168.2.58</code>为对应节点的IP地址</li><li>具体配置:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Elasticsearch集群</span><br><span class="line">    |------ Master</span><br><span class="line">        |--- 端口：9500</span><br><span class="line">        |--- TCP端口：9300</span><br><span class="line">        |--- 配置文件目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;master&#x2F;elasticsearch.yml</span><br><span class="line">        |--- 共享卷目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;master&#x2F;data</span><br><span class="line">    |------ Slave1</span><br><span class="line">        |--- 端口：9600</span><br><span class="line">        |--- TCP端口：9301</span><br><span class="line">        |--- 配置文件目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave1&#x2F;elasticsearch.yml</span><br><span class="line">        |--- 共享卷目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave1&#x2F;data</span><br><span class="line">    |------ Slave2</span><br><span class="line">        |--- 端口：9700</span><br><span class="line">        |--- TCP端口：9302</span><br><span class="line">        |--- 配置文件目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave2&#x2F;elasticsearch.yml</span><br><span class="line">        |--- 共享卷目录：~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave2&#x2F;data</span><br></pre></td></tr></table></figure></li></ul></li><li>获取镜像<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li><li>在宿主机创建各个节点的<code>elasticsearch.yml</code>配置文件，具体内容如下:<ul><li>Master节点，配置文件路径：<code>~/var/elasticsearch/config/master/elasticsearch.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置支持Elasticsearch-Head</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="comment"># 设置集群Master配置信息</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myEsCluster</span></span><br><span class="line"><span class="comment"># 节点的名字，一般为Master或者Slave</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">master</span></span><br><span class="line"><span class="comment"># 节点是否为Master，设置为true的话，说明此节点为Master节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 设置网络，如果是本机的话就是127.0.0.1，其他服务器配置对应的IP地址即可(0.0.0.0支持外网访问)</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 设置对外服务的Http端口，默认为 9200，可以修改默认设置</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9500</span></span><br><span class="line"><span class="comment"># 设置节点间交互的TCP端口，默认是9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment"># 手动指定可以成为Master的所有节点的Name或者IP，这些配置将会在第一次选举中进行计算</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["master"]</span></span><br><span class="line"><span class="comment"># 集群发现节点信息，一般为其他节点IP加交互端口，这里一般填主机IP</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["192.168.2.58:9301",</span> <span class="string">"192.168.2.58:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></li><li>Slave1节点，配置文件路径：<code>~/var/elasticsearch/config/slave1/elasticsearch.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群Slave配置信息</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myEsCluster</span></span><br><span class="line"><span class="comment"># 节点的名字，一般为Master或者Slave</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave1</span></span><br><span class="line"><span class="comment"># 节点是否为Master，设置为true的话，说明此节点为master节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置对外服务的Http端口，默认为 9200，可以修改默认设置</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9600</span></span><br><span class="line"><span class="comment"># 设置节点间交互的TCP端口，默认是9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9301</span></span><br><span class="line"><span class="comment"># 设置网络，如果是本机的话就是127.0.0.1，其他服务器配置对应的IP地址即可(0.0.0.0支持外网访问)</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 集群发现节点信息，一般为其他节点IP加交互端口，这里一般填主机IP</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["192.168.2.58:9300",</span> <span class="string">"192.168.2.58:9302"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></li><li>Slave2节点，配置文件路径：<code>~/var/elasticsearch/config/slave2/elasticsearch.yml</code><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群Slave配置信息</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">myEsCluster</span></span><br><span class="line"><span class="comment"># 节点的名字，一般为Master或者Slave</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">slave2</span></span><br><span class="line"><span class="comment"># 节点是否为Master，设置为true的话，说明此节点为master节点</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 设置对外服务的Http端口，默认为 9200，可以修改默认设置</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9700</span></span><br><span class="line"><span class="comment"># 设置节点间交互的TCP端口，默认是9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">9302</span></span><br><span class="line"><span class="comment"># 设置网络，如果是本机的话就是127.0.0.1，其他服务器配置对应的IP地址即可(0.0.0.0支持外网访问)</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 集群发现节点信息，一般为其他节点IP加交互端口，这里一般填主机IP</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["192.168.2.58:9300",</span> <span class="string">"192.168.2.58:9301"</span><span class="string">]</span></span><br></pre></td></tr></table></figure></li></ul></li><li>创建3个节点的<code>data</code>文件夹 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;master&#x2F;data</span><br><span class="line">~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave1&#x2F;data</span><br><span class="line">~&#x2F;var&#x2F;elasticsearch&#x2F;config&#x2F;slave2&#x2F;data</span><br></pre></td></tr></table></figure></li><li>运行节点<ul><li>运行Master节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -v ~/var/elasticsearch/config/master/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v ~/var/elasticsearch/config/master/data:/usr/share/elasticsearch/data --name esMaster -p 9500:9500 -p 9300:9300 elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li><li>运行Slave1节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -v ~/var/elasticsearch/config/slave1/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v ~/var/elasticsearch/config/slave1/data:/usr/share/elasticsearch/data --name esSlave1 -p 9600:9600 -p 9301:9301 elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li><li>运行Slave2节点<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e ES_JAVA_OPTS=<span class="string">"-Xms256m -Xmx256m"</span> -d -v ~/var/elasticsearch/config/slave2/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml -v ~/var/elasticsearch/config/slave2/data:/usr/share/elasticsearch/data --name esSlave2 -p 9700:9700 -p 9302:9302 elasticsearch:7.3.0</span><br></pre></td></tr></table></figure></li></ul></li><li>检查运行状态<ul><li>运行<code>docker ps</code>查看正在运行的Container，确保以上3个容器正常运行</li><li>访问<code>http://127.0.0.1:9500/_cat/nodes?v</code>查看是否有3个节点信息，如果节点运行正常，应该有如下信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ip         heap.percent ram.percent cpu load_1m load_5m load_15m node.role master name</span><br><span class="line">172.17.0.2           32          96  70    3.03    0.82     0.28 di        -      slave1</span><br><span class="line">172.17.0.3           30          96  70    3.03    0.82     0.28 di        -      slave2</span><br><span class="line">172.17.0.4           33          96  70    3.03    0.82     0.28 dim       *      master</span><br></pre></td></tr></table></figure></li></ul></li><li>安装<code>Elasticsearch-Head</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es-head -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure>运行成功后浏览器访问链接:<code>http://127.0.0.1:9100</code>，将里面的连接地址修改为:<code>http://localhost:9500</code>，保存即可看到3个节点的集群信息</li><li>安装<code>IK</code>分词软件<ul><li>这部分操作3个节点均需要操作一边</li><li>ElasticSearch版本为7.3.0，对应IK分词版本为7.3,下载链接<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.3.0/elasticsearch-analysis-ik-7.3.0.zip" target="_blank" rel="noopener">IK分词</a></li><li>具体操作就是将下载下来的包放在各个节点的共享卷里，然后进入ES容器内命令行，解压并将文件拷贝到plugins文件夹中，重启容器</li></ul></li></ol><h1 id="RabbitMq"><a href="#RabbitMq" class="headerlink" title="RabbitMq"></a>RabbitMq</h1><ol><li>获取镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure></li><li>运行镜像，设置用户名密码(admin/admin)<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -dit --name Myrabbitmq -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -p 15672:15672 -p 5672:5672 rabbitmq:managemen</span><br></pre></td></tr></table></figure></li><li>进入管理界面 <code>http://localhost:15672</code></li></ol><h1 id="SqlServer-2017"><a href="#SqlServer-2017" class="headerlink" title="SqlServer 2017"></a>SqlServer 2017</h1><ol><li>获取镜像<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure></li><li>运行镜像，设置<code>SA</code>密码为<code>Today_is_20200328</code><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -e <span class="string">"ACCEPT_EULA=Y"</span> -e <span class="string">"SA_PASSWORD=Today_is_20200328"</span> -p 1433:1433 --name mssql -d mcr.microsoft.com/mssql/server:2017-latest</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#redis&quot;&gt;Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#elasticsearch%e9%9b%86%e7%be%a4&quot;&gt;Elasticsearch(集群)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#rabbitmq&quot;&gt;R
      
    
    </summary>
    
    
      <category term="Docker" scheme="http://www.dimsum.fun/categories/Docker/"/>
    
    
      <category term="docker" scheme="http://www.dimsum.fun/tags/docker/"/>
    
      <category term="elasticsearch" scheme="http://www.dimsum.fun/tags/elasticsearch/"/>
    
  </entry>
  
</feed>
